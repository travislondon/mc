-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("e409e116-2060-4994-8235-9f2ecc5db2b9",
	"ac72a1fd-c7b6-4d22-bf49-996f2af2ffad",
	"ac72a1fd-c7b6-4d22-bf49-996f2af2ffad",
	'integrity',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("e88bad4a-d822-434b-addf-e50fad127316",
	112,
	"e409e116-2060-4994-8235-9f2ecc5db2b9",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'integrity::integrity');
INSERT INTO DIM_DIA
	VALUES ("e88bad4a-d822-434b-addf-e50fad127316",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("e559aaf6-ab55-4b2d-bedf-9c6f95fefff5",
	"00000000-0000-0000-0000-000000000000",
	'check_referential_integrity',
	'',
	'// For each class in the model do the following:
//   Search for duplicate identifiers in the instance extent.
//   Find unconditional formalizer from a participant in a simple association.
//   Find unconditional participant from a formalizer in a simple association.
//   For an associator in a linked association ensure both ends have an instance.
//   For the one end of an associative, find the unconditional associator.
//   For the other end of an associative, find the unconditional associator.
//   For a subtype, be sure a supertype is present.
//   For a supertype, be sure exactly one subtype is present.
// Show only the first violation of any particular rule in each extent.
instance_count = 0;
check_count = 0;
total_error_count = 0;
subtype_count = 0;
trace = "";
local_error_count = 0;
select many g_eiss from instances of G_EIS;
for each g_eis in g_eiss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Element_ID", trace_id:g_eis.Element_ID, name:"" );
  select many duplicate_g_eiss from instances of G_EIS where ( selected.Element_ID == g_eis.Element_ID and selected.Sys_ID == g_eis.Sys_ID );
  if ( cardinality duplicate_g_eiss != 1 )
    ::check_log( message: "uniqueness violation in G_EIS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R9100:  Global Element in System(G_EIS) -> Packageable Element(PE_PE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:g_eis.Element_ID ) ) )
  select one pe_pe related by g_eis->PE_PE[R9100];
  if ( empty pe_pe )
    ::check_log( message: "one instance not found G_EIS->PE_PE[R9100]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( pe_pe.Element_ID == g_eis.Element_ID ) )
      ::check_log( message: "referentials do not match identifiers between G_EIS and PE_PE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R9100:  Global Element in System(G_EIS) -> System Model(S_SYS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:g_eis.Sys_ID ) ) )
  select one s_sys related by g_eis->S_SYS[R9100];
  if ( empty s_sys )
    ::check_log( message: "one instance not found G_EIS->S_SYS[R9100]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sys.Sys_ID == g_eis.Sys_ID ) )
      ::check_log( message: "referentials do not match identifiers between G_EIS and S_SYS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_ees from instances of S_EE;
for each s_ee in s_ees
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"EE_ID", trace_id:s_ee.EE_ID, name:s_ee.Name );
  select many duplicate_s_ees from instances of S_EE where ( selected.EE_ID == s_ee.EE_ID );
  if ( cardinality duplicate_s_ees != 1 )
    ::check_log( message: "uniqueness violation in S_EE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  External Entity(S_EE) -> Packageable Element(PE_PE)
  select one pe_pe related by s_ee->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across S_EE->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_ee related by pe_pe->S_EE[R8001];
    if ( empty myself_s_ee or ( myself_s_ee != s_ee ) )
      ::check_log( message: "same subtype not found looping back across S_EE->PE_PE[R8001]->S_EE[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_eems from instances of S_EEM;
for each s_eem in s_eems
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"EEmod_ID", trace_id:s_eem.EEmod_ID, name:"" );
  select many duplicate_s_eems from instances of S_EEM where ( selected.EEmod_ID == s_eem.EEmod_ID and selected.EE_ID == s_eem.EE_ID );
  if ( cardinality duplicate_s_eems != 1 )
    ::check_log( message: "uniqueness violation in S_EEM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R9:  External Entity in Model(S_EEM) -> External Entity(S_EE)
  select one s_ee related by s_eem->S_EE[R9];
  if ( empty s_ee )
    ::check_log( message: "one instance not found S_EEM->S_EE[R9]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_ee.EE_ID == s_eem.EE_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_EEM and S_EE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_dts from instances of S_DT;
for each s_dt in s_dts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DT_ID", trace_id:s_dt.DT_ID, name:s_dt.Name );
  select many duplicate_s_dts from instances of S_DT where ( selected.DT_ID == s_dt.DT_ID );
  if ( cardinality duplicate_s_dts != 1 )
    ::check_log( message: "uniqueness violation in S_DT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_s_dts from instances of S_DT where ( selected.DT_ID == s_dt.DT_ID );
  if ( cardinality duplicate_s_dts != 1 )
    ::check_log( message: "uniqueness violation in S_DT for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Data Type(S_DT) -> Packageable Element(PE_PE)
  select one pe_pe related by s_dt->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across S_DT->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_dt related by pe_pe->S_DT[R8001];
    if ( empty myself_s_dt or ( myself_s_dt != s_dt ) )
      ::check_log( message: "same subtype not found looping back across S_DT->PE_PE[R8001]->S_DT[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R17:  supertype Data Type(S_DT)
  subtype_count = 0;
  select one s_cdt related by s_dt->S_CDT[R17];
  if ( not_empty s_cdt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_udt related by s_dt->S_UDT[R17];
  if ( not_empty s_udt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_edt related by s_dt->S_EDT[R17];
  if ( not_empty s_edt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_sdt related by s_dt->S_SDT[R17];
  if ( not_empty s_sdt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_irdt related by s_dt->S_IRDT[R17];
  if ( not_empty s_irdt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from S_DT across R17", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from S_DT across R17", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_cdts from instances of S_CDT;
for each s_cdt in s_cdts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DT_ID", trace_id:s_cdt.DT_ID, name:"" );
  select many duplicate_s_cdts from instances of S_CDT where ( selected.DT_ID == s_cdt.DT_ID );
  if ( cardinality duplicate_s_cdts != 1 )
    ::check_log( message: "uniqueness violation in S_CDT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R17:  Core Data Type(S_CDT) -> Data Type(S_DT)
  select one s_dt related by s_cdt->S_DT[R17];
  if ( empty s_dt )
    ::check_log( message: "supertype not found across S_CDT->S_DT[R17]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_cdt related by s_dt->S_CDT[R17];
    if ( empty myself_s_cdt or ( myself_s_cdt != s_cdt ) )
      ::check_log( message: "same subtype not found looping back across S_CDT->S_DT[R17]->S_CDT[R17]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_udts from instances of S_UDT;
for each s_udt in s_udts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DT_ID", trace_id:s_udt.DT_ID, name:"" );
  select many duplicate_s_udts from instances of S_UDT where ( selected.DT_ID == s_udt.DT_ID );
  if ( cardinality duplicate_s_udts != 1 )
    ::check_log( message: "uniqueness violation in S_UDT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R18:  User Data Type(S_UDT) -> Data Type(S_DT)
  select one s_dt related by s_udt->S_DT[R18];
  if ( empty s_dt )
    ::check_log( message: "one instance not found S_UDT->S_DT[R18]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == s_udt.CDT_DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_UDT and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R17:  User Data Type(S_UDT) -> Data Type(S_DT)
  select one s_dt related by s_udt->S_DT[R17];
  if ( empty s_dt )
    ::check_log( message: "supertype not found across S_UDT->S_DT[R17]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_udt related by s_dt->S_UDT[R17];
    if ( empty myself_s_udt or ( myself_s_udt != s_udt ) )
      ::check_log( message: "same subtype not found looping back across S_UDT->S_DT[R17]->S_UDT[R17]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_brgs from instances of S_BRG;
for each s_brg in s_brgs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Brg_ID", trace_id:s_brg.Brg_ID, name:s_brg.Name );
  select many duplicate_s_brgs from instances of S_BRG where ( selected.Brg_ID == s_brg.Brg_ID );
  if ( cardinality duplicate_s_brgs != 1 )
    ::check_log( message: "uniqueness violation in S_BRG for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R20:  Bridge(S_BRG) -> Data Type(S_DT)
  select one s_dt related by s_brg->S_DT[R20];
  if ( empty s_dt )
    ::check_log( message: "one instance not found S_BRG->S_DT[R20]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == s_brg.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_BRG and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R19:  Bridge(S_BRG) -> External Entity(S_EE)
  select one s_ee related by s_brg->S_EE[R19];
  if ( empty s_ee )
    ::check_log( message: "one instance not found S_BRG->S_EE[R19]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_ee.EE_ID == s_brg.EE_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_BRG and S_EE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_bparms from instances of S_BPARM;
for each s_bparm in s_bparms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"BParm_ID", trace_id:s_bparm.BParm_ID, name:s_bparm.Name );
  select many duplicate_s_bparms from instances of S_BPARM where ( selected.BParm_ID == s_bparm.BParm_ID );
  if ( cardinality duplicate_s_bparms != 1 )
    ::check_log( message: "uniqueness violation in S_BPARM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R21:  Bridge Parameter(S_BPARM) -> Bridge(S_BRG)
  select one s_brg related by s_bparm->S_BRG[R21];
  if ( empty s_brg )
    ::check_log( message: "one instance not found S_BPARM->S_BRG[R21]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_brg.Brg_ID == s_bparm.Brg_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_BPARM and S_BRG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R22:  Bridge Parameter(S_BPARM) -> Data Type(S_DT)
  select one s_dt related by s_bparm->S_DT[R22];
  if ( empty s_dt )
    ::check_log( message: "one instance not found S_BPARM->S_DT[R22]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == s_bparm.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_BPARM and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R55:  Bridge Parameter(S_BPARM) -> Bridge Parameter(S_BPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_bparm.Previous_BParm_ID ) ) )
  select one right_s_bparm related by s_bparm->S_BPARM[R55.''succeeds''];
  if ( empty right_s_bparm )
    ::check_log( message: "one instance not found S_BPARM->S_BPARM[R55.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_s_bparm.BParm_ID == s_bparm.Previous_BParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_BPARM and S_BPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_edts from instances of S_EDT;
for each s_edt in s_edts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DT_ID", trace_id:s_edt.DT_ID, name:"" );
  select many duplicate_s_edts from instances of S_EDT where ( selected.DT_ID == s_edt.DT_ID );
  if ( cardinality duplicate_s_edts != 1 )
    ::check_log( message: "uniqueness violation in S_EDT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R17:  Enumeration Data Type(S_EDT) -> Data Type(S_DT)
  select one s_dt related by s_edt->S_DT[R17];
  if ( empty s_dt )
    ::check_log( message: "supertype not found across S_EDT->S_DT[R17]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_edt related by s_dt->S_EDT[R17];
    if ( empty myself_s_edt or ( myself_s_edt != s_edt ) )
      ::check_log( message: "same subtype not found looping back across S_EDT->S_DT[R17]->S_EDT[R17]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_enums from instances of S_ENUM;
for each s_enum in s_enums
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Enum_ID", trace_id:s_enum.Enum_ID, name:s_enum.Name );
  select many duplicate_s_enums from instances of S_ENUM where ( selected.Enum_ID == s_enum.Enum_ID );
  if ( cardinality duplicate_s_enums != 1 )
    ::check_log( message: "uniqueness violation in S_ENUM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R27:  Enumerator(S_ENUM) -> Enumeration Data Type(S_EDT)
  select one s_edt related by s_enum->S_EDT[R27];
  if ( empty s_edt )
    ::check_log( message: "one instance not found S_ENUM->S_EDT[R27]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_edt.DT_ID == s_enum.EDT_DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_ENUM and S_EDT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R56:  Enumerator(S_ENUM) -> Enumerator(S_ENUM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_enum.Previous_Enum_ID ) ) )
  select one right_s_enum related by s_enum->S_ENUM[R56.''succeeds''];
  if ( empty right_s_enum )
    ::check_log( message: "one instance not found S_ENUM->S_ENUM[R56.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_s_enum.Enum_ID == s_enum.Previous_Enum_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_ENUM and S_ENUM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_syncs from instances of S_SYNC;
for each s_sync in s_syncs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Sync_ID", trace_id:s_sync.Sync_ID, name:s_sync.Name );
  select many duplicate_s_syncs from instances of S_SYNC where ( selected.Sync_ID == s_sync.Sync_ID );
  if ( cardinality duplicate_s_syncs != 1 )
    ::check_log( message: "uniqueness violation in S_SYNC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R25:  Function(S_SYNC) -> Data Type(S_DT)
  select one s_dt related by s_sync->S_DT[R25];
  if ( empty s_dt )
    ::check_log( message: "one instance not found S_SYNC->S_DT[R25]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == s_sync.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_SYNC and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Function(S_SYNC) -> Packageable Element(PE_PE)
  select one pe_pe related by s_sync->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across S_SYNC->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_sync related by pe_pe->S_SYNC[R8001];
    if ( empty myself_s_sync or ( myself_s_sync != s_sync ) )
      ::check_log( message: "same subtype not found looping back across S_SYNC->PE_PE[R8001]->S_SYNC[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_sparms from instances of S_SPARM;
for each s_sparm in s_sparms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SParm_ID", trace_id:s_sparm.SParm_ID, name:s_sparm.Name );
  select many duplicate_s_sparms from instances of S_SPARM where ( selected.SParm_ID == s_sparm.SParm_ID );
  if ( cardinality duplicate_s_sparms != 1 )
    ::check_log( message: "uniqueness violation in S_SPARM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R24:  Function Parameter(S_SPARM) -> Function(S_SYNC)
  select one s_sync related by s_sparm->S_SYNC[R24];
  if ( empty s_sync )
    ::check_log( message: "one instance not found S_SPARM->S_SYNC[R24]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sync.Sync_ID == s_sparm.Sync_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_SPARM and S_SYNC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R26:  Function Parameter(S_SPARM) -> Data Type(S_DT)
  select one s_dt related by s_sparm->S_DT[R26];
  if ( empty s_dt )
    ::check_log( message: "one instance not found S_SPARM->S_DT[R26]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == s_sparm.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_SPARM and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R54:  Function Parameter(S_SPARM) -> Function Parameter(S_SPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_sparm.Previous_SParm_ID ) ) )
  select one right_s_sparm related by s_sparm->S_SPARM[R54.''succeeds''];
  if ( empty right_s_sparm )
    ::check_log( message: "one instance not found S_SPARM->S_SPARM[R54.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_s_sparm.SParm_ID == s_sparm.Previous_SParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_SPARM and S_SPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_syss from instances of S_SYS;
for each s_sys in s_syss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Sys_ID", trace_id:s_sys.Sys_ID, name:s_sys.Name );
  select many duplicate_s_syss from instances of S_SYS where ( selected.Sys_ID == s_sys.Sys_ID );
  if ( cardinality duplicate_s_syss != 1 )
    ::check_log( message: "uniqueness violation in S_SYS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_irdts from instances of S_IRDT;
for each s_irdt in s_irdts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DT_ID", trace_id:s_irdt.DT_ID, name:"" );
  select many duplicate_s_irdts from instances of S_IRDT where ( selected.DT_ID == s_irdt.DT_ID );
  if ( cardinality duplicate_s_irdts != 1 )
    ::check_log( message: "uniqueness violation in S_IRDT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R123:  Instance Reference Data Type(S_IRDT) -> Model Class(O_OBJ)
  select one o_obj related by s_irdt->O_OBJ[R123];
  if ( empty o_obj )
    ::check_log( message: "one instance not found S_IRDT->O_OBJ[R123]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == s_irdt.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_IRDT and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R17:  Instance Reference Data Type(S_IRDT) -> Data Type(S_DT)
  select one s_dt related by s_irdt->S_DT[R17];
  if ( empty s_dt )
    ::check_log( message: "supertype not found across S_IRDT->S_DT[R17]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_irdt related by s_dt->S_IRDT[R17];
    if ( empty myself_s_irdt or ( myself_s_irdt != s_irdt ) )
      ::check_log( message: "same subtype not found looping back across S_IRDT->S_DT[R17]->S_IRDT[R17]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_sdts from instances of S_SDT;
for each s_sdt in s_sdts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DT_ID", trace_id:s_sdt.DT_ID, name:"" );
  select many duplicate_s_sdts from instances of S_SDT where ( selected.DT_ID == s_sdt.DT_ID );
  if ( cardinality duplicate_s_sdts != 1 )
    ::check_log( message: "uniqueness violation in S_SDT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R17:  Structured Data Type(S_SDT) -> Data Type(S_DT)
  select one s_dt related by s_sdt->S_DT[R17];
  if ( empty s_dt )
    ::check_log( message: "supertype not found across S_SDT->S_DT[R17]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_sdt related by s_dt->S_SDT[R17];
    if ( empty myself_s_sdt or ( myself_s_sdt != s_sdt ) )
      ::check_log( message: "same subtype not found looping back across S_SDT->S_DT[R17]->S_SDT[R17]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_mbrs from instances of S_MBR;
for each s_mbr in s_mbrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Member_ID", trace_id:s_mbr.Member_ID, name:s_mbr.Name );
  select many duplicate_s_mbrs from instances of S_MBR where ( selected.Member_ID == s_mbr.Member_ID and selected.Parent_DT_DT_ID == s_mbr.Parent_DT_DT_ID );
  if ( cardinality duplicate_s_mbrs != 1 )
    ::check_log( message: "uniqueness violation in S_MBR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R44:  Structure Member(S_MBR) -> Structured Data Type(S_SDT)
  select one s_sdt related by s_mbr->S_SDT[R44];
  if ( empty s_sdt )
    ::check_log( message: "one instance not found S_MBR->S_SDT[R44]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sdt.DT_ID == s_mbr.Parent_DT_DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_MBR and S_SDT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R45:  Structure Member(S_MBR) -> Data Type(S_DT)
  select one s_dt related by s_mbr->S_DT[R45];
  if ( empty s_dt )
    ::check_log( message: "one instance not found S_MBR->S_DT[R45]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == s_mbr.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_MBR and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R46:  Structure Member(S_MBR) -> Structure Member(S_MBR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_mbr.Previous_Member_ID ) ) )
  select one right_s_mbr related by s_mbr->S_MBR[R46.''succeeds''];
  if ( empty right_s_mbr )
    ::check_log( message: "one instance not found S_MBR->S_MBR[R46.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_s_mbr.Member_ID == s_mbr.Previous_Member_ID and right_s_mbr.Parent_DT_DT_ID == s_mbr.Parent_DT_DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_MBR and S_MBR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_dims from instances of S_DIM;
for each s_dim in s_dims
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DIM_ID", trace_id:s_dim.DIM_ID, name:"" );
  select many duplicate_s_dims from instances of S_DIM where ( selected.DIM_ID == s_dim.DIM_ID );
  if ( cardinality duplicate_s_dims != 1 )
    ::check_log( message: "uniqueness violation in S_DIM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R120:  Dimensions(S_DIM) -> Attribute(O_ATTR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.Attr_ID ) and ::is_null_id( id:s_dim.Obj_ID ) ) )
  select one o_attr related by s_dim->O_ATTR[R120];
  if ( empty o_attr )
    ::check_log( message: "one instance not found S_DIM->O_ATTR[R120]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_attr.Attr_ID == s_dim.Attr_ID and o_attr.Obj_ID == s_dim.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R121:  Dimensions(S_DIM) -> Operation Parameter(O_TPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.TParm_ID ) ) )
  select one o_tparm related by s_dim->O_TPARM[R121];
  if ( empty o_tparm )
    ::check_log( message: "one instance not found S_DIM->O_TPARM[R121]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tparm.TParm_ID == s_dim.TParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and O_TPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R122:  Dimensions(S_DIM) -> Operation(O_TFR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.Tfr_ID ) ) )
  select one o_tfr related by s_dim->O_TFR[R122];
  if ( empty o_tfr )
    ::check_log( message: "one instance not found S_DIM->O_TFR[R122]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tfr.Tfr_ID == s_dim.Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R531:  Dimensions(S_DIM) -> State Machine Event Data Item(SM_EVTDI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.SM_ID ) and ::is_null_id( id:s_dim.SMedi_ID ) ) )
  select one sm_evtdi related by s_dim->SM_EVTDI[R531];
  if ( empty sm_evtdi )
    ::check_log( message: "one instance not found S_DIM->SM_EVTDI[R531]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evtdi.SM_ID == s_dim.SM_ID and sm_evtdi.SMedi_ID == s_dim.SMedi_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and SM_EVTDI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R49:  Dimensions(S_DIM) -> Bridge Parameter(S_BPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.BParm_ID ) ) )
  select one s_bparm related by s_dim->S_BPARM[R49];
  if ( empty s_bparm )
    ::check_log( message: "one instance not found S_DIM->S_BPARM[R49]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_bparm.BParm_ID == s_dim.BParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and S_BPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R50:  Dimensions(S_DIM) -> Bridge(S_BRG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.Brg_ID ) ) )
  select one s_brg related by s_dim->S_BRG[R50];
  if ( empty s_brg )
    ::check_log( message: "one instance not found S_DIM->S_BRG[R50]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_brg.Brg_ID == s_dim.Brg_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and S_BRG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R51:  Dimensions(S_DIM) -> Function(S_SYNC)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.Sync_ID ) ) )
  select one s_sync related by s_dim->S_SYNC[R51];
  if ( empty s_sync )
    ::check_log( message: "one instance not found S_DIM->S_SYNC[R51]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sync.Sync_ID == s_dim.Sync_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and S_SYNC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R52:  Dimensions(S_DIM) -> Function Parameter(S_SPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.SParm_ID ) ) )
  select one s_sparm related by s_dim->S_SPARM[R52];
  if ( empty s_sparm )
    ::check_log( message: "one instance not found S_DIM->S_SPARM[R52]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sparm.SParm_ID == s_dim.SParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and S_SPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R53:  Dimensions(S_DIM) -> Structure Member(S_MBR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.Member_ID ) and ::is_null_id( id:s_dim.DT_ID ) ) )
  select one s_mbr related by s_dim->S_MBR[R53];
  if ( empty s_mbr )
    ::check_log( message: "one instance not found S_DIM->S_MBR[R53]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_mbr.Member_ID == s_dim.Member_ID and s_mbr.Parent_DT_DT_ID == s_dim.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and S_MBR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4017:  Dimensions(S_DIM) -> Property Parameter(C_PP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.PP_Id ) ) )
  select one c_pp related by s_dim->C_PP[R4017];
  if ( empty c_pp )
    ::check_log( message: "one instance not found S_DIM->C_PP[R4017]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_pp.PP_Id == s_dim.PP_Id ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and C_PP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4018:  Dimensions(S_DIM) -> Interface Operation(C_IO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:s_dim.Id ) ) )
  select one c_io related by s_dim->C_IO[R4018];
  if ( empty c_io )
    ::check_log( message: "one instance not found S_DIM->C_IO[R4018]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_io.Id == s_dim.Id ) )
      ::check_log( message: "referentials do not match identifiers between S_DIM and C_IO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R844:  Dimensions(S_DIM) -> Transient Var(V_TRN)
  // formalizer participation R849:  Dimensions(S_DIM) -> Variable(V_VAR)
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many s_exps from instances of S_EXP;
for each s_exp in s_exps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Exception_ID", trace_id:s_exp.Exception_ID, name:s_exp.Name );
  select many duplicate_s_exps from instances of S_EXP where ( selected.Exception_ID == s_exp.Exception_ID );
  if ( cardinality duplicate_s_exps != 1 )
    ::check_log( message: "uniqueness violation in S_EXP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Exception(S_EXP) -> Packageable Element(PE_PE)
  select one pe_pe related by s_exp->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across S_EXP->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_s_exp related by pe_pe->S_EXP[R8001];
    if ( empty myself_s_exp or ( myself_s_exp != s_exp ) )
      ::check_log( message: "same subtype not found looping back across S_EXP->PE_PE[R8001]->S_EXP[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_objs from instances of O_OBJ;
for each o_obj in o_objs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Obj_ID", trace_id:o_obj.Obj_ID, name:o_obj.Name );
  select many duplicate_o_objs from instances of O_OBJ where ( selected.Obj_ID == o_obj.Obj_ID );
  if ( cardinality duplicate_o_objs != 1 )
    ::check_log( message: "uniqueness violation in O_OBJ for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Model Class(O_OBJ) -> Packageable Element(PE_PE)
  select one pe_pe related by o_obj->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across O_OBJ->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_o_obj related by pe_pe->O_OBJ[R8001];
    if ( empty myself_o_obj or ( myself_o_obj != o_obj ) )
      ::check_log( message: "same subtype not found looping back across O_OBJ->PE_PE[R8001]->O_OBJ[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_iobjs from instances of O_IOBJ;
for each o_iobj in o_iobjs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"IObj_ID", trace_id:o_iobj.IObj_ID, name:"" );
  select many duplicate_o_iobjs from instances of O_IOBJ where ( selected.IObj_ID == o_iobj.IObj_ID );
  if ( cardinality duplicate_o_iobjs != 1 )
    ::check_log( message: "uniqueness violation in O_IOBJ for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R101:  Imported Class(O_IOBJ) -> Model Class(O_OBJ)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_iobj.Obj_ID ) ) )
  select one o_obj related by o_iobj->O_OBJ[R101];
  if ( empty o_obj )
    ::check_log( message: "one instance not found O_IOBJ->O_OBJ[R101]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == o_iobj.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_IOBJ and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R8001:  Imported Class(O_IOBJ) -> Packageable Element(PE_PE)
  select one pe_pe related by o_iobj->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across O_IOBJ->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_o_iobj related by pe_pe->O_IOBJ[R8001];
    if ( empty myself_o_iobj or ( myself_o_iobj != o_iobj ) )
      ::check_log( message: "same subtype not found looping back across O_IOBJ->PE_PE[R8001]->O_IOBJ[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_attrs from instances of O_ATTR;
for each o_attr in o_attrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_attr.Attr_ID, name:o_attr.Name );
  select many duplicate_o_attrs from instances of O_ATTR where ( selected.Attr_ID == o_attr.Attr_ID and selected.Obj_ID == o_attr.Obj_ID );
  if ( cardinality duplicate_o_attrs != 1 )
    ::check_log( message: "uniqueness violation in O_ATTR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R102:  Attribute(O_ATTR) -> Model Class(O_OBJ)
  select one o_obj related by o_attr->O_OBJ[R102];
  if ( empty o_obj )
    ::check_log( message: "one instance not found O_ATTR->O_OBJ[R102]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == o_attr.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_ATTR and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R103:  Attribute(O_ATTR) -> Attribute(O_ATTR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_attr.PAttr_ID ) ) )
  select one right_o_attr related by o_attr->O_ATTR[R103.''succeeds''];
  if ( empty right_o_attr )
    ::check_log( message: "one instance not found O_ATTR->O_ATTR[R103.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_o_attr.Attr_ID == o_attr.PAttr_ID and right_o_attr.Obj_ID == o_attr.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_ATTR and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R114:  Attribute(O_ATTR) -> Data Type(S_DT)
  select one s_dt related by o_attr->S_DT[R114];
  if ( empty s_dt )
    ::check_log( message: "one instance not found O_ATTR->S_DT[R114]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == o_attr.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_ATTR and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R106:  supertype Attribute(O_ATTR)
  subtype_count = 0;
  select one o_battr related by o_attr->O_BATTR[R106];
  if ( not_empty o_battr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one o_rattr related by o_attr->O_RATTR[R106];
  if ( not_empty o_rattr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from O_ATTR across R106", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from O_ATTR across R106", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_ids from instances of O_ID;
for each o_id in o_ids
  instance_count = instance_count + 1;
  trace = "";
  select many duplicate_o_ids from instances of O_ID where ( selected.Oid_ID == o_id.Oid_ID and selected.Obj_ID == o_id.Obj_ID );
  if ( cardinality duplicate_o_ids != 1 )
    ::check_log( message: "uniqueness violation in O_ID for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R104:  Class Identifier(O_ID) -> Model Class(O_OBJ)
  select one o_obj related by o_id->O_OBJ[R104];
  if ( empty o_obj )
    ::check_log( message: "one instance not found O_ID->O_OBJ[R104]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == o_id.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_ID and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_oidas from instances of O_OIDA;
for each o_oida in o_oidas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_oida.Attr_ID, name:"" );
  select many duplicate_o_oidas from instances of O_OIDA where ( selected.Attr_ID == o_oida.Attr_ID and selected.Oid_ID == o_oida.Oid_ID and selected.Obj_ID == o_oida.Obj_ID );
  if ( cardinality duplicate_o_oidas != 1 )
    ::check_log( message: "uniqueness violation in O_OIDA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R105:  Class Identifier Attribute(O_OIDA) -> Class Identifier(O_ID)
  // associator other participation R105:  Class Identifier Attribute(O_OIDA) -> Attribute(O_ATTR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_oida.Attr_ID ) ) )
  select one o_attr related by o_oida->O_ATTR[R105];
  if ( empty o_attr )
    ::check_log( message: "one instance not found O_OIDA->O_ATTR[R105]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_attr.Attr_ID == o_oida.Attr_ID and o_attr.Obj_ID == o_oida.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_OIDA and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_battrs from instances of O_BATTR;
for each o_battr in o_battrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_battr.Attr_ID, name:"" );
  select many duplicate_o_battrs from instances of O_BATTR where ( selected.Attr_ID == o_battr.Attr_ID and selected.Obj_ID == o_battr.Obj_ID );
  if ( cardinality duplicate_o_battrs != 1 )
    ::check_log( message: "uniqueness violation in O_BATTR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R106:  Base Attribute(O_BATTR) -> Attribute(O_ATTR)
  select one o_attr related by o_battr->O_ATTR[R106];
  if ( empty o_attr )
    ::check_log( message: "supertype not found across O_BATTR->O_ATTR[R106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_o_battr related by o_attr->O_BATTR[R106];
    if ( empty myself_o_battr or ( myself_o_battr != o_battr ) )
      ::check_log( message: "same subtype not found looping back across O_BATTR->O_ATTR[R106]->O_BATTR[R106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R107:  supertype Base Attribute(O_BATTR)
  subtype_count = 0;
  select one o_dbattr related by o_battr->O_DBATTR[R107];
  if ( not_empty o_dbattr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one o_nbattr related by o_battr->O_NBATTR[R107];
  if ( not_empty o_nbattr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from O_BATTR across R107", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from O_BATTR across R107", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_dbattrs from instances of O_DBATTR;
for each o_dbattr in o_dbattrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_dbattr.Attr_ID, name:"" );
  select many duplicate_o_dbattrs from instances of O_DBATTR where ( selected.Attr_ID == o_dbattr.Attr_ID and selected.Obj_ID == o_dbattr.Obj_ID );
  if ( cardinality duplicate_o_dbattrs != 1 )
    ::check_log( message: "uniqueness violation in O_DBATTR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R107:  Derived Base Attribute(O_DBATTR) -> Base Attribute(O_BATTR)
  select one o_battr related by o_dbattr->O_BATTR[R107];
  if ( empty o_battr )
    ::check_log( message: "supertype not found across O_DBATTR->O_BATTR[R107]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_o_dbattr related by o_battr->O_DBATTR[R107];
    if ( empty myself_o_dbattr or ( myself_o_dbattr != o_dbattr ) )
      ::check_log( message: "same subtype not found looping back across O_DBATTR->O_BATTR[R107]->O_DBATTR[R107]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_nbattrs from instances of O_NBATTR;
for each o_nbattr in o_nbattrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_nbattr.Attr_ID, name:"" );
  select many duplicate_o_nbattrs from instances of O_NBATTR where ( selected.Attr_ID == o_nbattr.Attr_ID and selected.Obj_ID == o_nbattr.Obj_ID );
  if ( cardinality duplicate_o_nbattrs != 1 )
    ::check_log( message: "uniqueness violation in O_NBATTR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R107:  New Base Attribute(O_NBATTR) -> Base Attribute(O_BATTR)
  select one o_battr related by o_nbattr->O_BATTR[R107];
  if ( empty o_battr )
    ::check_log( message: "supertype not found across O_NBATTR->O_BATTR[R107]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_o_nbattr related by o_battr->O_NBATTR[R107];
    if ( empty myself_o_nbattr or ( myself_o_nbattr != o_nbattr ) )
      ::check_log( message: "same subtype not found looping back across O_NBATTR->O_BATTR[R107]->O_NBATTR[R107]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_rattrs from instances of O_RATTR;
for each o_rattr in o_rattrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_rattr.Attr_ID, name:"" );
  select many duplicate_o_rattrs from instances of O_RATTR where ( selected.Attr_ID == o_rattr.Attr_ID and selected.Obj_ID == o_rattr.Obj_ID );
  if ( cardinality duplicate_o_rattrs != 1 )
    ::check_log( message: "uniqueness violation in O_RATTR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R108:  Referential Attribute(O_RATTR) -> Attribute Reference in Class(O_REF)
  select any o_ref related by o_rattr->O_REF[R108];
  if ( empty o_ref )
    ::check_log( message: "any instance not found O_RATTR->O_REF[R108]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_ref.Attr_ID == o_rattr.Attr_ID and o_ref.Obj_ID == o_rattr.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_RATTR and O_REF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R113:  Referential Attribute(O_RATTR) -> Base Attribute(O_BATTR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_rattr.BAttr_ID ) and ::is_null_id( id:o_rattr.BObj_ID ) ) )
  select one o_battr related by o_rattr->O_BATTR[R113];
  if ( empty o_battr )
    ::check_log( message: "one instance not found O_RATTR->O_BATTR[R113]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_battr.Attr_ID == o_rattr.BAttr_ID and o_battr.Obj_ID == o_rattr.BObj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_RATTR and O_BATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R106:  Referential Attribute(O_RATTR) -> Attribute(O_ATTR)
  select one o_attr related by o_rattr->O_ATTR[R106];
  if ( empty o_attr )
    ::check_log( message: "supertype not found across O_RATTR->O_ATTR[R106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_o_rattr related by o_attr->O_RATTR[R106];
    if ( empty myself_o_rattr or ( myself_o_rattr != o_rattr ) )
      ::check_log( message: "same subtype not found looping back across O_RATTR->O_ATTR[R106]->O_RATTR[R106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_refs from instances of O_REF;
for each o_ref in o_refs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"ARef_ID", trace_id:o_ref.ARef_ID, name:"" );
  select many duplicate_o_refs from instances of O_REF where ( selected.ROid_ID == o_ref.ROid_ID and selected.RAttr_ID == o_ref.RAttr_ID and selected.OIR_ID == o_ref.OIR_ID and selected.ROIR_ID == o_ref.ROIR_ID and selected.RObj_ID == o_ref.RObj_ID and selected.Obj_ID == o_ref.Obj_ID and selected.Rel_ID == o_ref.Rel_ID );
  if ( cardinality duplicate_o_refs != 1 )
    ::check_log( message: "uniqueness violation in O_REF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_o_refs from instances of O_REF where ( selected.ARef_ID == o_ref.ARef_ID );
  if ( cardinality duplicate_o_refs != 1 )
    ::check_log( message: "uniqueness violation in O_REF for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R108:  Attribute Reference in Class(O_REF) -> Referential Attribute(O_RATTR)
  select one o_rattr related by o_ref->O_RATTR[R108];
  if ( empty o_rattr )
    ::check_log( message: "one instance not found O_REF->O_RATTR[R108]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_rattr.Attr_ID == o_ref.Attr_ID and o_rattr.Obj_ID == o_ref.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_REF and O_RATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R112:  Attribute Reference in Class(O_REF) -> Attribute Reference in Class(O_REF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_ref.PARef_ID ) ) )
  select one right_o_ref related by o_ref->O_REF[R112.''succeeds''];
  if ( empty right_o_ref )
    ::check_log( message: "one instance not found O_REF->O_REF[R112.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_o_ref.ARef_ID == o_ref.PARef_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_REF and O_REF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator one participation R111:  Attribute Reference in Class(O_REF) -> Referring Class In Assoc(R_RGO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_ref.OIR_ID ) ) )
  select one r_rgo related by o_ref->R_RGO[R111];
  if ( empty r_rgo )
    ::check_log( message: "one instance not found O_REF->R_RGO[R111]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rgo.OIR_ID == o_ref.OIR_ID and r_rgo.Obj_ID == o_ref.Obj_ID and r_rgo.Rel_ID == o_ref.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_REF and R_RGO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R111:  Attribute Reference in Class(O_REF) -> Referred To Identifier Attribute(O_RTIDA)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_ref.RAttr_ID ) and ::is_null_id( id:o_ref.ROIR_ID ) and ::is_null_id( id:o_ref.RObj_ID ) ) )
  select one o_rtida related by o_ref->O_RTIDA[R111];
  if ( empty o_rtida )
    ::check_log( message: "one instance not found O_REF->O_RTIDA[R111]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_rtida.Attr_ID == o_ref.RAttr_ID and o_rtida.OIR_ID == o_ref.ROIR_ID and o_rtida.Oid_ID == o_ref.ROid_ID and o_rtida.Obj_ID == o_ref.RObj_ID and o_rtida.Rel_ID == o_ref.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_REF and O_RTIDA", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_rtidas from instances of O_RTIDA;
for each o_rtida in o_rtidas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Attr_ID", trace_id:o_rtida.Attr_ID, name:"" );
  select many duplicate_o_rtidas from instances of O_RTIDA where ( selected.Attr_ID == o_rtida.Attr_ID and selected.OIR_ID == o_rtida.OIR_ID and selected.Oid_ID == o_rtida.Oid_ID and selected.Obj_ID == o_rtida.Obj_ID and selected.Rel_ID == o_rtida.Rel_ID );
  if ( cardinality duplicate_o_rtidas != 1 )
    ::check_log( message: "uniqueness violation in O_RTIDA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R110:  Referred To Identifier Attribute(O_RTIDA) -> Referred To Class in Assoc(R_RTO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_rtida.OIR_ID ) and ::is_null_id( id:o_rtida.Rel_ID ) ) )
  select one r_rto related by o_rtida->R_RTO[R110];
  if ( empty r_rto )
    ::check_log( message: "one instance not found O_RTIDA->R_RTO[R110]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rto.Oid_ID == o_rtida.Oid_ID and r_rto.OIR_ID == o_rtida.OIR_ID and r_rto.Obj_ID == o_rtida.Obj_ID and r_rto.Rel_ID == o_rtida.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_RTIDA and R_RTO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R110:  Referred To Identifier Attribute(O_RTIDA) -> Class Identifier Attribute(O_OIDA)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_rtida.Attr_ID ) ) )
  select one o_oida related by o_rtida->O_OIDA[R110];
  if ( empty o_oida )
    ::check_log( message: "one instance not found O_RTIDA->O_OIDA[R110]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_oida.Attr_ID == o_rtida.Attr_ID and o_oida.Oid_ID == o_rtida.Oid_ID and o_oida.Obj_ID == o_rtida.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_RTIDA and O_OIDA", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_tfrs from instances of O_TFR;
for each o_tfr in o_tfrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Tfr_ID", trace_id:o_tfr.Tfr_ID, name:o_tfr.Name );
  select many duplicate_o_tfrs from instances of O_TFR where ( selected.Tfr_ID == o_tfr.Tfr_ID );
  if ( cardinality duplicate_o_tfrs != 1 )
    ::check_log( message: "uniqueness violation in O_TFR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R116:  Operation(O_TFR) -> Data Type(S_DT)
  select one s_dt related by o_tfr->S_DT[R116];
  if ( empty s_dt )
    ::check_log( message: "one instance not found O_TFR->S_DT[R116]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == o_tfr.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_TFR and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R115:  Operation(O_TFR) -> Model Class(O_OBJ)
  select one o_obj related by o_tfr->O_OBJ[R115];
  if ( empty o_obj )
    ::check_log( message: "one instance not found O_TFR->O_OBJ[R115]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == o_tfr.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_TFR and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R125:  Operation(O_TFR) -> Operation(O_TFR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_tfr.Previous_Tfr_ID ) ) )
  select one right_o_tfr related by o_tfr->O_TFR[R125.''succeeds''];
  if ( empty right_o_tfr )
    ::check_log( message: "one instance not found O_TFR->O_TFR[R125.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_o_tfr.Tfr_ID == o_tfr.Previous_Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_TFR and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many o_tparms from instances of O_TPARM;
for each o_tparm in o_tparms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"TParm_ID", trace_id:o_tparm.TParm_ID, name:o_tparm.Name );
  select many duplicate_o_tparms from instances of O_TPARM where ( selected.TParm_ID == o_tparm.TParm_ID );
  if ( cardinality duplicate_o_tparms != 1 )
    ::check_log( message: "uniqueness violation in O_TPARM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R117:  Operation Parameter(O_TPARM) -> Operation(O_TFR)
  select one o_tfr related by o_tparm->O_TFR[R117];
  if ( empty o_tfr )
    ::check_log( message: "one instance not found O_TPARM->O_TFR[R117]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tfr.Tfr_ID == o_tparm.Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_TPARM and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R118:  Operation Parameter(O_TPARM) -> Data Type(S_DT)
  select one s_dt related by o_tparm->S_DT[R118];
  if ( empty s_dt )
    ::check_log( message: "one instance not found O_TPARM->S_DT[R118]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == o_tparm.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_TPARM and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R124:  Operation Parameter(O_TPARM) -> Operation Parameter(O_TPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:o_tparm.Previous_TParm_ID ) ) )
  select one right_o_tparm related by o_tparm->O_TPARM[R124.''succeeds''];
  if ( empty right_o_tparm )
    ::check_log( message: "one instance not found O_TPARM->O_TPARM[R124.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_o_tparm.TParm_ID == o_tparm.Previous_TParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between O_TPARM and O_TPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_rels from instances of R_REL;
for each r_rel in r_rels
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Rel_ID", trace_id:r_rel.Rel_ID, name:"" );
  select many duplicate_r_rels from instances of R_REL where ( selected.Rel_ID == r_rel.Rel_ID );
  if ( cardinality duplicate_r_rels != 1 )
    ::check_log( message: "uniqueness violation in R_REL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // aone participation R201:  Association(R_REL) -> Class In Association(R_OIR)
  select any r_oir related by r_rel->R_OIR[R201];
  if ( empty r_oir )
    ::check_log( message: "any instance not found R_REL->R_OIR[R201]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == r_oir.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_REL and R_OIR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Association(R_REL) -> Packageable Element(PE_PE)
  select one pe_pe related by r_rel->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across R_REL->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_rel related by pe_pe->R_REL[R8001];
    if ( empty myself_r_rel or ( myself_r_rel != r_rel ) )
      ::check_log( message: "same subtype not found looping back across R_REL->PE_PE[R8001]->R_REL[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R206:  supertype Association(R_REL)
  subtype_count = 0;
  select one r_simp related by r_rel->R_SIMP[R206];
  if ( not_empty r_simp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_comp related by r_rel->R_COMP[R206];
  if ( not_empty r_comp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_assoc related by r_rel->R_ASSOC[R206];
  if ( not_empty r_assoc )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_subsup related by r_rel->R_SUBSUP[R206];
  if ( not_empty r_subsup )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from R_REL across R206", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from R_REL across R206", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_oirs from instances of R_OIR;
for each r_oir in r_oirs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_oir.OIR_ID, name:"" );
  select many duplicate_r_oirs from instances of R_OIR where ( selected.OIR_ID == r_oir.OIR_ID and selected.Obj_ID == r_oir.Obj_ID and selected.Rel_ID == r_oir.Rel_ID );
  if ( cardinality duplicate_r_oirs != 1 )
    ::check_log( message: "uniqueness violation in R_OIR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R202:  Class In Association(R_OIR) -> Imported Class(O_IOBJ)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:r_oir.IObj_ID ) ) )
  select one o_iobj related by r_oir->O_IOBJ[R202];
  if ( empty o_iobj )
    ::check_log( message: "one instance not found R_OIR->O_IOBJ[R202]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_iobj.IObj_ID == r_oir.IObj_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_OIR and O_IOBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator one participation R201:  Class In Association(R_OIR) -> Association(R_REL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:r_oir.Rel_ID ) ) )
  select one r_rel related by r_oir->R_REL[R201];
  if ( empty r_rel )
    ::check_log( message: "one instance not found R_OIR->R_REL[R201]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == r_oir.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_OIR and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R201:  Class In Association(R_OIR) -> Model Class(O_OBJ)
  select one o_obj related by r_oir->O_OBJ[R201];
  if ( empty o_obj )
    ::check_log( message: "one instance not found R_OIR->O_OBJ[R201]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == r_oir.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_OIR and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R203:  supertype Class In Association(R_OIR)
  subtype_count = 0;
  select one r_rto related by r_oir->R_RTO[R203];
  if ( not_empty r_rto )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_rgo related by r_oir->R_RGO[R203];
  if ( not_empty r_rgo )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_cone related by r_oir->R_CONE[R203];
  if ( not_empty r_cone )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_coth related by r_oir->R_COTH[R203];
  if ( not_empty r_coth )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from R_OIR across R203", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from R_OIR across R203", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_rtos from instances of R_RTO;
for each r_rto in r_rtos
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_rto.OIR_ID, name:"" );
  select many duplicate_r_rtos from instances of R_RTO where ( selected.OIR_ID == r_rto.OIR_ID and selected.Obj_ID == r_rto.Obj_ID and selected.Rel_ID == r_rto.Rel_ID );
  if ( cardinality duplicate_r_rtos != 1 )
    ::check_log( message: "uniqueness violation in R_RTO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_r_rtos from instances of R_RTO where ( selected.Oid_ID == r_rto.Oid_ID and selected.OIR_ID == r_rto.OIR_ID and selected.Obj_ID == r_rto.Obj_ID and selected.Rel_ID == r_rto.Rel_ID );
  if ( cardinality duplicate_r_rtos != 1 )
    ::check_log( message: "uniqueness violation in R_RTO for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R109:  Referred To Class in Assoc(R_RTO) -> Class Identifier(O_ID)
  // sub to super participation R203:  Referred To Class in Assoc(R_RTO) -> Class In Association(R_OIR)
  select one r_oir related by r_rto->R_OIR[R203];
  if ( empty r_oir )
    ::check_log( message: "supertype not found across R_RTO->R_OIR[R203]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_rto related by r_oir->R_RTO[R203];
    if ( empty myself_r_rto or ( myself_r_rto != r_rto ) )
      ::check_log( message: "same subtype not found looping back across R_RTO->R_OIR[R203]->R_RTO[R203]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R204:  supertype Referred To Class in Assoc(R_RTO)
  subtype_count = 0;
  select one r_super related by r_rto->R_SUPER[R204];
  if ( not_empty r_super )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_part related by r_rto->R_PART[R204];
  if ( not_empty r_part )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_aone related by r_rto->R_AONE[R204];
  if ( not_empty r_aone )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_aoth related by r_rto->R_AOTH[R204];
  if ( not_empty r_aoth )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from R_RTO across R204", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from R_RTO across R204", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_rgos from instances of R_RGO;
for each r_rgo in r_rgos
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_rgo.OIR_ID, name:"" );
  select many duplicate_r_rgos from instances of R_RGO where ( selected.OIR_ID == r_rgo.OIR_ID and selected.Obj_ID == r_rgo.Obj_ID and selected.Rel_ID == r_rgo.Rel_ID );
  if ( cardinality duplicate_r_rgos != 1 )
    ::check_log( message: "uniqueness violation in R_RGO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R203:  Referring Class In Assoc(R_RGO) -> Class In Association(R_OIR)
  select one r_oir related by r_rgo->R_OIR[R203];
  if ( empty r_oir )
    ::check_log( message: "supertype not found across R_RGO->R_OIR[R203]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_rgo related by r_oir->R_RGO[R203];
    if ( empty myself_r_rgo or ( myself_r_rgo != r_rgo ) )
      ::check_log( message: "same subtype not found looping back across R_RGO->R_OIR[R203]->R_RGO[R203]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R205:  supertype Referring Class In Assoc(R_RGO)
  subtype_count = 0;
  select one r_sub related by r_rgo->R_SUB[R205];
  if ( not_empty r_sub )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_form related by r_rgo->R_FORM[R205];
  if ( not_empty r_form )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_assr related by r_rgo->R_ASSR[R205];
  if ( not_empty r_assr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from R_RGO across R205", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from R_RGO across R205", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_simps from instances of R_SIMP;
for each r_simp in r_simps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Rel_ID", trace_id:r_simp.Rel_ID, name:"" );
  select many duplicate_r_simps from instances of R_SIMP where ( selected.Rel_ID == r_simp.Rel_ID );
  if ( cardinality duplicate_r_simps != 1 )
    ::check_log( message: "uniqueness violation in R_SIMP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R207:  Simple Association(R_SIMP) -> Class As Simple Participant(R_PART)
  select any r_part related by r_simp->R_PART[R207];
  if ( empty r_part )
    ::check_log( message: "any instance not found R_SIMP->R_PART[R207]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_part.Rel_ID == r_simp.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_SIMP and R_PART", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R206:  Simple Association(R_SIMP) -> Association(R_REL)
  select one r_rel related by r_simp->R_REL[R206];
  if ( empty r_rel )
    ::check_log( message: "supertype not found across R_SIMP->R_REL[R206]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_simp related by r_rel->R_SIMP[R206];
    if ( empty myself_r_simp or ( myself_r_simp != r_simp ) )
      ::check_log( message: "same subtype not found looping back across R_SIMP->R_REL[R206]->R_SIMP[R206]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_parts from instances of R_PART;
for each r_part in r_parts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_part.OIR_ID, name:"" );
  select many duplicate_r_parts from instances of R_PART where ( selected.OIR_ID == r_part.OIR_ID and selected.Obj_ID == r_part.Obj_ID and selected.Rel_ID == r_part.Rel_ID );
  if ( cardinality duplicate_r_parts != 1 )
    ::check_log( message: "uniqueness violation in R_PART for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R207:  Class As Simple Participant(R_PART) -> Simple Association(R_SIMP)
  select one r_simp related by r_part->R_SIMP[R207];
  if ( empty r_simp )
    ::check_log( message: "one instance not found R_PART->R_SIMP[R207]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_simp.Rel_ID == r_part.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_PART and R_SIMP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R204:  Class As Simple Participant(R_PART) -> Referred To Class in Assoc(R_RTO)
  select one r_rto related by r_part->R_RTO[R204];
  if ( empty r_rto )
    ::check_log( message: "supertype not found across R_PART->R_RTO[R204]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_part related by r_rto->R_PART[R204];
    if ( empty myself_r_part or ( myself_r_part != r_part ) )
      ::check_log( message: "same subtype not found looping back across R_PART->R_RTO[R204]->R_PART[R204]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_forms from instances of R_FORM;
for each r_form in r_forms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_form.OIR_ID, name:"" );
  select many duplicate_r_forms from instances of R_FORM where ( selected.OIR_ID == r_form.OIR_ID and selected.Obj_ID == r_form.Obj_ID and selected.Rel_ID == r_form.Rel_ID );
  if ( cardinality duplicate_r_forms != 1 )
    ::check_log( message: "uniqueness violation in R_FORM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R208:  Class As Simple Formalizer(R_FORM) -> Simple Association(R_SIMP)
  select one r_simp related by r_form->R_SIMP[R208];
  if ( empty r_simp )
    ::check_log( message: "one instance not found R_FORM->R_SIMP[R208]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_simp.Rel_ID == r_form.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_FORM and R_SIMP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R205:  Class As Simple Formalizer(R_FORM) -> Referring Class In Assoc(R_RGO)
  select one r_rgo related by r_form->R_RGO[R205];
  if ( empty r_rgo )
    ::check_log( message: "supertype not found across R_FORM->R_RGO[R205]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_form related by r_rgo->R_FORM[R205];
    if ( empty myself_r_form or ( myself_r_form != r_form ) )
      ::check_log( message: "same subtype not found looping back across R_FORM->R_RGO[R205]->R_FORM[R205]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_assocs from instances of R_ASSOC;
for each r_assoc in r_assocs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Rel_ID", trace_id:r_assoc.Rel_ID, name:"" );
  select many duplicate_r_assocs from instances of R_ASSOC where ( selected.Rel_ID == r_assoc.Rel_ID );
  if ( cardinality duplicate_r_assocs != 1 )
    ::check_log( message: "uniqueness violation in R_ASSOC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R209:  Linked Association(R_ASSOC) -> Class As Associated One Side(R_AONE)
  select one r_aone related by r_assoc->R_AONE[R209];
  if ( empty r_aone )
    ::check_log( message: "one instance not found R_ASSOC->R_AONE[R209]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_aone.Rel_ID == r_assoc.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_ASSOC and R_AONE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R210:  Linked Association(R_ASSOC) -> Class As Associated Other Side(R_AOTH)
  select one r_aoth related by r_assoc->R_AOTH[R210];
  if ( empty r_aoth )
    ::check_log( message: "one instance not found R_ASSOC->R_AOTH[R210]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_aoth.Rel_ID == r_assoc.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_ASSOC and R_AOTH", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R211:  Linked Association(R_ASSOC) -> Class As Link(R_ASSR)
  select one r_assr related by r_assoc->R_ASSR[R211];
  if ( empty r_assr )
    ::check_log( message: "one instance not found R_ASSOC->R_ASSR[R211]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_assr.Rel_ID == r_assoc.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_ASSOC and R_ASSR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R206:  Linked Association(R_ASSOC) -> Association(R_REL)
  select one r_rel related by r_assoc->R_REL[R206];
  if ( empty r_rel )
    ::check_log( message: "supertype not found across R_ASSOC->R_REL[R206]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_assoc related by r_rel->R_ASSOC[R206];
    if ( empty myself_r_assoc or ( myself_r_assoc != r_assoc ) )
      ::check_log( message: "same subtype not found looping back across R_ASSOC->R_REL[R206]->R_ASSOC[R206]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_aones from instances of R_AONE;
for each r_aone in r_aones
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_aone.OIR_ID, name:"" );
  select many duplicate_r_aones from instances of R_AONE where ( selected.OIR_ID == r_aone.OIR_ID and selected.Obj_ID == r_aone.Obj_ID and selected.Rel_ID == r_aone.Rel_ID );
  if ( cardinality duplicate_r_aones != 1 )
    ::check_log( message: "uniqueness violation in R_AONE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R209:  Class As Associated One Side(R_AONE) -> Linked Association(R_ASSOC)
  select one r_assoc related by r_aone->R_ASSOC[R209];
  if ( empty r_assoc )
    ::check_log( message: "one instance not found R_AONE->R_ASSOC[R209]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_assoc.Rel_ID == r_aone.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_AONE and R_ASSOC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R204:  Class As Associated One Side(R_AONE) -> Referred To Class in Assoc(R_RTO)
  select one r_rto related by r_aone->R_RTO[R204];
  if ( empty r_rto )
    ::check_log( message: "supertype not found across R_AONE->R_RTO[R204]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_aone related by r_rto->R_AONE[R204];
    if ( empty myself_r_aone or ( myself_r_aone != r_aone ) )
      ::check_log( message: "same subtype not found looping back across R_AONE->R_RTO[R204]->R_AONE[R204]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_aoths from instances of R_AOTH;
for each r_aoth in r_aoths
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_aoth.OIR_ID, name:"" );
  select many duplicate_r_aoths from instances of R_AOTH where ( selected.OIR_ID == r_aoth.OIR_ID and selected.Obj_ID == r_aoth.Obj_ID and selected.Rel_ID == r_aoth.Rel_ID );
  if ( cardinality duplicate_r_aoths != 1 )
    ::check_log( message: "uniqueness violation in R_AOTH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R210:  Class As Associated Other Side(R_AOTH) -> Linked Association(R_ASSOC)
  select one r_assoc related by r_aoth->R_ASSOC[R210];
  if ( empty r_assoc )
    ::check_log( message: "one instance not found R_AOTH->R_ASSOC[R210]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_assoc.Rel_ID == r_aoth.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_AOTH and R_ASSOC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R204:  Class As Associated Other Side(R_AOTH) -> Referred To Class in Assoc(R_RTO)
  select one r_rto related by r_aoth->R_RTO[R204];
  if ( empty r_rto )
    ::check_log( message: "supertype not found across R_AOTH->R_RTO[R204]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_aoth related by r_rto->R_AOTH[R204];
    if ( empty myself_r_aoth or ( myself_r_aoth != r_aoth ) )
      ::check_log( message: "same subtype not found looping back across R_AOTH->R_RTO[R204]->R_AOTH[R204]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_assrs from instances of R_ASSR;
for each r_assr in r_assrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_assr.OIR_ID, name:"" );
  select many duplicate_r_assrs from instances of R_ASSR where ( selected.OIR_ID == r_assr.OIR_ID and selected.Obj_ID == r_assr.Obj_ID and selected.Rel_ID == r_assr.Rel_ID );
  if ( cardinality duplicate_r_assrs != 1 )
    ::check_log( message: "uniqueness violation in R_ASSR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R211:  Class As Link(R_ASSR) -> Linked Association(R_ASSOC)
  select one r_assoc related by r_assr->R_ASSOC[R211];
  if ( empty r_assoc )
    ::check_log( message: "one instance not found R_ASSR->R_ASSOC[R211]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_assoc.Rel_ID == r_assr.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_ASSR and R_ASSOC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R205:  Class As Link(R_ASSR) -> Referring Class In Assoc(R_RGO)
  select one r_rgo related by r_assr->R_RGO[R205];
  if ( empty r_rgo )
    ::check_log( message: "supertype not found across R_ASSR->R_RGO[R205]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_assr related by r_rgo->R_ASSR[R205];
    if ( empty myself_r_assr or ( myself_r_assr != r_assr ) )
      ::check_log( message: "same subtype not found looping back across R_ASSR->R_RGO[R205]->R_ASSR[R205]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_subsups from instances of R_SUBSUP;
for each r_subsup in r_subsups
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Rel_ID", trace_id:r_subsup.Rel_ID, name:"" );
  select many duplicate_r_subsups from instances of R_SUBSUP where ( selected.Rel_ID == r_subsup.Rel_ID );
  if ( cardinality duplicate_r_subsups != 1 )
    ::check_log( message: "uniqueness violation in R_SUBSUP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R212:  Subtype Supertype Association(R_SUBSUP) -> Class As Supertype(R_SUPER)
  select one r_super related by r_subsup->R_SUPER[R212];
  if ( empty r_super )
    ::check_log( message: "one instance not found R_SUBSUP->R_SUPER[R212]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_super.Rel_ID == r_subsup.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_SUBSUP and R_SUPER", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R206:  Subtype Supertype Association(R_SUBSUP) -> Association(R_REL)
  select one r_rel related by r_subsup->R_REL[R206];
  if ( empty r_rel )
    ::check_log( message: "supertype not found across R_SUBSUP->R_REL[R206]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_subsup related by r_rel->R_SUBSUP[R206];
    if ( empty myself_r_subsup or ( myself_r_subsup != r_subsup ) )
      ::check_log( message: "same subtype not found looping back across R_SUBSUP->R_REL[R206]->R_SUBSUP[R206]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_supers from instances of R_SUPER;
for each r_super in r_supers
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_super.OIR_ID, name:"" );
  select many duplicate_r_supers from instances of R_SUPER where ( selected.OIR_ID == r_super.OIR_ID and selected.Obj_ID == r_super.Obj_ID and selected.Rel_ID == r_super.Rel_ID );
  if ( cardinality duplicate_r_supers != 1 )
    ::check_log( message: "uniqueness violation in R_SUPER for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R212:  Class As Supertype(R_SUPER) -> Subtype Supertype Association(R_SUBSUP)
  select one r_subsup related by r_super->R_SUBSUP[R212];
  if ( empty r_subsup )
    ::check_log( message: "one instance not found R_SUPER->R_SUBSUP[R212]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_subsup.Rel_ID == r_super.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_SUPER and R_SUBSUP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R204:  Class As Supertype(R_SUPER) -> Referred To Class in Assoc(R_RTO)
  select one r_rto related by r_super->R_RTO[R204];
  if ( empty r_rto )
    ::check_log( message: "supertype not found across R_SUPER->R_RTO[R204]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_super related by r_rto->R_SUPER[R204];
    if ( empty myself_r_super or ( myself_r_super != r_super ) )
      ::check_log( message: "same subtype not found looping back across R_SUPER->R_RTO[R204]->R_SUPER[R204]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_subs from instances of R_SUB;
for each r_sub in r_subs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_sub.OIR_ID, name:"" );
  select many duplicate_r_subs from instances of R_SUB where ( selected.OIR_ID == r_sub.OIR_ID and selected.Obj_ID == r_sub.Obj_ID and selected.Rel_ID == r_sub.Rel_ID );
  if ( cardinality duplicate_r_subs != 1 )
    ::check_log( message: "uniqueness violation in R_SUB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R213:  Class As Subtype(R_SUB) -> Subtype Supertype Association(R_SUBSUP)
  select one r_subsup related by r_sub->R_SUBSUP[R213];
  if ( empty r_subsup )
    ::check_log( message: "one instance not found R_SUB->R_SUBSUP[R213]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_subsup.Rel_ID == r_sub.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_SUB and R_SUBSUP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R205:  Class As Subtype(R_SUB) -> Referring Class In Assoc(R_RGO)
  select one r_rgo related by r_sub->R_RGO[R205];
  if ( empty r_rgo )
    ::check_log( message: "supertype not found across R_SUB->R_RGO[R205]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_sub related by r_rgo->R_SUB[R205];
    if ( empty myself_r_sub or ( myself_r_sub != r_sub ) )
      ::check_log( message: "same subtype not found looping back across R_SUB->R_RGO[R205]->R_SUB[R205]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_comps from instances of R_COMP;
for each r_comp in r_comps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Rel_ID", trace_id:r_comp.Rel_ID, name:"" );
  select many duplicate_r_comps from instances of R_COMP where ( selected.Rel_ID == r_comp.Rel_ID );
  if ( cardinality duplicate_r_comps != 1 )
    ::check_log( message: "uniqueness violation in R_COMP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R214:  Derived Association(R_COMP) -> Class As Derived One Side(R_CONE)
  select one r_cone related by r_comp->R_CONE[R214];
  if ( empty r_cone )
    ::check_log( message: "one instance not found R_COMP->R_CONE[R214]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_cone.Rel_ID == r_comp.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_COMP and R_CONE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R215:  Derived Association(R_COMP) -> Class As Derived Other Side(R_COTH)
  select one r_coth related by r_comp->R_COTH[R215];
  if ( empty r_coth )
    ::check_log( message: "one instance not found R_COMP->R_COTH[R215]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_coth.Rel_ID == r_comp.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_COMP and R_COTH", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R206:  Derived Association(R_COMP) -> Association(R_REL)
  select one r_rel related by r_comp->R_REL[R206];
  if ( empty r_rel )
    ::check_log( message: "supertype not found across R_COMP->R_REL[R206]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_comp related by r_rel->R_COMP[R206];
    if ( empty myself_r_comp or ( myself_r_comp != r_comp ) )
      ::check_log( message: "same subtype not found looping back across R_COMP->R_REL[R206]->R_COMP[R206]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_cones from instances of R_CONE;
for each r_cone in r_cones
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_cone.OIR_ID, name:"" );
  select many duplicate_r_cones from instances of R_CONE where ( selected.OIR_ID == r_cone.OIR_ID and selected.Obj_ID == r_cone.Obj_ID and selected.Rel_ID == r_cone.Rel_ID );
  if ( cardinality duplicate_r_cones != 1 )
    ::check_log( message: "uniqueness violation in R_CONE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R214:  Class As Derived One Side(R_CONE) -> Derived Association(R_COMP)
  select one r_comp related by r_cone->R_COMP[R214];
  if ( empty r_comp )
    ::check_log( message: "one instance not found R_CONE->R_COMP[R214]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_comp.Rel_ID == r_cone.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_CONE and R_COMP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R203:  Class As Derived One Side(R_CONE) -> Class In Association(R_OIR)
  select one r_oir related by r_cone->R_OIR[R203];
  if ( empty r_oir )
    ::check_log( message: "supertype not found across R_CONE->R_OIR[R203]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_cone related by r_oir->R_CONE[R203];
    if ( empty myself_r_cone or ( myself_r_cone != r_cone ) )
      ::check_log( message: "same subtype not found looping back across R_CONE->R_OIR[R203]->R_CONE[R203]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many r_coths from instances of R_COTH;
for each r_coth in r_coths
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"OIR_ID", trace_id:r_coth.OIR_ID, name:"" );
  select many duplicate_r_coths from instances of R_COTH where ( selected.OIR_ID == r_coth.OIR_ID and selected.Obj_ID == r_coth.Obj_ID and selected.Rel_ID == r_coth.Rel_ID );
  if ( cardinality duplicate_r_coths != 1 )
    ::check_log( message: "uniqueness violation in R_COTH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R215:  Class As Derived Other Side(R_COTH) -> Derived Association(R_COMP)
  select one r_comp related by r_coth->R_COMP[R215];
  if ( empty r_comp )
    ::check_log( message: "one instance not found R_COTH->R_COMP[R215]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_comp.Rel_ID == r_coth.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between R_COTH and R_COMP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R203:  Class As Derived Other Side(R_COTH) -> Class In Association(R_OIR)
  select one r_oir related by r_coth->R_OIR[R203];
  if ( empty r_oir )
    ::check_log( message: "supertype not found across R_COTH->R_OIR[R203]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_r_coth related by r_oir->R_COTH[R203];
    if ( empty myself_r_coth or ( myself_r_coth != r_coth ) )
      ::check_log( message: "same subtype not found looping back across R_COTH->R_OIR[R203]->R_COTH[R203]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_sms from instances of SM_SM;
for each sm_sm in sm_sms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_sm.SM_ID, name:"" );
  select many duplicate_sm_sms from instances of SM_SM where ( selected.SM_ID == sm_sm.SM_ID );
  if ( cardinality duplicate_sm_sms != 1 )
    ::check_log( message: "uniqueness violation in SM_SM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R510:  supertype State Machine(SM_SM)
  subtype_count = 0;
  select one sm_mealy related by sm_sm->SM_MEALY[R510];
  if ( not_empty sm_mealy )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_moore related by sm_sm->SM_MOORE[R510];
  if ( not_empty sm_moore )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_SM across R510", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_SM across R510", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
  // super to sub participation R517:  supertype State Machine(SM_SM)
  subtype_count = 0;
  select one sm_ism related by sm_sm->SM_ISM[R517];
  if ( not_empty sm_ism )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_asm related by sm_sm->SM_ASM[R517];
  if ( not_empty sm_asm )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_SM across R517", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_SM across R517", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_states from instances of SM_STATE;
for each sm_state in sm_states
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SMstt_ID", trace_id:sm_state.SMstt_ID, name:sm_state.Name );
  select many duplicate_sm_states from instances of SM_STATE where ( selected.SM_ID == sm_state.SM_ID and selected.SMstt_ID == sm_state.SMstt_ID );
  if ( cardinality duplicate_sm_states != 1 )
    ::check_log( message: "uniqueness violation in SM_STATE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_sm_states from instances of SM_STATE where ( selected.SMstt_ID == sm_state.SMstt_ID and selected.SM_ID == sm_state.SM_ID );
  if ( cardinality duplicate_sm_states != 1 )
    ::check_log( message: "uniqueness violation in SM_STATE for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R501:  State Machine State(SM_STATE) -> State Machine(SM_SM)
  select one sm_sm related by sm_state->SM_SM[R501];
  if ( empty sm_sm )
    ::check_log( message: "one instance not found SM_STATE->SM_SM[R501]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_sm.SM_ID == sm_state.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_STATE and SM_SM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_evts from instances of SM_EVT;
for each sm_evt in sm_evts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_evt.SM_ID, name:"" );
  select many duplicate_sm_evts from instances of SM_EVT where ( selected.SMevt_ID == sm_evt.SMevt_ID );
  if ( cardinality duplicate_sm_evts != 1 )
    ::check_log( message: "uniqueness violation in SM_EVT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_sm_evts from instances of SM_EVT where ( selected.SM_ID == sm_evt.SM_ID and selected.SMevt_ID == sm_evt.SMevt_ID );
  if ( cardinality duplicate_sm_evts != 1 )
    ::check_log( message: "uniqueness violation in SM_EVT for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R502:  State Machine Event(SM_EVT) -> State Machine(SM_SM)
  select one sm_sm related by sm_evt->SM_SM[R502];
  if ( empty sm_sm )
    ::check_log( message: "one instance not found SM_EVT->SM_SM[R502]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_sm.SM_ID == sm_evt.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_EVT and SM_SM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R525:  supertype State Machine Event(SM_EVT)
  subtype_count = 0;
  select one sm_sevt related by sm_evt->SM_SEVT[R525];
  if ( not_empty sm_sevt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_pevt related by sm_evt->SM_PEVT[R525];
  if ( not_empty sm_pevt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_EVT across R525", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_EVT across R525", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_semes from instances of SM_SEME;
for each sm_seme in sm_semes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SMevt_ID", trace_id:sm_seme.SMevt_ID, name:"" );
  select many duplicate_sm_semes from instances of SM_SEME where ( selected.SMevt_ID == sm_seme.SMevt_ID and selected.SM_ID == sm_seme.SM_ID and selected.SMstt_ID == sm_seme.SMstt_ID );
  if ( cardinality duplicate_sm_semes != 1 )
    ::check_log( message: "uniqueness violation in SM_SEME for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R503:  State Event Matrix Entry(SM_SEME) -> State Machine State(SM_STATE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_seme.SMstt_ID ) ) )
  select one sm_state related by sm_seme->SM_STATE[R503];
  if ( empty sm_state )
    ::check_log( message: "one instance not found SM_SEME->SM_STATE[R503]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_state.SM_ID == sm_seme.SM_ID and sm_state.SMstt_ID == sm_seme.SMstt_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_SEME and SM_STATE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R503:  State Event Matrix Entry(SM_SEME) -> SEM Event(SM_SEVT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_seme.SMevt_ID ) ) )
  select one sm_sevt related by sm_seme->SM_SEVT[R503];
  if ( empty sm_sevt )
    ::check_log( message: "one instance not found SM_SEME->SM_SEVT[R503]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_sevt.SMevt_ID == sm_seme.SMevt_ID and sm_sevt.SM_ID == sm_seme.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_SEME and SM_SEVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R504:  supertype State Event Matrix Entry(SM_SEME)
  subtype_count = 0;
  select one sm_eign related by sm_seme->SM_EIGN[R504];
  if ( not_empty sm_eign )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_ch related by sm_seme->SM_CH[R504];
  if ( not_empty sm_ch )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_nstxn related by sm_seme->SM_NSTXN[R504];
  if ( not_empty sm_nstxn )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_SEME across R504", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_SEME across R504", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_nstxns from instances of SM_NSTXN;
for each sm_nstxn in sm_nstxns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_nstxn.SM_ID, name:"" );
  select many duplicate_sm_nstxns from instances of SM_NSTXN where ( selected.SMevt_ID == sm_nstxn.SMevt_ID and selected.SMstt_ID == sm_nstxn.SMstt_ID and selected.SM_ID == sm_nstxn.SM_ID );
  if ( cardinality duplicate_sm_nstxns != 1 )
    ::check_log( message: "uniqueness violation in SM_NSTXN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_sm_nstxns from instances of SM_NSTXN where ( selected.SM_ID == sm_nstxn.SM_ID and selected.Trans_ID == sm_nstxn.Trans_ID );
  if ( cardinality duplicate_sm_nstxns != 1 )
    ::check_log( message: "uniqueness violation in SM_NSTXN for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R504:  New State Transition(SM_NSTXN) -> State Event Matrix Entry(SM_SEME)
  select one sm_seme related by sm_nstxn->SM_SEME[R504];
  if ( empty sm_seme )
    ::check_log( message: "supertype not found across SM_NSTXN->SM_SEME[R504]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_nstxn related by sm_seme->SM_NSTXN[R504];
    if ( empty myself_sm_nstxn or ( myself_sm_nstxn != sm_nstxn ) )
      ::check_log( message: "same subtype not found looping back across SM_NSTXN->SM_SEME[R504]->SM_NSTXN[R504]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // sub to super participation R507:  New State Transition(SM_NSTXN) -> Transition(SM_TXN)
  select one sm_txn related by sm_nstxn->SM_TXN[R507];
  if ( empty sm_txn )
    ::check_log( message: "supertype not found across SM_NSTXN->SM_TXN[R507]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_nstxn related by sm_txn->SM_NSTXN[R507];
    if ( empty myself_sm_nstxn or ( myself_sm_nstxn != sm_nstxn ) )
      ::check_log( message: "same subtype not found looping back across SM_NSTXN->SM_TXN[R507]->SM_NSTXN[R507]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_eigns from instances of SM_EIGN;
for each sm_eign in sm_eigns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SMevt_ID", trace_id:sm_eign.SMevt_ID, name:"" );
  select many duplicate_sm_eigns from instances of SM_EIGN where ( selected.SMevt_ID == sm_eign.SMevt_ID and selected.SM_ID == sm_eign.SM_ID and selected.SMstt_ID == sm_eign.SMstt_ID );
  if ( cardinality duplicate_sm_eigns != 1 )
    ::check_log( message: "uniqueness violation in SM_EIGN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R504:  Event Ignored(SM_EIGN) -> State Event Matrix Entry(SM_SEME)
  select one sm_seme related by sm_eign->SM_SEME[R504];
  if ( empty sm_seme )
    ::check_log( message: "supertype not found across SM_EIGN->SM_SEME[R504]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_eign related by sm_seme->SM_EIGN[R504];
    if ( empty myself_sm_eign or ( myself_sm_eign != sm_eign ) )
      ::check_log( message: "same subtype not found looping back across SM_EIGN->SM_SEME[R504]->SM_EIGN[R504]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_chs from instances of SM_CH;
for each sm_ch in sm_chs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SMevt_ID", trace_id:sm_ch.SMevt_ID, name:"" );
  select many duplicate_sm_chs from instances of SM_CH where ( selected.SMevt_ID == sm_ch.SMevt_ID and selected.SM_ID == sm_ch.SM_ID and selected.SMstt_ID == sm_ch.SMstt_ID );
  if ( cardinality duplicate_sm_chs != 1 )
    ::check_log( message: "uniqueness violation in SM_CH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R504:  Cant Happen(SM_CH) -> State Event Matrix Entry(SM_SEME)
  select one sm_seme related by sm_ch->SM_SEME[R504];
  if ( empty sm_seme )
    ::check_log( message: "supertype not found across SM_CH->SM_SEME[R504]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_ch related by sm_seme->SM_CH[R504];
    if ( empty myself_sm_ch or ( myself_sm_ch != sm_ch ) )
      ::check_log( message: "same subtype not found looping back across SM_CH->SM_SEME[R504]->SM_CH[R504]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_txns from instances of SM_TXN;
for each sm_txn in sm_txns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Trans_ID", trace_id:sm_txn.Trans_ID, name:"" );
  select many duplicate_sm_txns from instances of SM_TXN where ( selected.Trans_ID == sm_txn.Trans_ID and selected.SM_ID == sm_txn.SM_ID );
  if ( cardinality duplicate_sm_txns != 1 )
    ::check_log( message: "uniqueness violation in SM_TXN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R506:  Transition(SM_TXN) -> State Machine State(SM_STATE)
  select one sm_state related by sm_txn->SM_STATE[R506];
  if ( empty sm_state )
    ::check_log( message: "one instance not found SM_TXN->SM_STATE[R506]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_state.SMstt_ID == sm_txn.SMstt_ID and sm_state.SM_ID == sm_txn.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_TXN and SM_STATE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R505:  Transition(SM_TXN) -> State Machine(SM_SM)
  select one sm_sm related by sm_txn->SM_SM[R505];
  if ( empty sm_sm )
    ::check_log( message: "one instance not found SM_TXN->SM_SM[R505]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_sm.SM_ID == sm_txn.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_TXN and SM_SM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R507:  supertype Transition(SM_TXN)
  subtype_count = 0;
  select one sm_netxn related by sm_txn->SM_NETXN[R507];
  if ( not_empty sm_netxn )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_crtxn related by sm_txn->SM_CRTXN[R507];
  if ( not_empty sm_crtxn )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_nstxn related by sm_txn->SM_NSTXN[R507];
  if ( not_empty sm_nstxn )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_TXN across R507", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_TXN across R507", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_netxns from instances of SM_NETXN;
for each sm_netxn in sm_netxns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_netxn.SM_ID, name:"" );
  select many duplicate_sm_netxns from instances of SM_NETXN where ( selected.SM_ID == sm_netxn.SM_ID and selected.Trans_ID == sm_netxn.Trans_ID );
  if ( cardinality duplicate_sm_netxns != 1 )
    ::check_log( message: "uniqueness violation in SM_NETXN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R508:  No Event Transition(SM_NETXN) -> State Machine State(SM_STATE)
  select one sm_state related by sm_netxn->SM_STATE[R508];
  if ( empty sm_state )
    ::check_log( message: "one instance not found SM_NETXN->SM_STATE[R508]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_state.SM_ID == sm_netxn.SM_ID and sm_state.SMstt_ID == sm_netxn.SMstt_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_NETXN and SM_STATE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R507:  No Event Transition(SM_NETXN) -> Transition(SM_TXN)
  select one sm_txn related by sm_netxn->SM_TXN[R507];
  if ( empty sm_txn )
    ::check_log( message: "supertype not found across SM_NETXN->SM_TXN[R507]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_netxn related by sm_txn->SM_NETXN[R507];
    if ( empty myself_sm_netxn or ( myself_sm_netxn != sm_netxn ) )
      ::check_log( message: "same subtype not found looping back across SM_NETXN->SM_TXN[R507]->SM_NETXN[R507]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_crtxns from instances of SM_CRTXN;
for each sm_crtxn in sm_crtxns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_crtxn.SM_ID, name:"" );
  select many duplicate_sm_crtxns from instances of SM_CRTXN where ( selected.SM_ID == sm_crtxn.SM_ID and selected.Trans_ID == sm_crtxn.Trans_ID );
  if ( cardinality duplicate_sm_crtxns != 1 )
    ::check_log( message: "uniqueness violation in SM_CRTXN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R509:  Creation Transition(SM_CRTXN) -> Local Event(SM_LEVT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_crtxn.SMevt_ID ) ) )
  select one sm_levt related by sm_crtxn->SM_LEVT[R509];
  if ( empty sm_levt )
    ::check_log( message: "one instance not found SM_CRTXN->SM_LEVT[R509]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_levt.SM_ID == sm_crtxn.SM_ID and sm_levt.SMevt_ID == sm_crtxn.SMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_CRTXN and SM_LEVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R507:  Creation Transition(SM_CRTXN) -> Transition(SM_TXN)
  select one sm_txn related by sm_crtxn->SM_TXN[R507];
  if ( empty sm_txn )
    ::check_log( message: "supertype not found across SM_CRTXN->SM_TXN[R507]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_crtxn related by sm_txn->SM_CRTXN[R507];
    if ( empty myself_sm_crtxn or ( myself_sm_crtxn != sm_crtxn ) )
      ::check_log( message: "same subtype not found looping back across SM_CRTXN->SM_TXN[R507]->SM_CRTXN[R507]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_moores from instances of SM_MOORE;
for each sm_moore in sm_moores
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_moore.SM_ID, name:"" );
  select many duplicate_sm_moores from instances of SM_MOORE where ( selected.SM_ID == sm_moore.SM_ID );
  if ( cardinality duplicate_sm_moores != 1 )
    ::check_log( message: "uniqueness violation in SM_MOORE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R510:  Moore State Machine(SM_MOORE) -> State Machine(SM_SM)
  select one sm_sm related by sm_moore->SM_SM[R510];
  if ( empty sm_sm )
    ::check_log( message: "supertype not found across SM_MOORE->SM_SM[R510]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_moore related by sm_sm->SM_MOORE[R510];
    if ( empty myself_sm_moore or ( myself_sm_moore != sm_moore ) )
      ::check_log( message: "same subtype not found looping back across SM_MOORE->SM_SM[R510]->SM_MOORE[R510]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_mealys from instances of SM_MEALY;
for each sm_mealy in sm_mealys
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_mealy.SM_ID, name:"" );
  select many duplicate_sm_mealys from instances of SM_MEALY where ( selected.SM_ID == sm_mealy.SM_ID );
  if ( cardinality duplicate_sm_mealys != 1 )
    ::check_log( message: "uniqueness violation in SM_MEALY for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // aone participation R512:  Mealy State Machine(SM_MEALY) -> Mealy Action Home(SM_MEAH)
  select any sm_meah related by sm_mealy->SM_MEAH[R512];
  if ( empty sm_meah )
    ::check_log( message: "any instance not found SM_MEALY->SM_MEAH[R512]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_mealy.SM_ID == sm_meah.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_MEALY and SM_MEAH", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R510:  Mealy State Machine(SM_MEALY) -> State Machine(SM_SM)
  select one sm_sm related by sm_mealy->SM_SM[R510];
  if ( empty sm_sm )
    ::check_log( message: "supertype not found across SM_MEALY->SM_SM[R510]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_mealy related by sm_sm->SM_MEALY[R510];
    if ( empty myself_sm_mealy or ( myself_sm_mealy != sm_mealy ) )
      ::check_log( message: "same subtype not found looping back across SM_MEALY->SM_SM[R510]->SM_MEALY[R510]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_moahs from instances of SM_MOAH;
for each sm_moah in sm_moahs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Act_ID", trace_id:sm_moah.Act_ID, name:"" );
  select many duplicate_sm_moahs from instances of SM_MOAH where ( selected.SM_ID == sm_moah.SM_ID and selected.SMstt_ID == sm_moah.SMstt_ID );
  if ( cardinality duplicate_sm_moahs != 1 )
    ::check_log( message: "uniqueness violation in SM_MOAH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_sm_moahs from instances of SM_MOAH where ( selected.Act_ID == sm_moah.Act_ID and selected.SM_ID == sm_moah.SM_ID );
  if ( cardinality duplicate_sm_moahs != 1 )
    ::check_log( message: "uniqueness violation in SM_MOAH for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R511:  Moore Action Home(SM_MOAH) -> Moore State Machine(SM_MOORE)
  // associator other participation R511:  Moore Action Home(SM_MOAH) -> State Machine State(SM_STATE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_moah.SMstt_ID ) ) )
  select one sm_state related by sm_moah->SM_STATE[R511];
  if ( empty sm_state )
    ::check_log( message: "one instance not found SM_MOAH->SM_STATE[R511]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_state.SM_ID == sm_moah.SM_ID and sm_state.SMstt_ID == sm_moah.SMstt_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_MOAH and SM_STATE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R513:  Moore Action Home(SM_MOAH) -> Action Home(SM_AH)
  select one sm_ah related by sm_moah->SM_AH[R513];
  if ( empty sm_ah )
    ::check_log( message: "supertype not found across SM_MOAH->SM_AH[R513]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_moah related by sm_ah->SM_MOAH[R513];
    if ( empty myself_sm_moah or ( myself_sm_moah != sm_moah ) )
      ::check_log( message: "same subtype not found looping back across SM_MOAH->SM_AH[R513]->SM_MOAH[R513]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_meahs from instances of SM_MEAH;
for each sm_meah in sm_meahs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_meah.SM_ID, name:"" );
  select many duplicate_sm_meahs from instances of SM_MEAH where ( selected.Trans_ID == sm_meah.Trans_ID and selected.SM_ID == sm_meah.SM_ID );
  if ( cardinality duplicate_sm_meahs != 1 )
    ::check_log( message: "uniqueness violation in SM_MEAH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_sm_meahs from instances of SM_MEAH where ( selected.SM_ID == sm_meah.SM_ID and selected.Act_ID == sm_meah.Act_ID );
  if ( cardinality duplicate_sm_meahs != 1 )
    ::check_log( message: "uniqueness violation in SM_MEAH for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R512:  Mealy Action Home(SM_MEAH) -> Mealy State Machine(SM_MEALY)
  // associator other participation R512:  Mealy Action Home(SM_MEAH) -> Transition(SM_TXN)
  select one sm_txn related by sm_meah->SM_TXN[R512];
  if ( empty sm_txn )
    ::check_log( message: "one instance not found SM_MEAH->SM_TXN[R512]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_txn.Trans_ID == sm_meah.Trans_ID and sm_txn.SM_ID == sm_meah.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_MEAH and SM_TXN", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R513:  Mealy Action Home(SM_MEAH) -> Action Home(SM_AH)
  select one sm_ah related by sm_meah->SM_AH[R513];
  if ( empty sm_ah )
    ::check_log( message: "supertype not found across SM_MEAH->SM_AH[R513]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_meah related by sm_ah->SM_MEAH[R513];
    if ( empty myself_sm_meah or ( myself_sm_meah != sm_meah ) )
      ::check_log( message: "same subtype not found looping back across SM_MEAH->SM_AH[R513]->SM_MEAH[R513]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_ahs from instances of SM_AH;
for each sm_ah in sm_ahs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Act_ID", trace_id:sm_ah.Act_ID, name:"" );
  select many duplicate_sm_ahs from instances of SM_AH where ( selected.Act_ID == sm_ah.Act_ID and selected.SM_ID == sm_ah.SM_ID );
  if ( cardinality duplicate_sm_ahs != 1 )
    ::check_log( message: "uniqueness violation in SM_AH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R514:  Action Home(SM_AH) -> Action(SM_ACT)
  select one sm_act related by sm_ah->SM_ACT[R514];
  if ( empty sm_act )
    ::check_log( message: "one instance not found SM_AH->SM_ACT[R514]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_act.SM_ID == sm_ah.SM_ID and sm_act.Act_ID == sm_ah.Act_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_AH and SM_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R513:  supertype Action Home(SM_AH)
  subtype_count = 0;
  select one sm_moah related by sm_ah->SM_MOAH[R513];
  if ( not_empty sm_moah )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_meah related by sm_ah->SM_MEAH[R513];
  if ( not_empty sm_meah )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_tah related by sm_ah->SM_TAH[R513];
  if ( not_empty sm_tah )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_AH across R513", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_AH across R513", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_acts from instances of SM_ACT;
for each sm_act in sm_acts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_act.SM_ID, name:"" );
  select many duplicate_sm_acts from instances of SM_ACT where ( selected.SM_ID == sm_act.SM_ID and selected.Act_ID == sm_act.Act_ID );
  if ( cardinality duplicate_sm_acts != 1 )
    ::check_log( message: "uniqueness violation in SM_ACT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R514:  Action(SM_ACT) -> Action Home(SM_AH)
  select one sm_ah related by sm_act->SM_AH[R514];
  if ( empty sm_ah )
    ::check_log( message: "one instance not found SM_ACT->SM_AH[R514]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_ah.SM_ID == sm_act.SM_ID and sm_ah.Act_ID == sm_act.Act_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_ACT and SM_AH", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R515:  Action(SM_ACT) -> State Machine(SM_SM)
  select one sm_sm related by sm_act->SM_SM[R515];
  if ( empty sm_sm )
    ::check_log( message: "one instance not found SM_ACT->SM_SM[R515]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_sm.SM_ID == sm_act.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_ACT and SM_SM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_evtdis from instances of SM_EVTDI;
for each sm_evtdi in sm_evtdis
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_evtdi.SM_ID, name:sm_evtdi.Name );
  select many duplicate_sm_evtdis from instances of SM_EVTDI where ( selected.SM_ID == sm_evtdi.SM_ID and selected.SMedi_ID == sm_evtdi.SMedi_ID );
  if ( cardinality duplicate_sm_evtdis != 1 )
    ::check_log( message: "uniqueness violation in SM_EVTDI for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R516:  State Machine Event Data Item(SM_EVTDI) -> State Machine(SM_SM)
  select one sm_sm related by sm_evtdi->SM_SM[R516];
  if ( empty sm_sm )
    ::check_log( message: "one instance not found SM_EVTDI->SM_SM[R516]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_sm.SM_ID == sm_evtdi.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_EVTDI and SM_SM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R524:  State Machine Event Data Item(SM_EVTDI) -> Data Type(S_DT)
  select one s_dt related by sm_evtdi->S_DT[R524];
  if ( empty s_dt )
    ::check_log( message: "one instance not found SM_EVTDI->S_DT[R524]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == sm_evtdi.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_EVTDI and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R532:  State Machine Event Data Item(SM_EVTDI) -> State Machine Event(SM_EVT)
  select one sm_evt related by sm_evtdi->SM_EVT[R532];
  if ( empty sm_evt )
    ::check_log( message: "one instance not found SM_EVTDI->SM_EVT[R532]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evt.SMevt_ID == sm_evtdi.SMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_EVTDI and SM_EVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R533:  State Machine Event Data Item(SM_EVTDI) -> State Machine Event Data Item(SM_EVTDI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_evtdi.Previous_SMedi_ID ) ) )
  select one right_sm_evtdi related by sm_evtdi->SM_EVTDI[R533.''succeeds''];
  if ( empty right_sm_evtdi )
    ::check_log( message: "one instance not found SM_EVTDI->SM_EVTDI[R533.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_sm_evtdi.SM_ID == sm_evtdi.SM_ID and right_sm_evtdi.SMedi_ID == sm_evtdi.Previous_SMedi_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_EVTDI and SM_EVTDI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_isms from instances of SM_ISM;
for each sm_ism in sm_isms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_ism.SM_ID, name:"" );
  select many duplicate_sm_isms from instances of SM_ISM where ( selected.SM_ID == sm_ism.SM_ID );
  if ( cardinality duplicate_sm_isms != 1 )
    ::check_log( message: "uniqueness violation in SM_ISM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R518:  Instance State Machine(SM_ISM) -> Model Class(O_OBJ)
  select one o_obj related by sm_ism->O_OBJ[R518];
  if ( empty o_obj )
    ::check_log( message: "one instance not found SM_ISM->O_OBJ[R518]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == sm_ism.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_ISM and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R517:  Instance State Machine(SM_ISM) -> State Machine(SM_SM)
  select one sm_sm related by sm_ism->SM_SM[R517];
  if ( empty sm_sm )
    ::check_log( message: "supertype not found across SM_ISM->SM_SM[R517]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_ism related by sm_sm->SM_ISM[R517];
    if ( empty myself_sm_ism or ( myself_sm_ism != sm_ism ) )
      ::check_log( message: "same subtype not found looping back across SM_ISM->SM_SM[R517]->SM_ISM[R517]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_asms from instances of SM_ASM;
for each sm_asm in sm_asms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_asm.SM_ID, name:"" );
  select many duplicate_sm_asms from instances of SM_ASM where ( selected.SM_ID == sm_asm.SM_ID );
  if ( cardinality duplicate_sm_asms != 1 )
    ::check_log( message: "uniqueness violation in SM_ASM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R519:  Class State Machine(SM_ASM) -> Model Class(O_OBJ)
  select one o_obj related by sm_asm->O_OBJ[R519];
  if ( empty o_obj )
    ::check_log( message: "one instance not found SM_ASM->O_OBJ[R519]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == sm_asm.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_ASM and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R517:  Class State Machine(SM_ASM) -> State Machine(SM_SM)
  select one sm_sm related by sm_asm->SM_SM[R517];
  if ( empty sm_sm )
    ::check_log( message: "supertype not found across SM_ASM->SM_SM[R517]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_asm related by sm_sm->SM_ASM[R517];
    if ( empty myself_sm_asm or ( myself_sm_asm != sm_asm ) )
      ::check_log( message: "same subtype not found looping back across SM_ASM->SM_SM[R517]->SM_ASM[R517]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_pevts from instances of SM_PEVT;
for each sm_pevt in sm_pevts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_pevt.SM_ID, name:"" );
  select many duplicate_sm_pevts from instances of SM_PEVT where ( selected.SM_ID == sm_pevt.SM_ID and selected.SMevt_ID == sm_pevt.SMevt_ID );
  if ( cardinality duplicate_sm_pevts != 1 )
    ::check_log( message: "uniqueness violation in SM_PEVT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R525:  Polymorphic Event(SM_PEVT) -> State Machine Event(SM_EVT)
  select one sm_evt related by sm_pevt->SM_EVT[R525];
  if ( empty sm_evt )
    ::check_log( message: "supertype not found across SM_PEVT->SM_EVT[R525]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_pevt related by sm_evt->SM_PEVT[R525];
    if ( empty myself_sm_pevt or ( myself_sm_pevt != sm_pevt ) )
      ::check_log( message: "same subtype not found looping back across SM_PEVT->SM_EVT[R525]->SM_PEVT[R525]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_sevts from instances of SM_SEVT;
for each sm_sevt in sm_sevts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SMevt_ID", trace_id:sm_sevt.SMevt_ID, name:"" );
  select many duplicate_sm_sevts from instances of SM_SEVT where ( selected.SMevt_ID == sm_sevt.SMevt_ID and selected.SM_ID == sm_sevt.SM_ID );
  if ( cardinality duplicate_sm_sevts != 1 )
    ::check_log( message: "uniqueness violation in SM_SEVT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R525:  SEM Event(SM_SEVT) -> State Machine Event(SM_EVT)
  select one sm_evt related by sm_sevt->SM_EVT[R525];
  if ( empty sm_evt )
    ::check_log( message: "supertype not found across SM_SEVT->SM_EVT[R525]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_sevt related by sm_evt->SM_SEVT[R525];
    if ( empty myself_sm_sevt or ( myself_sm_sevt != sm_sevt ) )
      ::check_log( message: "same subtype not found looping back across SM_SEVT->SM_EVT[R525]->SM_SEVT[R525]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R526:  supertype SEM Event(SM_SEVT)
  subtype_count = 0;
  select one sm_nlevt related by sm_sevt->SM_NLEVT[R526];
  if ( not_empty sm_nlevt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_levt related by sm_sevt->SM_LEVT[R526];
  if ( not_empty sm_levt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sm_sgevt related by sm_sevt->SM_SGEVT[R526];
  if ( not_empty sm_sgevt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SM_SEVT across R526", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SM_SEVT across R526", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_nlevts from instances of SM_NLEVT;
for each sm_nlevt in sm_nlevts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_nlevt.SM_ID, name:sm_nlevt.Name );
  select many duplicate_sm_nlevts from instances of SM_NLEVT where ( selected.SM_ID == sm_nlevt.SM_ID and selected.SMevt_ID == sm_nlevt.SMevt_ID );
  if ( cardinality duplicate_sm_nlevts != 1 )
    ::check_log( message: "uniqueness violation in SM_NLEVT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R527:  Non Local Event(SM_NLEVT) -> Polymorphic Event(SM_PEVT)
  select one sm_pevt related by sm_nlevt->SM_PEVT[R527];
  if ( empty sm_pevt )
    ::check_log( message: "one instance not found SM_NLEVT->SM_PEVT[R527]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_pevt.SM_ID == sm_nlevt.polySM_ID and sm_pevt.SMevt_ID == sm_nlevt.polySMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_NLEVT and SM_PEVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R526:  Non Local Event(SM_NLEVT) -> SEM Event(SM_SEVT)
  select one sm_sevt related by sm_nlevt->SM_SEVT[R526];
  if ( empty sm_sevt )
    ::check_log( message: "supertype not found across SM_NLEVT->SM_SEVT[R526]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_nlevt related by sm_sevt->SM_NLEVT[R526];
    if ( empty myself_sm_nlevt or ( myself_sm_nlevt != sm_nlevt ) )
      ::check_log( message: "same subtype not found looping back across SM_NLEVT->SM_SEVT[R526]->SM_NLEVT[R526]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_levts from instances of SM_LEVT;
for each sm_levt in sm_levts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SM_ID", trace_id:sm_levt.SM_ID, name:"" );
  select many duplicate_sm_levts from instances of SM_LEVT where ( selected.SM_ID == sm_levt.SM_ID and selected.SMevt_ID == sm_levt.SMevt_ID );
  if ( cardinality duplicate_sm_levts != 1 )
    ::check_log( message: "uniqueness violation in SM_LEVT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R526:  Local Event(SM_LEVT) -> SEM Event(SM_SEVT)
  select one sm_sevt related by sm_levt->SM_SEVT[R526];
  if ( empty sm_sevt )
    ::check_log( message: "supertype not found across SM_LEVT->SM_SEVT[R526]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_levt related by sm_sevt->SM_LEVT[R526];
    if ( empty myself_sm_levt or ( myself_sm_levt != sm_levt ) )
      ::check_log( message: "same subtype not found looping back across SM_LEVT->SM_SEVT[R526]->SM_LEVT[R526]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_sgevts from instances of SM_SGEVT;
for each sm_sgevt in sm_sgevts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"SMevt_ID", trace_id:sm_sgevt.SMevt_ID, name:"" );
  select many duplicate_sm_sgevts from instances of SM_SGEVT where ( selected.SMevt_ID == sm_sgevt.SMevt_ID and selected.SM_ID == sm_sgevt.SM_ID );
  if ( cardinality duplicate_sm_sgevts != 1 )
    ::check_log( message: "uniqueness violation in SM_SGEVT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R528:  Signal Event(SM_SGEVT) -> Provided Signal(SPR_PS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_sgevt.Provided_Signal_Id ) ) )
  select one spr_ps related by sm_sgevt->SPR_PS[R528];
  if ( empty spr_ps )
    ::check_log( message: "one instance not found SM_SGEVT->SPR_PS[R528]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_ps.Id == sm_sgevt.Provided_Signal_Id ) )
      ::check_log( message: "referentials do not match identifiers between SM_SGEVT and SPR_PS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R529:  Signal Event(SM_SGEVT) -> Required Signal(SPR_RS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sm_sgevt.Required_Signal_Id ) ) )
  select one spr_rs related by sm_sgevt->SPR_RS[R529];
  if ( empty spr_rs )
    ::check_log( message: "one instance not found SM_SGEVT->SPR_RS[R529]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_rs.Id == sm_sgevt.Required_Signal_Id ) )
      ::check_log( message: "referentials do not match identifiers between SM_SGEVT and SPR_RS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R526:  Signal Event(SM_SGEVT) -> SEM Event(SM_SEVT)
  select one sm_sevt related by sm_sgevt->SM_SEVT[R526];
  if ( empty sm_sevt )
    ::check_log( message: "supertype not found across SM_SGEVT->SM_SEVT[R526]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_sgevt related by sm_sevt->SM_SGEVT[R526];
    if ( empty myself_sm_sgevt or ( myself_sm_sgevt != sm_sgevt ) )
      ::check_log( message: "same subtype not found looping back across SM_SGEVT->SM_SEVT[R526]->SM_SGEVT[R526]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sm_tahs from instances of SM_TAH;
for each sm_tah in sm_tahs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Act_ID", trace_id:sm_tah.Act_ID, name:"" );
  select many duplicate_sm_tahs from instances of SM_TAH where ( selected.Act_ID == sm_tah.Act_ID and selected.SM_ID == sm_tah.SM_ID );
  if ( cardinality duplicate_sm_tahs != 1 )
    ::check_log( message: "uniqueness violation in SM_TAH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R530:  Transition Action Home(SM_TAH) -> Transition(SM_TXN)
  select one sm_txn related by sm_tah->SM_TXN[R530];
  if ( empty sm_txn )
    ::check_log( message: "one instance not found SM_TAH->SM_TXN[R530]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_txn.Trans_ID == sm_tah.Trans_ID and sm_txn.SM_ID == sm_tah.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between SM_TAH and SM_TXN", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R513:  Transition Action Home(SM_TAH) -> Action Home(SM_AH)
  select one sm_ah related by sm_tah->SM_AH[R513];
  if ( empty sm_ah )
    ::check_log( message: "supertype not found across SM_TAH->SM_AH[R513]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sm_tah related by sm_ah->SM_TAH[R513];
    if ( empty myself_sm_tah or ( myself_sm_tah != sm_tah ) )
      ::check_log( message: "same subtype not found looping back across SM_TAH->SM_AH[R513]->SM_TAH[R513]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_blks from instances of ACT_BLK;
for each act_blk in act_blks
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Block_ID", trace_id:act_blk.Block_ID, name:"" );
  select many duplicate_act_blks from instances of ACT_BLK where ( selected.Block_ID == act_blk.Block_ID );
  if ( cardinality duplicate_act_blks != 1 )
    ::check_log( message: "uniqueness violation in ACT_BLK for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R601:  Block(ACT_BLK) -> Body(ACT_ACT)
  select one act_act related by act_blk->ACT_ACT[R601];
  if ( empty act_act )
    ::check_log( message: "one instance not found ACT_BLK->ACT_ACT[R601]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_act.Action_ID == act_blk.Action_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BLK and ACT_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R612:  Block(ACT_BLK) -> Body(ACT_ACT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_blk.Parsed_Action_ID ) ) )
  select one act_act related by act_blk->ACT_ACT[R612];
  if ( empty act_act )
    ::check_log( message: "one instance not found ACT_BLK->ACT_ACT[R612]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_act.Action_ID == act_blk.Parsed_Action_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BLK and ACT_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_acts from instances of ACT_ACT;
for each act_act in act_acts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_act.Action_ID, name:"" );
  select many duplicate_act_acts from instances of ACT_ACT where ( selected.Action_ID == act_act.Action_ID );
  if ( cardinality duplicate_act_acts != 1 )
    ::check_log( message: "uniqueness violation in ACT_ACT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R666:  Body(ACT_ACT) -> Block(ACT_BLK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_act.Block_ID ) ) )
  select one act_blk related by act_act->ACT_BLK[R666];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_ACT->ACT_BLK[R666]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_act.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_ACT and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R699:  Body(ACT_ACT) -> Block(ACT_BLK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_act.CurrentScope_ID ) ) )
  select one act_blk related by act_act->ACT_BLK[R699];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_ACT->ACT_BLK[R699]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_act.CurrentScope_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_ACT and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R650:  Body(ACT_ACT) -> Block(ACT_BLK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_act.Parsed_Block_ID ) ) )
  select one act_blk related by act_act->ACT_BLK[R650];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_ACT->ACT_BLK[R650]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_act.Parsed_Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_ACT and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R698:  supertype Body(ACT_ACT)
  subtype_count = 0;
  select one act_sab related by act_act->ACT_SAB[R698];
  if ( not_empty act_sab )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_dab related by act_act->ACT_DAB[R698];
  if ( not_empty act_dab )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_fnb related by act_act->ACT_FNB[R698];
  if ( not_empty act_fnb )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_opb related by act_act->ACT_OPB[R698];
  if ( not_empty act_opb )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_brb related by act_act->ACT_BRB[R698];
  if ( not_empty act_brb )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_pob related by act_act->ACT_POB[R698];
  if ( not_empty act_pob )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_psb related by act_act->ACT_PSB[R698];
  if ( not_empty act_psb )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_rob related by act_act->ACT_ROB[R698];
  if ( not_empty act_rob )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_rsb related by act_act->ACT_RSB[R698];
  if ( not_empty act_rsb )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_tab related by act_act->ACT_TAB[R698];
  if ( not_empty act_tab )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from ACT_ACT across R698", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from ACT_ACT across R698", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_smts from instances of ACT_SMT;
for each act_smt in act_smts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_smt.Statement_ID, name:"" );
  select many duplicate_act_smts from instances of ACT_SMT where ( selected.Statement_ID == act_smt.Statement_ID and selected.Block_ID == act_smt.Block_ID );
  if ( cardinality duplicate_act_smts != 1 )
    ::check_log( message: "uniqueness violation in ACT_SMT for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_act_smts from instances of ACT_SMT where ( selected.Statement_ID == act_smt.Statement_ID );
  if ( cardinality duplicate_act_smts != 1 )
    ::check_log( message: "uniqueness violation in ACT_SMT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R661:  Statement(ACT_SMT) -> Statement(ACT_SMT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_smt.Previous_Statement_ID ) ) )
  select one right_act_smt related by act_smt->ACT_SMT[R661.''succeeds''];
  if ( empty right_act_smt )
    ::check_log( message: "one instance not found ACT_SMT->ACT_SMT[R661.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_act_smt.Statement_ID == act_smt.Previous_Statement_ID and right_act_smt.Block_ID == act_smt.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SMT and ACT_SMT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R602:  Statement(ACT_SMT) -> Block(ACT_BLK)
  select one act_blk related by act_smt->ACT_BLK[R602];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_SMT->ACT_BLK[R602]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_smt.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SMT and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R603:  supertype Statement(ACT_SMT)
  subtype_count = 0;
  select one act_for related by act_smt->ACT_FOR[R603];
  if ( not_empty act_for )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_whl related by act_smt->ACT_WHL[R603];
  if ( not_empty act_whl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_if related by act_smt->ACT_IF[R603];
  if ( not_empty act_if )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_el related by act_smt->ACT_EL[R603];
  if ( not_empty act_el )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_e related by act_smt->ACT_E[R603];
  if ( not_empty act_e )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_brg related by act_smt->ACT_BRG[R603];
  if ( not_empty act_brg )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_fnc related by act_smt->ACT_FNC[R603];
  if ( not_empty act_fnc )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_ret related by act_smt->ACT_RET[R603];
  if ( not_empty act_ret )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_tfm related by act_smt->ACT_TFM[R603];
  if ( not_empty act_tfm )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_ai related by act_smt->ACT_AI[R603];
  if ( not_empty act_ai )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_del related by act_smt->ACT_DEL[R603];
  if ( not_empty act_del )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_cnv related by act_smt->ACT_CNV[R603];
  if ( not_empty act_cnv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_cr related by act_smt->ACT_CR[R603];
  if ( not_empty act_cr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_sel related by act_smt->ACT_SEL[R603];
  if ( not_empty act_sel )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_fio related by act_smt->ACT_FIO[R603];
  if ( not_empty act_fio )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_fiw related by act_smt->ACT_FIW[R603];
  if ( not_empty act_fiw )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_uru related by act_smt->ACT_URU[R603];
  if ( not_empty act_uru )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_unr related by act_smt->ACT_UNR[R603];
  if ( not_empty act_unr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_ru related by act_smt->ACT_RU[R603];
  if ( not_empty act_ru )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_rel related by act_smt->ACT_REL[R603];
  if ( not_empty act_rel )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_ctl related by act_smt->ACT_CTL[R603];
  if ( not_empty act_ctl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_brk related by act_smt->ACT_BRK[R603];
  if ( not_empty act_brk )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_con related by act_smt->ACT_CON[R603];
  if ( not_empty act_con )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_ess related by act_smt->E_ESS[R603];
  if ( not_empty e_ess )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_gpr related by act_smt->E_GPR[R603];
  if ( not_empty e_gpr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_iop related by act_smt->ACT_IOP[R603];
  if ( not_empty act_iop )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_sgn related by act_smt->ACT_SGN[R603];
  if ( not_empty act_sgn )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from ACT_SMT across R603", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from ACT_SMT across R603", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_ais from instances of ACT_AI;
for each act_ai in act_ais
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_ai.Statement_ID, name:"" );
  select many duplicate_act_ais from instances of ACT_AI where ( selected.Statement_ID == act_ai.Statement_ID );
  if ( cardinality duplicate_act_ais != 1 )
    ::check_log( message: "uniqueness violation in ACT_AI for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R609:  Assign to Member(ACT_AI) -> Value(V_VAL)
  select one v_val related by act_ai->V_VAL[R609];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_AI->V_VAL[R609]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_ai.r_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_AI and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R689:  Assign to Member(ACT_AI) -> Value(V_VAL)
  select one v_val related by act_ai->V_VAL[R689];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_AI->V_VAL[R689]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_ai.l_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_AI and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Assign to Member(ACT_AI) -> Statement(ACT_SMT)
  select one act_smt related by act_ai->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_AI->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_ai related by act_smt->ACT_AI[R603];
    if ( empty myself_act_ai or ( myself_act_ai != act_ai ) )
      ::check_log( message: "same subtype not found looping back across ACT_AI->ACT_SMT[R603]->ACT_AI[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_srws from instances of ACT_SRW;
for each act_srw in act_srws
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_srw.Statement_ID, name:"" );
  select many duplicate_act_srws from instances of ACT_SRW where ( selected.Statement_ID == act_srw.Statement_ID );
  if ( cardinality duplicate_act_srws != 1 )
    ::check_log( message: "uniqueness violation in ACT_SRW for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R611:  Select Related Where(ACT_SRW) -> Value(V_VAL)
  select one v_val related by act_srw->V_VAL[R611];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_SRW->V_VAL[R611]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_srw.Where_Clause_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SRW and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R664:  Select Related Where(ACT_SRW) -> Select(ACT_SEL)
  select one act_sel related by act_srw->ACT_SEL[R664];
  if ( empty act_sel )
    ::check_log( message: "supertype not found across ACT_SRW->ACT_SEL[R664]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_srw related by act_sel->ACT_SRW[R664];
    if ( empty myself_act_srw or ( myself_act_srw != act_srw ) )
      ::check_log( message: "same subtype not found looping back across ACT_SRW->ACT_SEL[R664]->ACT_SRW[R664]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_sels from instances of ACT_SEL;
for each act_sel in act_sels
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_sel.Statement_ID, name:"" );
  select many duplicate_act_sels from instances of ACT_SEL where ( selected.Statement_ID == act_sel.Statement_ID );
  if ( cardinality duplicate_act_sels != 1 )
    ::check_log( message: "uniqueness violation in ACT_SEL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R637:  Select(ACT_SEL) -> Chain Link(ACT_LNK)
  select one act_lnk related by act_sel->ACT_LNK[R637];
  if ( empty act_lnk )
    ::check_log( message: "one instance not found ACT_SEL->ACT_LNK[R637]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_lnk.Statement_ID == act_sel.Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SEL and ACT_LNK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R638:  Select(ACT_SEL) -> Variable(V_VAR)
  select one v_var related by act_sel->V_VAR[R638];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_SEL->V_VAR[R638]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_sel.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SEL and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R613:  Select(ACT_SEL) -> Value(V_VAL)
  select one v_val related by act_sel->V_VAL[R613];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_SEL->V_VAL[R613]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_sel.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SEL and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Select(ACT_SEL) -> Statement(ACT_SMT)
  select one act_smt related by act_sel->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_SEL->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_sel related by act_smt->ACT_SEL[R603];
    if ( empty myself_act_sel or ( myself_act_sel != act_sel ) )
      ::check_log( message: "same subtype not found looping back across ACT_SEL->ACT_SMT[R603]->ACT_SEL[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R664:  supertype Select(ACT_SEL)
  subtype_count = 0;
  select one act_srw related by act_sel->ACT_SRW[R664];
  if ( not_empty act_srw )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one act_sr related by act_sel->ACT_SR[R664];
  if ( not_empty act_sr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from ACT_SEL across R664", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from ACT_SEL across R664", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_fors from instances of ACT_FOR;
for each act_for in act_fors
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_for.Statement_ID, name:"" );
  select many duplicate_act_fors from instances of ACT_FOR where ( selected.Statement_ID == act_for.Statement_ID );
  if ( cardinality duplicate_act_fors != 1 )
    ::check_log( message: "uniqueness violation in ACT_FOR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R605:  For Stmt(ACT_FOR) -> Block(ACT_BLK)
  select one act_blk related by act_for->ACT_BLK[R605];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_FOR->ACT_BLK[R605]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_for.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FOR and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R614:  For Stmt(ACT_FOR) -> Variable(V_VAR)
  select one v_var related by act_for->V_VAR[R614];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_FOR->V_VAR[R614]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_for.Loop_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FOR and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R670:  For Stmt(ACT_FOR) -> Model Class(O_OBJ)
  select one o_obj related by act_for->O_OBJ[R670];
  if ( empty o_obj )
    ::check_log( message: "one instance not found ACT_FOR->O_OBJ[R670]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == act_for.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FOR and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R652:  For Stmt(ACT_FOR) -> Variable(V_VAR)
  select one v_var related by act_for->V_VAR[R652];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_FOR->V_VAR[R652]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_for.Set_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FOR and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  For Stmt(ACT_FOR) -> Statement(ACT_SMT)
  select one act_smt related by act_for->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_FOR->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_for related by act_smt->ACT_FOR[R603];
    if ( empty myself_act_for or ( myself_act_for != act_for ) )
      ::check_log( message: "same subtype not found looping back across ACT_FOR->ACT_SMT[R603]->ACT_FOR[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_cnvs from instances of ACT_CNV;
for each act_cnv in act_cnvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_cnv.Statement_ID, name:"" );
  select many duplicate_act_cnvs from instances of ACT_CNV where ( selected.Statement_ID == act_cnv.Statement_ID );
  if ( cardinality duplicate_act_cnvs != 1 )
    ::check_log( message: "uniqueness violation in ACT_CNV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R672:  Create No Variable(ACT_CNV) -> Model Class(O_OBJ)
  select one o_obj related by act_cnv->O_OBJ[R672];
  if ( empty o_obj )
    ::check_log( message: "one instance not found ACT_CNV->O_OBJ[R672]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == act_cnv.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_CNV and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Create No Variable(ACT_CNV) -> Statement(ACT_SMT)
  select one act_smt related by act_cnv->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_CNV->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_cnv related by act_smt->ACT_CNV[R603];
    if ( empty myself_act_cnv or ( myself_act_cnv != act_cnv ) )
      ::check_log( message: "same subtype not found looping back across ACT_CNV->ACT_SMT[R603]->ACT_CNV[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_rels from instances of ACT_REL;
for each act_rel in act_rels
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_rel.Statement_ID, name:"" );
  select many duplicate_act_rels from instances of ACT_REL where ( selected.Statement_ID == act_rel.Statement_ID );
  if ( cardinality duplicate_act_rels != 1 )
    ::check_log( message: "uniqueness violation in ACT_REL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R615:  Relate(ACT_REL) -> Variable(V_VAR)
  select one v_var related by act_rel->V_VAR[R615];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_REL->V_VAR[R615]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_rel.One_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_REL and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R616:  Relate(ACT_REL) -> Variable(V_VAR)
  select one v_var related by act_rel->V_VAR[R616];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_REL->V_VAR[R616]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_rel.Other_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_REL and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R653:  Relate(ACT_REL) -> Association(R_REL)
  select one r_rel related by act_rel->R_REL[R653];
  if ( empty r_rel )
    ::check_log( message: "one instance not found ACT_REL->R_REL[R653]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == act_rel.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_REL and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Relate(ACT_REL) -> Statement(ACT_SMT)
  select one act_smt related by act_rel->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_REL->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_rel related by act_smt->ACT_REL[R603];
    if ( empty myself_act_rel or ( myself_act_rel != act_rel ) )
      ::check_log( message: "same subtype not found looping back across ACT_REL->ACT_SMT[R603]->ACT_REL[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_unrs from instances of ACT_UNR;
for each act_unr in act_unrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_unr.Statement_ID, name:"" );
  select many duplicate_act_unrs from instances of ACT_UNR where ( selected.Statement_ID == act_unr.Statement_ID );
  if ( cardinality duplicate_act_unrs != 1 )
    ::check_log( message: "uniqueness violation in ACT_UNR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R620:  Unrelate(ACT_UNR) -> Variable(V_VAR)
  select one v_var related by act_unr->V_VAR[R620];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_UNR->V_VAR[R620]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_unr.One_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_UNR and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R621:  Unrelate(ACT_UNR) -> Variable(V_VAR)
  select one v_var related by act_unr->V_VAR[R621];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_UNR->V_VAR[R621]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_unr.Other_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_UNR and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R655:  Unrelate(ACT_UNR) -> Association(R_REL)
  select one r_rel related by act_unr->R_REL[R655];
  if ( empty r_rel )
    ::check_log( message: "one instance not found ACT_UNR->R_REL[R655]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == act_unr.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_UNR and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Unrelate(ACT_UNR) -> Statement(ACT_SMT)
  select one act_smt related by act_unr->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_UNR->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_unr related by act_smt->ACT_UNR[R603];
    if ( empty myself_act_unr or ( myself_act_unr != act_unr ) )
      ::check_log( message: "same subtype not found looping back across ACT_UNR->ACT_SMT[R603]->ACT_UNR[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_es from instances of ACT_E;
for each act_e in act_es
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_e.Statement_ID, name:"" );
  select many duplicate_act_es from instances of ACT_E where ( selected.Statement_ID == act_e.Statement_ID );
  if ( cardinality duplicate_act_es != 1 )
    ::check_log( message: "uniqueness violation in ACT_E for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R606:  Else Stmt(ACT_E) -> Block(ACT_BLK)
  select one act_blk related by act_e->ACT_BLK[R606];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_E->ACT_BLK[R606]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_e.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_E and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R683:  Else Stmt(ACT_E) -> If Stmt(ACT_IF)
  select one act_if related by act_e->ACT_IF[R683];
  if ( empty act_if )
    ::check_log( message: "one instance not found ACT_E->ACT_IF[R683]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_if.Statement_ID == act_e.If_Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_E and ACT_IF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Else Stmt(ACT_E) -> Statement(ACT_SMT)
  select one act_smt related by act_e->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_E->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_e related by act_smt->ACT_E[R603];
    if ( empty myself_act_e or ( myself_act_e != act_e ) )
      ::check_log( message: "same subtype not found looping back across ACT_E->ACT_SMT[R603]->ACT_E[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_fiws from instances of ACT_FIW;
for each act_fiw in act_fiws
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_fiw.Statement_ID, name:"" );
  select many duplicate_act_fiws from instances of ACT_FIW where ( selected.Statement_ID == act_fiw.Statement_ID );
  if ( cardinality duplicate_act_fiws != 1 )
    ::check_log( message: "uniqueness violation in ACT_FIW for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R610:  Select From Instances Where(ACT_FIW) -> Value(V_VAL)
  select one v_val related by act_fiw->V_VAL[R610];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_FIW->V_VAL[R610]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_fiw.Where_Clause_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FIW and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R665:  Select From Instances Where(ACT_FIW) -> Variable(V_VAR)
  select one v_var related by act_fiw->V_VAR[R665];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_FIW->V_VAR[R665]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_fiw.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FIW and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R676:  Select From Instances Where(ACT_FIW) -> Model Class(O_OBJ)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_fiw.Obj_ID ) ) )
  select one o_obj related by act_fiw->O_OBJ[R676];
  if ( empty o_obj )
    ::check_log( message: "one instance not found ACT_FIW->O_OBJ[R676]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == act_fiw.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FIW and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Select From Instances Where(ACT_FIW) -> Statement(ACT_SMT)
  select one act_smt related by act_fiw->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_FIW->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_fiw related by act_smt->ACT_FIW[R603];
    if ( empty myself_act_fiw or ( myself_act_fiw != act_fiw ) )
      ::check_log( message: "same subtype not found looping back across ACT_FIW->ACT_SMT[R603]->ACT_FIW[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_fios from instances of ACT_FIO;
for each act_fio in act_fios
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_fio.Statement_ID, name:"" );
  select many duplicate_act_fios from instances of ACT_FIO where ( selected.Statement_ID == act_fio.Statement_ID );
  if ( cardinality duplicate_act_fios != 1 )
    ::check_log( message: "uniqueness violation in ACT_FIO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R639:  Select From Instances(ACT_FIO) -> Variable(V_VAR)
  select one v_var related by act_fio->V_VAR[R639];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_FIO->V_VAR[R639]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_fio.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FIO and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R677:  Select From Instances(ACT_FIO) -> Model Class(O_OBJ)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_fio.Obj_ID ) ) )
  select one o_obj related by act_fio->O_OBJ[R677];
  if ( empty o_obj )
    ::check_log( message: "one instance not found ACT_FIO->O_OBJ[R677]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == act_fio.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FIO and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Select From Instances(ACT_FIO) -> Statement(ACT_SMT)
  select one act_smt related by act_fio->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_FIO->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_fio related by act_smt->ACT_FIO[R603];
    if ( empty myself_act_fio or ( myself_act_fio != act_fio ) )
      ::check_log( message: "same subtype not found looping back across ACT_FIO->ACT_SMT[R603]->ACT_FIO[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_crs from instances of ACT_CR;
for each act_cr in act_crs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_cr.Statement_ID, name:"" );
  select many duplicate_act_crs from instances of ACT_CR where ( selected.Statement_ID == act_cr.Statement_ID );
  if ( cardinality duplicate_act_crs != 1 )
    ::check_log( message: "uniqueness violation in ACT_CR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R633:  Create(ACT_CR) -> Variable(V_VAR)
  select one v_var related by act_cr->V_VAR[R633];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_CR->V_VAR[R633]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_cr.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_CR and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R671:  Create(ACT_CR) -> Model Class(O_OBJ)
  select one o_obj related by act_cr->O_OBJ[R671];
  if ( empty o_obj )
    ::check_log( message: "one instance not found ACT_CR->O_OBJ[R671]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == act_cr.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_CR and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Create(ACT_CR) -> Statement(ACT_SMT)
  select one act_smt related by act_cr->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_CR->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_cr related by act_smt->ACT_CR[R603];
    if ( empty myself_act_cr or ( myself_act_cr != act_cr ) )
      ::check_log( message: "same subtype not found looping back across ACT_CR->ACT_SMT[R603]->ACT_CR[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_dels from instances of ACT_DEL;
for each act_del in act_dels
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_del.Statement_ID, name:"" );
  select many duplicate_act_dels from instances of ACT_DEL where ( selected.Statement_ID == act_del.Statement_ID );
  if ( cardinality duplicate_act_dels != 1 )
    ::check_log( message: "uniqueness violation in ACT_DEL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R634:  Delete(ACT_DEL) -> Variable(V_VAR)
  select one v_var related by act_del->V_VAR[R634];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_DEL->V_VAR[R634]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_del.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_DEL and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Delete(ACT_DEL) -> Statement(ACT_SMT)
  select one act_smt related by act_del->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_DEL->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_del related by act_smt->ACT_DEL[R603];
    if ( empty myself_act_del or ( myself_act_del != act_del ) )
      ::check_log( message: "same subtype not found looping back across ACT_DEL->ACT_SMT[R603]->ACT_DEL[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_rus from instances of ACT_RU;
for each act_ru in act_rus
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_ru.Statement_ID, name:"" );
  select many duplicate_act_rus from instances of ACT_RU where ( selected.Statement_ID == act_ru.Statement_ID );
  if ( cardinality duplicate_act_rus != 1 )
    ::check_log( message: "uniqueness violation in ACT_RU for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R617:  Relate Using(ACT_RU) -> Variable(V_VAR)
  select one v_var related by act_ru->V_VAR[R617];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_RU->V_VAR[R617]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_ru.One_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_RU and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R618:  Relate Using(ACT_RU) -> Variable(V_VAR)
  select one v_var related by act_ru->V_VAR[R618];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_RU->V_VAR[R618]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_ru.Other_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_RU and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R619:  Relate Using(ACT_RU) -> Variable(V_VAR)
  select one v_var related by act_ru->V_VAR[R619];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_RU->V_VAR[R619]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_ru.Associative_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_RU and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R654:  Relate Using(ACT_RU) -> Association(R_REL)
  select one r_rel related by act_ru->R_REL[R654];
  if ( empty r_rel )
    ::check_log( message: "one instance not found ACT_RU->R_REL[R654]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == act_ru.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_RU and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Relate Using(ACT_RU) -> Statement(ACT_SMT)
  select one act_smt related by act_ru->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_RU->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_ru related by act_smt->ACT_RU[R603];
    if ( empty myself_act_ru or ( myself_act_ru != act_ru ) )
      ::check_log( message: "same subtype not found looping back across ACT_RU->ACT_SMT[R603]->ACT_RU[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_urus from instances of ACT_URU;
for each act_uru in act_urus
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_uru.Statement_ID, name:"" );
  select many duplicate_act_urus from instances of ACT_URU where ( selected.Statement_ID == act_uru.Statement_ID );
  if ( cardinality duplicate_act_urus != 1 )
    ::check_log( message: "uniqueness violation in ACT_URU for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R622:  Unrelate Using(ACT_URU) -> Variable(V_VAR)
  select one v_var related by act_uru->V_VAR[R622];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_URU->V_VAR[R622]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_uru.One_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_URU and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R623:  Unrelate Using(ACT_URU) -> Variable(V_VAR)
  select one v_var related by act_uru->V_VAR[R623];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_URU->V_VAR[R623]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_uru.Other_Side_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_URU and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R624:  Unrelate Using(ACT_URU) -> Variable(V_VAR)
  select one v_var related by act_uru->V_VAR[R624];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_URU->V_VAR[R624]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_uru.Associative_Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_URU and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R656:  Unrelate Using(ACT_URU) -> Association(R_REL)
  select one r_rel related by act_uru->R_REL[R656];
  if ( empty r_rel )
    ::check_log( message: "one instance not found ACT_URU->R_REL[R656]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == act_uru.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_URU and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Unrelate Using(ACT_URU) -> Statement(ACT_SMT)
  select one act_smt related by act_uru->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_URU->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_uru related by act_smt->ACT_URU[R603];
    if ( empty myself_act_uru or ( myself_act_uru != act_uru ) )
      ::check_log( message: "same subtype not found looping back across ACT_URU->ACT_SMT[R603]->ACT_URU[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_ifs from instances of ACT_IF;
for each act_if in act_ifs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_if.Statement_ID, name:"" );
  select many duplicate_act_ifs from instances of ACT_IF where ( selected.Statement_ID == act_if.Statement_ID );
  if ( cardinality duplicate_act_ifs != 1 )
    ::check_log( message: "uniqueness violation in ACT_IF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R607:  If Stmt(ACT_IF) -> Block(ACT_BLK)
  select one act_blk related by act_if->ACT_BLK[R607];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_IF->ACT_BLK[R607]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_if.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IF and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R625:  If Stmt(ACT_IF) -> Value(V_VAL)
  select one v_val related by act_if->V_VAL[R625];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_IF->V_VAL[R625]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_if.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IF and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R690:  If Stmt(ACT_IF) -> ElseIf Stmt(ACT_EL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_if.Elif_Statement_ID ) ) )
  select one act_el related by act_if->ACT_EL[R690];
  if ( empty act_el )
    ::check_log( message: "one instance not found ACT_IF->ACT_EL[R690]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_el.Statement_ID == act_if.Elif_Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IF and ACT_EL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R692:  If Stmt(ACT_IF) -> Else Stmt(ACT_E)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_if.Else_Statement_ID ) ) )
  select one act_e related by act_if->ACT_E[R692];
  if ( empty act_e )
    ::check_log( message: "one instance not found ACT_IF->ACT_E[R692]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_e.Statement_ID == act_if.Else_Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IF and ACT_E", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  If Stmt(ACT_IF) -> Statement(ACT_SMT)
  select one act_smt related by act_if->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_IF->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_if related by act_smt->ACT_IF[R603];
    if ( empty myself_act_if or ( myself_act_if != act_if ) )
      ::check_log( message: "same subtype not found looping back across ACT_IF->ACT_SMT[R603]->ACT_IF[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_tfms from instances of ACT_TFM;
for each act_tfm in act_tfms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_tfm.Statement_ID, name:"" );
  select many duplicate_act_tfms from instances of ACT_TFM where ( selected.Statement_ID == act_tfm.Statement_ID );
  if ( cardinality duplicate_act_tfms != 1 )
    ::check_log( message: "uniqueness violation in ACT_TFM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R667:  Operation Invocation(ACT_TFM) -> Variable(V_VAR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_tfm.Var_ID ) ) )
  select one v_var related by act_tfm->V_VAR[R667];
  if ( empty v_var )
    ::check_log( message: "one instance not found ACT_TFM->V_VAR[R667]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == act_tfm.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_TFM and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R673:  Operation Invocation(ACT_TFM) -> Operation(O_TFR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_tfm.Tfr_ID ) ) )
  select one o_tfr related by act_tfm->O_TFR[R673];
  if ( empty o_tfr )
    ::check_log( message: "one instance not found ACT_TFM->O_TFR[R673]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tfr.Tfr_ID == act_tfm.Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_TFM and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Operation Invocation(ACT_TFM) -> Statement(ACT_SMT)
  select one act_smt related by act_tfm->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_TFM->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_tfm related by act_smt->ACT_TFM[R603];
    if ( empty myself_act_tfm or ( myself_act_tfm != act_tfm ) )
      ::check_log( message: "same subtype not found looping back across ACT_TFM->ACT_SMT[R603]->ACT_TFM[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_whls from instances of ACT_WHL;
for each act_whl in act_whls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_whl.Statement_ID, name:"" );
  select many duplicate_act_whls from instances of ACT_WHL where ( selected.Statement_ID == act_whl.Statement_ID );
  if ( cardinality duplicate_act_whls != 1 )
    ::check_log( message: "uniqueness violation in ACT_WHL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R608:  While Stmt(ACT_WHL) -> Block(ACT_BLK)
  select one act_blk related by act_whl->ACT_BLK[R608];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_WHL->ACT_BLK[R608]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_whl.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_WHL and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R626:  While Stmt(ACT_WHL) -> Value(V_VAL)
  select one v_val related by act_whl->V_VAL[R626];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_WHL->V_VAL[R626]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_whl.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_WHL and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  While Stmt(ACT_WHL) -> Statement(ACT_SMT)
  select one act_smt related by act_whl->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_WHL->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_whl related by act_smt->ACT_WHL[R603];
    if ( empty myself_act_whl or ( myself_act_whl != act_whl ) )
      ::check_log( message: "same subtype not found looping back across ACT_WHL->ACT_SMT[R603]->ACT_WHL[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_brgs from instances of ACT_BRG;
for each act_brg in act_brgs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_brg.Statement_ID, name:"" );
  select many duplicate_act_brgs from instances of ACT_BRG where ( selected.Statement_ID == act_brg.Statement_ID );
  if ( cardinality duplicate_act_brgs != 1 )
    ::check_log( message: "uniqueness violation in ACT_BRG for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R674:  Bridge Invocation(ACT_BRG) -> Bridge(S_BRG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_brg.Brg_ID ) ) )
  select one s_brg related by act_brg->S_BRG[R674];
  if ( empty s_brg )
    ::check_log( message: "one instance not found ACT_BRG->S_BRG[R674]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_brg.Brg_ID == act_brg.Brg_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BRG and S_BRG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Bridge Invocation(ACT_BRG) -> Statement(ACT_SMT)
  select one act_smt related by act_brg->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_BRG->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_brg related by act_smt->ACT_BRG[R603];
    if ( empty myself_act_brg or ( myself_act_brg != act_brg ) )
      ::check_log( message: "same subtype not found looping back across ACT_BRG->ACT_SMT[R603]->ACT_BRG[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_els from instances of ACT_EL;
for each act_el in act_els
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_el.Statement_ID, name:"" );
  select many duplicate_act_els from instances of ACT_EL where ( selected.Statement_ID == act_el.Statement_ID );
  if ( cardinality duplicate_act_els != 1 )
    ::check_log( message: "uniqueness violation in ACT_EL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R658:  ElseIf Stmt(ACT_EL) -> Block(ACT_BLK)
  select one act_blk related by act_el->ACT_BLK[R658];
  if ( empty act_blk )
    ::check_log( message: "one instance not found ACT_EL->ACT_BLK[R658]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == act_el.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_EL and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R659:  ElseIf Stmt(ACT_EL) -> Value(V_VAL)
  select one v_val related by act_el->V_VAL[R659];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_EL->V_VAL[R659]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_el.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_EL and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R682:  ElseIf Stmt(ACT_EL) -> If Stmt(ACT_IF)
  select one act_if related by act_el->ACT_IF[R682];
  if ( empty act_if )
    ::check_log( message: "one instance not found ACT_EL->ACT_IF[R682]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_if.Statement_ID == act_el.If_Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_EL and ACT_IF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  ElseIf Stmt(ACT_EL) -> Statement(ACT_SMT)
  select one act_smt related by act_el->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_EL->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_el related by act_smt->ACT_EL[R603];
    if ( empty myself_act_el or ( myself_act_el != act_el ) )
      ::check_log( message: "same subtype not found looping back across ACT_EL->ACT_SMT[R603]->ACT_EL[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_srs from instances of ACT_SR;
for each act_sr in act_srs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_sr.Statement_ID, name:"" );
  select many duplicate_act_srs from instances of ACT_SR where ( selected.Statement_ID == act_sr.Statement_ID );
  if ( cardinality duplicate_act_srs != 1 )
    ::check_log( message: "uniqueness violation in ACT_SR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R664:  Select Related By(ACT_SR) -> Select(ACT_SEL)
  select one act_sel related by act_sr->ACT_SEL[R664];
  if ( empty act_sel )
    ::check_log( message: "supertype not found across ACT_SR->ACT_SEL[R664]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_sr related by act_sel->ACT_SR[R664];
    if ( empty myself_act_sr or ( myself_act_sr != act_sr ) )
      ::check_log( message: "same subtype not found looping back across ACT_SR->ACT_SEL[R664]->ACT_SR[R664]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_rets from instances of ACT_RET;
for each act_ret in act_rets
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_ret.Statement_ID, name:"" );
  select many duplicate_act_rets from instances of ACT_RET where ( selected.Statement_ID == act_ret.Statement_ID );
  if ( cardinality duplicate_act_rets != 1 )
    ::check_log( message: "uniqueness violation in ACT_RET for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R668:  Return Stmt(ACT_RET) -> Value(V_VAL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_ret.Value_ID ) ) )
  select one v_val related by act_ret->V_VAL[R668];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_RET->V_VAL[R668]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_ret.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_RET and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Return Stmt(ACT_RET) -> Statement(ACT_SMT)
  select one act_smt related by act_ret->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_RET->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_ret related by act_smt->ACT_RET[R603];
    if ( empty myself_act_ret or ( myself_act_ret != act_ret ) )
      ::check_log( message: "same subtype not found looping back across ACT_RET->ACT_SMT[R603]->ACT_RET[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_fncs from instances of ACT_FNC;
for each act_fnc in act_fncs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_fnc.Statement_ID, name:"" );
  select many duplicate_act_fncs from instances of ACT_FNC where ( selected.Statement_ID == act_fnc.Statement_ID );
  if ( cardinality duplicate_act_fncs != 1 )
    ::check_log( message: "uniqueness violation in ACT_FNC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R675:  Function Invocation(ACT_FNC) -> Function(S_SYNC)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_fnc.Sync_ID ) ) )
  select one s_sync related by act_fnc->S_SYNC[R675];
  if ( empty s_sync )
    ::check_log( message: "one instance not found ACT_FNC->S_SYNC[R675]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sync.Sync_ID == act_fnc.Sync_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FNC and S_SYNC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Function Invocation(ACT_FNC) -> Statement(ACT_SMT)
  select one act_smt related by act_fnc->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_FNC->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_fnc related by act_smt->ACT_FNC[R603];
    if ( empty myself_act_fnc or ( myself_act_fnc != act_fnc ) )
      ::check_log( message: "same subtype not found looping back across ACT_FNC->ACT_SMT[R603]->ACT_FNC[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_iops from instances of ACT_IOP;
for each act_iop in act_iops
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_iop.Statement_ID, name:"" );
  select many duplicate_act_iops from instances of ACT_IOP where ( selected.Statement_ID == act_iop.Statement_ID );
  if ( cardinality duplicate_act_iops != 1 )
    ::check_log( message: "uniqueness violation in ACT_IOP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R680:  Interface Operation Invocation(ACT_IOP) -> Provided Operation(SPR_PO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_iop.ProvidedOp_Id ) ) )
  select one spr_po related by act_iop->SPR_PO[R680];
  if ( empty spr_po )
    ::check_log( message: "one instance not found ACT_IOP->SPR_PO[R680]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_po.Id == act_iop.ProvidedOp_Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IOP and SPR_PO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R657:  Interface Operation Invocation(ACT_IOP) -> Required Operation(SPR_RO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_iop.RequiredOp_Id ) ) )
  select one spr_ro related by act_iop->SPR_RO[R657];
  if ( empty spr_ro )
    ::check_log( message: "one instance not found ACT_IOP->SPR_RO[R657]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_ro.Id == act_iop.RequiredOp_Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IOP and SPR_RO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R629:  Interface Operation Invocation(ACT_IOP) -> Value(V_VAL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_iop.Value_ID ) ) )
  select one v_val related by act_iop->V_VAL[R629];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_IOP->V_VAL[R629]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_iop.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_IOP and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Interface Operation Invocation(ACT_IOP) -> Statement(ACT_SMT)
  select one act_smt related by act_iop->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_IOP->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_iop related by act_smt->ACT_IOP[R603];
    if ( empty myself_act_iop or ( myself_act_iop != act_iop ) )
      ::check_log( message: "same subtype not found looping back across ACT_IOP->ACT_SMT[R603]->ACT_IOP[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_lnks from instances of ACT_LNK;
for each act_lnk in act_lnks
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Link_ID", trace_id:act_lnk.Link_ID, name:"" );
  select many duplicate_act_lnks from instances of ACT_LNK where ( selected.Link_ID == act_lnk.Link_ID );
  if ( cardinality duplicate_act_lnks != 1 )
    ::check_log( message: "uniqueness violation in ACT_LNK for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R604:  Chain Link(ACT_LNK) -> Chain Link(ACT_LNK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_lnk.Next_Link_ID ) ) )
  select one right_act_lnk related by act_lnk->ACT_LNK[R604.''precedes''];
  if ( empty right_act_lnk )
    ::check_log( message: "one instance not found ACT_LNK->ACT_LNK[R604.''precedes'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_act_lnk.Link_ID == act_lnk.Next_Link_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_LNK and ACT_LNK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R678:  Chain Link(ACT_LNK) -> Model Class(O_OBJ)
  select one o_obj related by act_lnk->O_OBJ[R678];
  if ( empty o_obj )
    ::check_log( message: "one instance not found ACT_LNK->O_OBJ[R678]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == act_lnk.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_LNK and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R681:  Chain Link(ACT_LNK) -> Association(R_REL)
  select one r_rel related by act_lnk->R_REL[R681];
  if ( empty r_rel )
    ::check_log( message: "one instance not found ACT_LNK->R_REL[R681]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == act_lnk.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_LNK and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R637:  Chain Link(ACT_LNK) -> Select(ACT_SEL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_lnk.Statement_ID ) ) )
  select one act_sel related by act_lnk->ACT_SEL[R637];
  if ( empty act_sel )
    ::check_log( message: "one instance not found ACT_LNK->ACT_SEL[R637]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_sel.Statement_ID == act_lnk.Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_LNK and ACT_SEL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_sgns from instances of ACT_SGN;
for each act_sgn in act_sgns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_sgn.Statement_ID, name:"" );
  select many duplicate_act_sgns from instances of ACT_SGN where ( selected.Statement_ID == act_sgn.Statement_ID );
  if ( cardinality duplicate_act_sgns != 1 )
    ::check_log( message: "uniqueness violation in ACT_SGN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R663:  Signal Invocation(ACT_SGN) -> Provided Signal(SPR_PS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_sgn.ProvidedSig_Id ) ) )
  select one spr_ps related by act_sgn->SPR_PS[R663];
  if ( empty spr_ps )
    ::check_log( message: "one instance not found ACT_SGN->SPR_PS[R663]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_ps.Id == act_sgn.ProvidedSig_Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SGN and SPR_PS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R660:  Signal Invocation(ACT_SGN) -> Required Signal(SPR_RS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_sgn.RequiredSig_Id ) ) )
  select one spr_rs related by act_sgn->SPR_RS[R660];
  if ( empty spr_rs )
    ::check_log( message: "one instance not found ACT_SGN->SPR_RS[R660]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_rs.Id == act_sgn.RequiredSig_Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SGN and SPR_RS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R630:  Signal Invocation(ACT_SGN) -> Value(V_VAL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_sgn.Value_ID ) ) )
  select one v_val related by act_sgn->V_VAL[R630];
  if ( empty v_val )
    ::check_log( message: "one instance not found ACT_SGN->V_VAL[R630]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == act_sgn.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SGN and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Signal Invocation(ACT_SGN) -> Statement(ACT_SMT)
  select one act_smt related by act_sgn->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_SGN->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_sgn related by act_smt->ACT_SGN[R603];
    if ( empty myself_act_sgn or ( myself_act_sgn != act_sgn ) )
      ::check_log( message: "same subtype not found looping back across ACT_SGN->ACT_SMT[R603]->ACT_SGN[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_ctls from instances of ACT_CTL;
for each act_ctl in act_ctls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_ctl.Statement_ID, name:"" );
  select many duplicate_act_ctls from instances of ACT_CTL where ( selected.Statement_ID == act_ctl.Statement_ID );
  if ( cardinality duplicate_act_ctls != 1 )
    ::check_log( message: "uniqueness violation in ACT_CTL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Control(ACT_CTL) -> Statement(ACT_SMT)
  select one act_smt related by act_ctl->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_CTL->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_ctl related by act_smt->ACT_CTL[R603];
    if ( empty myself_act_ctl or ( myself_act_ctl != act_ctl ) )
      ::check_log( message: "same subtype not found looping back across ACT_CTL->ACT_SMT[R603]->ACT_CTL[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_brks from instances of ACT_BRK;
for each act_brk in act_brks
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_brk.Statement_ID, name:"" );
  select many duplicate_act_brks from instances of ACT_BRK where ( selected.Statement_ID == act_brk.Statement_ID );
  if ( cardinality duplicate_act_brks != 1 )
    ::check_log( message: "uniqueness violation in ACT_BRK for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Break(ACT_BRK) -> Statement(ACT_SMT)
  select one act_smt related by act_brk->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_BRK->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_brk related by act_smt->ACT_BRK[R603];
    if ( empty myself_act_brk or ( myself_act_brk != act_brk ) )
      ::check_log( message: "same subtype not found looping back across ACT_BRK->ACT_SMT[R603]->ACT_BRK[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_cons from instances of ACT_CON;
for each act_con in act_cons
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:act_con.Statement_ID, name:"" );
  select many duplicate_act_cons from instances of ACT_CON where ( selected.Statement_ID == act_con.Statement_ID );
  if ( cardinality duplicate_act_cons != 1 )
    ::check_log( message: "uniqueness violation in ACT_CON for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Continue(ACT_CON) -> Statement(ACT_SMT)
  select one act_smt related by act_con->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across ACT_CON->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_con related by act_smt->ACT_CON[R603];
    if ( empty myself_act_con or ( myself_act_con != act_con ) )
      ::check_log( message: "same subtype not found looping back across ACT_CON->ACT_SMT[R603]->ACT_CON[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_sabs from instances of ACT_SAB;
for each act_sab in act_sabs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_sab.Action_ID, name:"" );
  select many duplicate_act_sabs from instances of ACT_SAB where ( selected.Action_ID == act_sab.Action_ID );
  if ( cardinality duplicate_act_sabs != 1 )
    ::check_log( message: "uniqueness violation in ACT_SAB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R691:  State Action Body(ACT_SAB) -> Action(SM_ACT)
  select one sm_act related by act_sab->SM_ACT[R691];
  if ( empty sm_act )
    ::check_log( message: "one instance not found ACT_SAB->SM_ACT[R691]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_act.SM_ID == act_sab.SM_ID and sm_act.Act_ID == act_sab.Act_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_SAB and SM_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  State Action Body(ACT_SAB) -> Body(ACT_ACT)
  select one act_act related by act_sab->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_SAB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_sab related by act_act->ACT_SAB[R698];
    if ( empty myself_act_sab or ( myself_act_sab != act_sab ) )
      ::check_log( message: "same subtype not found looping back across ACT_SAB->ACT_ACT[R698]->ACT_SAB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_dabs from instances of ACT_DAB;
for each act_dab in act_dabs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_dab.Action_ID, name:"" );
  select many duplicate_act_dabs from instances of ACT_DAB where ( selected.Action_ID == act_dab.Action_ID );
  if ( cardinality duplicate_act_dabs != 1 )
    ::check_log( message: "uniqueness violation in ACT_DAB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R693:  Derived Attribute Body(ACT_DAB) -> Derived Base Attribute(O_DBATTR)
  select one o_dbattr related by act_dab->O_DBATTR[R693];
  if ( empty o_dbattr )
    ::check_log( message: "one instance not found ACT_DAB->O_DBATTR[R693]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_dbattr.Attr_ID == act_dab.Attr_ID and o_dbattr.Obj_ID == act_dab.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_DAB and O_DBATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Derived Attribute Body(ACT_DAB) -> Body(ACT_ACT)
  select one act_act related by act_dab->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_DAB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_dab related by act_act->ACT_DAB[R698];
    if ( empty myself_act_dab or ( myself_act_dab != act_dab ) )
      ::check_log( message: "same subtype not found looping back across ACT_DAB->ACT_ACT[R698]->ACT_DAB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_fnbs from instances of ACT_FNB;
for each act_fnb in act_fnbs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_fnb.Action_ID, name:"" );
  select many duplicate_act_fnbs from instances of ACT_FNB where ( selected.Action_ID == act_fnb.Action_ID );
  if ( cardinality duplicate_act_fnbs != 1 )
    ::check_log( message: "uniqueness violation in ACT_FNB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R695:  Function Body(ACT_FNB) -> Function(S_SYNC)
  select one s_sync related by act_fnb->S_SYNC[R695];
  if ( empty s_sync )
    ::check_log( message: "one instance not found ACT_FNB->S_SYNC[R695]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sync.Sync_ID == act_fnb.Sync_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_FNB and S_SYNC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Function Body(ACT_FNB) -> Body(ACT_ACT)
  select one act_act related by act_fnb->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_FNB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_fnb related by act_act->ACT_FNB[R698];
    if ( empty myself_act_fnb or ( myself_act_fnb != act_fnb ) )
      ::check_log( message: "same subtype not found looping back across ACT_FNB->ACT_ACT[R698]->ACT_FNB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_opbs from instances of ACT_OPB;
for each act_opb in act_opbs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_opb.Action_ID, name:"" );
  select many duplicate_act_opbs from instances of ACT_OPB where ( selected.Action_ID == act_opb.Action_ID );
  if ( cardinality duplicate_act_opbs != 1 )
    ::check_log( message: "uniqueness violation in ACT_OPB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R696:  Operation Body(ACT_OPB) -> Operation(O_TFR)
  select one o_tfr related by act_opb->O_TFR[R696];
  if ( empty o_tfr )
    ::check_log( message: "one instance not found ACT_OPB->O_TFR[R696]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tfr.Tfr_ID == act_opb.Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_OPB and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Operation Body(ACT_OPB) -> Body(ACT_ACT)
  select one act_act related by act_opb->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_OPB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_opb related by act_act->ACT_OPB[R698];
    if ( empty myself_act_opb or ( myself_act_opb != act_opb ) )
      ::check_log( message: "same subtype not found looping back across ACT_OPB->ACT_ACT[R698]->ACT_OPB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_brbs from instances of ACT_BRB;
for each act_brb in act_brbs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_brb.Action_ID, name:"" );
  select many duplicate_act_brbs from instances of ACT_BRB where ( selected.Action_ID == act_brb.Action_ID );
  if ( cardinality duplicate_act_brbs != 1 )
    ::check_log( message: "uniqueness violation in ACT_BRB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R697:  Bridge Body(ACT_BRB) -> Bridge(S_BRG)
  select one s_brg related by act_brb->S_BRG[R697];
  if ( empty s_brg )
    ::check_log( message: "one instance not found ACT_BRB->S_BRG[R697]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_brg.Brg_ID == act_brb.Brg_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BRB and S_BRG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Bridge Body(ACT_BRB) -> Body(ACT_ACT)
  select one act_act related by act_brb->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_BRB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_brb related by act_act->ACT_BRB[R698];
    if ( empty myself_act_brb or ( myself_act_brb != act_brb ) )
      ::check_log( message: "same subtype not found looping back across ACT_BRB->ACT_ACT[R698]->ACT_BRB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_pobs from instances of ACT_POB;
for each act_pob in act_pobs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_pob.Action_ID, name:"" );
  select many duplicate_act_pobs from instances of ACT_POB where ( selected.Action_ID == act_pob.Action_ID );
  if ( cardinality duplicate_act_pobs != 1 )
    ::check_log( message: "uniqueness violation in ACT_POB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R687:  Provided Operation Body(ACT_POB) -> Provided Operation(SPR_PO)
  select one spr_po related by act_pob->SPR_PO[R687];
  if ( empty spr_po )
    ::check_log( message: "one instance not found ACT_POB->SPR_PO[R687]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_po.Id == act_pob.Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_POB and SPR_PO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Provided Operation Body(ACT_POB) -> Body(ACT_ACT)
  select one act_act related by act_pob->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_POB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_pob related by act_act->ACT_POB[R698];
    if ( empty myself_act_pob or ( myself_act_pob != act_pob ) )
      ::check_log( message: "same subtype not found looping back across ACT_POB->ACT_ACT[R698]->ACT_POB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_psbs from instances of ACT_PSB;
for each act_psb in act_psbs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_psb.Action_ID, name:"" );
  select many duplicate_act_psbs from instances of ACT_PSB where ( selected.Action_ID == act_psb.Action_ID );
  if ( cardinality duplicate_act_psbs != 1 )
    ::check_log( message: "uniqueness violation in ACT_PSB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R686:  Provided Signal Body(ACT_PSB) -> Provided Signal(SPR_PS)
  select one spr_ps related by act_psb->SPR_PS[R686];
  if ( empty spr_ps )
    ::check_log( message: "one instance not found ACT_PSB->SPR_PS[R686]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_ps.Id == act_psb.Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_PSB and SPR_PS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Provided Signal Body(ACT_PSB) -> Body(ACT_ACT)
  select one act_act related by act_psb->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_PSB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_psb related by act_act->ACT_PSB[R698];
    if ( empty myself_act_psb or ( myself_act_psb != act_psb ) )
      ::check_log( message: "same subtype not found looping back across ACT_PSB->ACT_ACT[R698]->ACT_PSB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_robs from instances of ACT_ROB;
for each act_rob in act_robs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_rob.Action_ID, name:"" );
  select many duplicate_act_robs from instances of ACT_ROB where ( selected.Action_ID == act_rob.Action_ID );
  if ( cardinality duplicate_act_robs != 1 )
    ::check_log( message: "uniqueness violation in ACT_ROB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R685:  Required Operation Body(ACT_ROB) -> Required Operation(SPR_RO)
  select one spr_ro related by act_rob->SPR_RO[R685];
  if ( empty spr_ro )
    ::check_log( message: "one instance not found ACT_ROB->SPR_RO[R685]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_ro.Id == act_rob.Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_ROB and SPR_RO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Required Operation Body(ACT_ROB) -> Body(ACT_ACT)
  select one act_act related by act_rob->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_ROB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_rob related by act_act->ACT_ROB[R698];
    if ( empty myself_act_rob or ( myself_act_rob != act_rob ) )
      ::check_log( message: "same subtype not found looping back across ACT_ROB->ACT_ACT[R698]->ACT_ROB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_rsbs from instances of ACT_RSB;
for each act_rsb in act_rsbs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_rsb.Action_ID, name:"" );
  select many duplicate_act_rsbs from instances of ACT_RSB where ( selected.Action_ID == act_rsb.Action_ID );
  if ( cardinality duplicate_act_rsbs != 1 )
    ::check_log( message: "uniqueness violation in ACT_RSB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R684:  Required Signal Body(ACT_RSB) -> Required Signal(SPR_RS)
  select one spr_rs related by act_rsb->SPR_RS[R684];
  if ( empty spr_rs )
    ::check_log( message: "one instance not found ACT_RSB->SPR_RS[R684]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_rs.Id == act_rsb.Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_RSB and SPR_RS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Required Signal Body(ACT_RSB) -> Body(ACT_ACT)
  select one act_act related by act_rsb->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_RSB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_rsb related by act_act->ACT_RSB[R698];
    if ( empty myself_act_rsb or ( myself_act_rsb != act_rsb ) )
      ::check_log( message: "same subtype not found looping back across ACT_RSB->ACT_ACT[R698]->ACT_RSB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_bics from instances of ACT_BIC;
for each act_bic in act_bics
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_bic.Action_ID, name:"" );
  select many duplicate_act_bics from instances of ACT_BIC where ( selected.Action_ID == act_bic.Action_ID and selected.Component_Id == act_bic.Component_Id );
  if ( cardinality duplicate_act_bics != 1 )
    ::check_log( message: "uniqueness violation in ACT_BIC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R694:  Body in Component(ACT_BIC) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_bic.Component_Id ) ) )
  select one c_c related by act_bic->C_C[R694];
  if ( empty c_c )
    ::check_log( message: "one instance not found ACT_BIC->C_C[R694]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == act_bic.Component_Id ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BIC and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R694:  Body in Component(ACT_BIC) -> Body(ACT_ACT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_bic.Action_ID ) ) )
  select one act_act related by act_bic->ACT_ACT[R694];
  if ( empty act_act )
    ::check_log( message: "one instance not found ACT_BIC->ACT_ACT[R694]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_act.Action_ID == act_bic.Action_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BIC and ACT_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_tabs from instances of ACT_TAB;
for each act_tab in act_tabs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_tab.Action_ID, name:"" );
  select many duplicate_act_tabs from instances of ACT_TAB where ( selected.Action_ID == act_tab.Action_ID );
  if ( cardinality duplicate_act_tabs != 1 )
    ::check_log( message: "uniqueness violation in ACT_TAB for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R688:  Transition Action Body(ACT_TAB) -> Action(SM_ACT)
  select one sm_act related by act_tab->SM_ACT[R688];
  if ( empty sm_act )
    ::check_log( message: "one instance not found ACT_TAB->SM_ACT[R688]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_act.SM_ID == act_tab.SM_ID and sm_act.Act_ID == act_tab.Act_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_TAB and SM_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R698:  Transition Action Body(ACT_TAB) -> Body(ACT_ACT)
  select one act_act related by act_tab->ACT_ACT[R698];
  if ( empty act_act )
    ::check_log( message: "supertype not found across ACT_TAB->ACT_ACT[R698]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_act_tab related by act_act->ACT_TAB[R698];
    if ( empty myself_act_tab or ( myself_act_tab != act_tab ) )
      ::check_log( message: "same subtype not found looping back across ACT_TAB->ACT_ACT[R698]->ACT_TAB[R698]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many act_bies from instances of ACT_BIE;
for each act_bie in act_bies
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Action_ID", trace_id:act_bie.Action_ID, name:"" );
  select many duplicate_act_bies from instances of ACT_BIE where ( selected.Action_ID == act_bie.Action_ID and selected.Element_ID == act_bie.Element_ID );
  if ( cardinality duplicate_act_bies != 1 )
    ::check_log( message: "uniqueness violation in ACT_BIE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R640:  Body in Element(ACT_BIE) -> Body(ACT_ACT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_bie.Action_ID ) ) )
  select one act_act related by act_bie->ACT_ACT[R640];
  if ( empty act_act )
    ::check_log( message: "one instance not found ACT_BIE->ACT_ACT[R640]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_act.Action_ID == act_bie.Action_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BIE and ACT_ACT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R640:  Body in Element(ACT_BIE) -> Packageable Element(PE_PE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:act_bie.Element_ID ) ) )
  select one pe_pe related by act_bie->PE_PE[R640];
  if ( empty pe_pe )
    ::check_log( message: "one instance not found ACT_BIE->PE_PE[R640]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( pe_pe.Element_ID == act_bie.Element_ID ) )
      ::check_log( message: "referentials do not match identifiers between ACT_BIE and PE_PE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_ceis from instances of E_CEI;
for each e_cei in e_ceis
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_cei.Statement_ID, name:"" );
  select many duplicate_e_ceis from instances of E_CEI where ( selected.Statement_ID == e_cei.Statement_ID );
  if ( cardinality duplicate_e_ceis != 1 )
    ::check_log( message: "uniqueness violation in E_CEI for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R711:  Create Event to Instance(E_CEI) -> Variable(V_VAR)
  select one v_var related by e_cei->V_VAR[R711];
  if ( empty v_var )
    ::check_log( message: "one instance not found E_CEI->V_VAR[R711]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == e_cei.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between E_CEI and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R704:  Create Event to Instance(E_CEI) -> Create SM Event Statement(E_CSME)
  select one e_csme related by e_cei->E_CSME[R704];
  if ( empty e_csme )
    ::check_log( message: "supertype not found across E_CEI->E_CSME[R704]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_cei related by e_csme->E_CEI[R704];
    if ( empty myself_e_cei or ( myself_e_cei != e_cei ) )
      ::check_log( message: "same subtype not found looping back across E_CEI->E_CSME[R704]->E_CEI[R704]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_gens from instances of E_GEN;
for each e_gen in e_gens
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_gen.Statement_ID, name:"" );
  select many duplicate_e_gens from instances of E_GEN where ( selected.Statement_ID == e_gen.Statement_ID );
  if ( cardinality duplicate_e_gens != 1 )
    ::check_log( message: "uniqueness violation in E_GEN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R712:  Generate(E_GEN) -> Variable(V_VAR)
  select one v_var related by e_gen->V_VAR[R712];
  if ( empty v_var )
    ::check_log( message: "one instance not found E_GEN->V_VAR[R712]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == e_gen.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between E_GEN and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R705:  Generate(E_GEN) -> Generate SM Event Statement(E_GSME)
  select one e_gsme related by e_gen->E_GSME[R705];
  if ( empty e_gsme )
    ::check_log( message: "supertype not found across E_GEN->E_GSME[R705]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_gen related by e_gsme->E_GEN[R705];
    if ( empty myself_e_gen or ( myself_e_gen != e_gen ) )
      ::check_log( message: "same subtype not found looping back across E_GEN->E_GSME[R705]->E_GEN[R705]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_gprs from instances of E_GPR;
for each e_gpr in e_gprs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_gpr.Statement_ID, name:"" );
  select many duplicate_e_gprs from instances of E_GPR where ( selected.Statement_ID == e_gpr.Statement_ID );
  if ( cardinality duplicate_e_gprs != 1 )
    ::check_log( message: "uniqueness violation in E_GPR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R714:  Generate Preexisting Event(E_GPR) -> Value(V_VAL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:e_gpr.Value_ID ) ) )
  select one v_val related by e_gpr->V_VAL[R714];
  if ( empty v_val )
    ::check_log( message: "one instance not found E_GPR->V_VAL[R714]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == e_gpr.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between E_GPR and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R603:  Generate Preexisting Event(E_GPR) -> Statement(ACT_SMT)
  select one act_smt related by e_gpr->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across E_GPR->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_gpr related by act_smt->E_GPR[R603];
    if ( empty myself_e_gpr or ( myself_e_gpr != e_gpr ) )
      ::check_log( message: "same subtype not found looping back across E_GPR->ACT_SMT[R603]->E_GPR[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_ceas from instances of E_CEA;
for each e_cea in e_ceas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_cea.Statement_ID, name:"" );
  select many duplicate_e_ceas from instances of E_CEA where ( selected.Statement_ID == e_cea.Statement_ID );
  if ( cardinality duplicate_e_ceas != 1 )
    ::check_log( message: "uniqueness violation in E_CEA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R704:  Create Event to Class(E_CEA) -> Create SM Event Statement(E_CSME)
  select one e_csme related by e_cea->E_CSME[R704];
  if ( empty e_csme )
    ::check_log( message: "supertype not found across E_CEA->E_CSME[R704]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_cea related by e_csme->E_CEA[R704];
    if ( empty myself_e_cea or ( myself_e_cea != e_cea ) )
      ::check_log( message: "same subtype not found looping back across E_CEA->E_CSME[R704]->E_CEA[R704]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_gars from instances of E_GAR;
for each e_gar in e_gars
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_gar.Statement_ID, name:"" );
  select many duplicate_e_gars from instances of E_GAR where ( selected.Statement_ID == e_gar.Statement_ID );
  if ( cardinality duplicate_e_gars != 1 )
    ::check_log( message: "uniqueness violation in E_GAR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R705:  Generate to Class(E_GAR) -> Generate SM Event Statement(E_GSME)
  select one e_gsme related by e_gar->E_GSME[R705];
  if ( empty e_gsme )
    ::check_log( message: "supertype not found across E_GAR->E_GSME[R705]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_gar related by e_gsme->E_GAR[R705];
    if ( empty myself_e_gar or ( myself_e_gar != e_gar ) )
      ::check_log( message: "same subtype not found looping back across E_GAR->E_GSME[R705]->E_GAR[R705]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_gecs from instances of E_GEC;
for each e_gec in e_gecs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_gec.Statement_ID, name:"" );
  select many duplicate_e_gecs from instances of E_GEC where ( selected.Statement_ID == e_gec.Statement_ID );
  if ( cardinality duplicate_e_gecs != 1 )
    ::check_log( message: "uniqueness violation in E_GEC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R705:  Generate to Creator(E_GEC) -> Generate SM Event Statement(E_GSME)
  select one e_gsme related by e_gec->E_GSME[R705];
  if ( empty e_gsme )
    ::check_log( message: "supertype not found across E_GEC->E_GSME[R705]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_gec related by e_gsme->E_GEC[R705];
    if ( empty myself_e_gec or ( myself_e_gec != e_gec ) )
      ::check_log( message: "same subtype not found looping back across E_GEC->E_GSME[R705]->E_GEC[R705]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_cecs from instances of E_CEC;
for each e_cec in e_cecs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_cec.Statement_ID, name:"" );
  select many duplicate_e_cecs from instances of E_CEC where ( selected.Statement_ID == e_cec.Statement_ID );
  if ( cardinality duplicate_e_cecs != 1 )
    ::check_log( message: "uniqueness violation in E_CEC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R704:  Create Event to Creator(E_CEC) -> Create SM Event Statement(E_CSME)
  select one e_csme related by e_cec->E_CSME[R704];
  if ( empty e_csme )
    ::check_log( message: "supertype not found across E_CEC->E_CSME[R704]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_cec related by e_csme->E_CEC[R704];
    if ( empty myself_e_cec or ( myself_e_cec != e_cec ) )
      ::check_log( message: "same subtype not found looping back across E_CEC->E_CSME[R704]->E_CEC[R704]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_esss from instances of E_ESS;
for each e_ess in e_esss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_ess.Statement_ID, name:"" );
  select many duplicate_e_esss from instances of E_ESS where ( selected.Statement_ID == e_ess.Statement_ID );
  if ( cardinality duplicate_e_esss != 1 )
    ::check_log( message: "uniqueness violation in E_ESS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R603:  Event Specification Statement(E_ESS) -> Statement(ACT_SMT)
  select one act_smt related by e_ess->ACT_SMT[R603];
  if ( empty act_smt )
    ::check_log( message: "supertype not found across E_ESS->ACT_SMT[R603]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_ess related by act_smt->E_ESS[R603];
    if ( empty myself_e_ess or ( myself_e_ess != e_ess ) )
      ::check_log( message: "same subtype not found looping back across E_ESS->ACT_SMT[R603]->E_ESS[R603]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R701:  supertype Event Specification Statement(E_ESS)
  subtype_count = 0;
  select one e_ces related by e_ess->E_CES[R701];
  if ( not_empty e_ces )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_ges related by e_ess->E_GES[R701];
  if ( not_empty e_ges )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from E_ESS across R701", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from E_ESS across R701", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_cess from instances of E_CES;
for each e_ces in e_cess
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_ces.Statement_ID, name:"" );
  select many duplicate_e_cess from instances of E_CES where ( selected.Statement_ID == e_ces.Statement_ID );
  if ( cardinality duplicate_e_cess != 1 )
    ::check_log( message: "uniqueness violation in E_CES for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R710:  Create Event Statement(E_CES) -> Variable(V_VAR)
  select one v_var related by e_ces->V_VAR[R710];
  if ( empty v_var )
    ::check_log( message: "one instance not found E_CES->V_VAR[R710]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == e_ces.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between E_CES and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R701:  Create Event Statement(E_CES) -> Event Specification Statement(E_ESS)
  select one e_ess related by e_ces->E_ESS[R701];
  if ( empty e_ess )
    ::check_log( message: "supertype not found across E_CES->E_ESS[R701]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_ces related by e_ess->E_CES[R701];
    if ( empty myself_e_ces or ( myself_e_ces != e_ces ) )
      ::check_log( message: "same subtype not found looping back across E_CES->E_ESS[R701]->E_CES[R701]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R702:  supertype Create Event Statement(E_CES)
  subtype_count = 0;
  select one e_csme related by e_ces->E_CSME[R702];
  if ( not_empty e_csme )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from E_CES across R702", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from E_CES across R702", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_gess from instances of E_GES;
for each e_ges in e_gess
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_ges.Statement_ID, name:"" );
  select many duplicate_e_gess from instances of E_GES where ( selected.Statement_ID == e_ges.Statement_ID );
  if ( cardinality duplicate_e_gess != 1 )
    ::check_log( message: "uniqueness violation in E_GES for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R701:  Generate Event Statement(E_GES) -> Event Specification Statement(E_ESS)
  select one e_ess related by e_ges->E_ESS[R701];
  if ( empty e_ess )
    ::check_log( message: "supertype not found across E_GES->E_ESS[R701]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_ges related by e_ess->E_GES[R701];
    if ( empty myself_e_ges or ( myself_e_ges != e_ges ) )
      ::check_log( message: "same subtype not found looping back across E_GES->E_ESS[R701]->E_GES[R701]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R703:  supertype Generate Event Statement(E_GES)
  subtype_count = 0;
  select one e_gsme related by e_ges->E_GSME[R703];
  if ( not_empty e_gsme )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from E_GES across R703", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from E_GES across R703", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_csmes from instances of E_CSME;
for each e_csme in e_csmes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_csme.Statement_ID, name:"" );
  select many duplicate_e_csmes from instances of E_CSME where ( selected.Statement_ID == e_csme.Statement_ID );
  if ( cardinality duplicate_e_csmes != 1 )
    ::check_log( message: "uniqueness violation in E_CSME for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R706:  Create SM Event Statement(E_CSME) -> State Machine Event(SM_EVT)
  select one sm_evt related by e_csme->SM_EVT[R706];
  if ( empty sm_evt )
    ::check_log( message: "one instance not found E_CSME->SM_EVT[R706]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evt.SMevt_ID == e_csme.SMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between E_CSME and SM_EVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R702:  Create SM Event Statement(E_CSME) -> Create Event Statement(E_CES)
  select one e_ces related by e_csme->E_CES[R702];
  if ( empty e_ces )
    ::check_log( message: "supertype not found across E_CSME->E_CES[R702]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_csme related by e_ces->E_CSME[R702];
    if ( empty myself_e_csme or ( myself_e_csme != e_csme ) )
      ::check_log( message: "same subtype not found looping back across E_CSME->E_CES[R702]->E_CSME[R702]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R704:  supertype Create SM Event Statement(E_CSME)
  subtype_count = 0;
  select one e_cei related by e_csme->E_CEI[R704];
  if ( not_empty e_cei )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_cea related by e_csme->E_CEA[R704];
  if ( not_empty e_cea )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_cec related by e_csme->E_CEC[R704];
  if ( not_empty e_cec )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from E_CSME across R704", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from E_CSME across R704", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many e_gsmes from instances of E_GSME;
for each e_gsme in e_gsmes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Statement_ID", trace_id:e_gsme.Statement_ID, name:"" );
  select many duplicate_e_gsmes from instances of E_GSME where ( selected.Statement_ID == e_gsme.Statement_ID );
  if ( cardinality duplicate_e_gsmes != 1 )
    ::check_log( message: "uniqueness violation in E_GSME for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R707:  Generate SM Event Statement(E_GSME) -> State Machine Event(SM_EVT)
  select one sm_evt related by e_gsme->SM_EVT[R707];
  if ( empty sm_evt )
    ::check_log( message: "one instance not found E_GSME->SM_EVT[R707]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evt.SMevt_ID == e_gsme.SMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between E_GSME and SM_EVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R703:  Generate SM Event Statement(E_GSME) -> Generate Event Statement(E_GES)
  select one e_ges related by e_gsme->E_GES[R703];
  if ( empty e_ges )
    ::check_log( message: "supertype not found across E_GSME->E_GES[R703]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_e_gsme related by e_ges->E_GSME[R703];
    if ( empty myself_e_gsme or ( myself_e_gsme != e_gsme ) )
      ::check_log( message: "same subtype not found looping back across E_GSME->E_GES[R703]->E_GSME[R703]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R705:  supertype Generate SM Event Statement(E_GSME)
  subtype_count = 0;
  select one e_gen related by e_gsme->E_GEN[R705];
  if ( not_empty e_gen )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_gar related by e_gsme->E_GAR[R705];
  if ( not_empty e_gar )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one e_gec related by e_gsme->E_GEC[R705];
  if ( not_empty e_gec )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from E_GSME across R705", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from E_GSME across R705", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_vals from instances of V_VAL;
for each v_val in v_vals
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_val.Value_ID, name:"" );
  select many duplicate_v_vals from instances of V_VAL where ( selected.Value_ID == v_val.Value_ID );
  if ( cardinality duplicate_v_vals != 1 )
    ::check_log( message: "uniqueness violation in V_VAL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R820:  Value(V_VAL) -> Data Type(S_DT)
  select one s_dt related by v_val->S_DT[R820];
  if ( empty s_dt )
    ::check_log( message: "one instance not found V_VAL->S_DT[R820]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == v_val.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_VAL and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R826:  Value(V_VAL) -> Block(ACT_BLK)
  select one act_blk related by v_val->ACT_BLK[R826];
  if ( empty act_blk )
    ::check_log( message: "one instance not found V_VAL->ACT_BLK[R826]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == v_val.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_VAL and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R801:  supertype Value(V_VAL)
  subtype_count = 0;
  select one v_fnv related by v_val->V_FNV[R801];
  if ( not_empty v_fnv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_pvl related by v_val->V_PVL[R801];
  if ( not_empty v_pvl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_slr related by v_val->V_SLR[R801];
  if ( not_empty v_slr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_brv related by v_val->V_BRV[R801];
  if ( not_empty v_brv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_irf related by v_val->V_IRF[R801];
  if ( not_empty v_irf )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_lin related by v_val->V_LIN[R801];
  if ( not_empty v_lin )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_lst related by v_val->V_LST[R801];
  if ( not_empty v_lst )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_uny related by v_val->V_UNY[R801];
  if ( not_empty v_uny )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_trv related by v_val->V_TRV[R801];
  if ( not_empty v_trv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_isr related by v_val->V_ISR[R801];
  if ( not_empty v_isr )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_edv related by v_val->V_EDV[R801];
  if ( not_empty v_edv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_tvl related by v_val->V_TVL[R801];
  if ( not_empty v_tvl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_lrl related by v_val->V_LRL[R801];
  if ( not_empty v_lrl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_lbo related by v_val->V_LBO[R801];
  if ( not_empty v_lbo )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_bin related by v_val->V_BIN[R801];
  if ( not_empty v_bin )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_len related by v_val->V_LEN[R801];
  if ( not_empty v_len )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_mvl related by v_val->V_MVL[R801];
  if ( not_empty v_mvl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_aer related by v_val->V_AER[R801];
  if ( not_empty v_aer )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_alv related by v_val->V_ALV[R801];
  if ( not_empty v_alv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_msv related by v_val->V_MSV[R801];
  if ( not_empty v_msv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_scv related by v_val->V_SCV[R801];
  if ( not_empty v_scv )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from V_VAL across R801", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from V_VAL across R801", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_pars from instances of V_PAR;
for each v_par in v_pars
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_par.Value_ID, name:v_par.Name );
  select many duplicate_v_pars from instances of V_PAR where ( selected.Value_ID == v_par.Value_ID );
  if ( cardinality duplicate_v_pars != 1 )
    ::check_log( message: "uniqueness violation in V_PAR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R669:  Actual Parameter(V_PAR) -> Function Invocation(ACT_FNC)
  // formalizer participation R628:  Actual Parameter(V_PAR) -> Bridge Invocation(ACT_BRG)
  // formalizer participation R627:  Actual Parameter(V_PAR) -> Operation Invocation(ACT_TFM)
  // formalizer participation R679:  Actual Parameter(V_PAR) -> Interface Operation Invocation(ACT_IOP)
  // formalizer participation R662:  Actual Parameter(V_PAR) -> Signal Invocation(ACT_SGN)
  // formalizer participation R700:  Actual Parameter(V_PAR) -> Event Specification Statement(E_ESS)
  // formalizer participation R800:  Actual Parameter(V_PAR) -> Value(V_VAL)
  select one v_val related by v_par->V_VAL[R800];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_PAR->V_VAL[R800]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_par.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_PAR and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R817:  Actual Parameter(V_PAR) -> Function Value(V_FNV)
  // formalizer participation R810:  Actual Parameter(V_PAR) -> Bridge Value(V_BRV)
  // formalizer participation R811:  Actual Parameter(V_PAR) -> Operation Value(V_TRV)
  // formalizer participation R816:  Actual Parameter(V_PAR) -> Actual Parameter(V_PAR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_par.Next_Value_ID ) ) )
  select one right_v_par related by v_par->V_PAR[R816.''precedes''];
  if ( empty right_v_par )
    ::check_log( message: "one instance not found V_PAR->V_PAR[R816.''precedes'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_v_par.Value_ID == v_par.Next_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_PAR and V_PAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R842:  Actual Parameter(V_PAR) -> Message Value(V_MSV)
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_bins from instances of V_BIN;
for each v_bin in v_bins
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_bin.Value_ID, name:"" );
  select many duplicate_v_bins from instances of V_BIN where ( selected.Value_ID == v_bin.Value_ID );
  if ( cardinality duplicate_v_bins != 1 )
    ::check_log( message: "uniqueness violation in V_BIN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R803:  Binary Operation(V_BIN) -> Value(V_VAL)
  select one v_val related by v_bin->V_VAL[R803];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_BIN->V_VAL[R803]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_bin.Right_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_BIN and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R802:  Binary Operation(V_BIN) -> Value(V_VAL)
  select one v_val related by v_bin->V_VAL[R802];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_BIN->V_VAL[R802]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_bin.Left_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_BIN and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Binary Operation(V_BIN) -> Value(V_VAL)
  select one v_val related by v_bin->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_BIN->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_bin related by v_val->V_BIN[R801];
    if ( empty myself_v_bin or ( myself_v_bin != v_bin ) )
      ::check_log( message: "same subtype not found looping back across V_BIN->V_VAL[R801]->V_BIN[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_lbos from instances of V_LBO;
for each v_lbo in v_lbos
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_lbo.Value_ID, name:"" );
  select many duplicate_v_lbos from instances of V_LBO where ( selected.Value_ID == v_lbo.Value_ID );
  if ( cardinality duplicate_v_lbos != 1 )
    ::check_log( message: "uniqueness violation in V_LBO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Literal Boolean(V_LBO) -> Value(V_VAL)
  select one v_val related by v_lbo->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_LBO->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_lbo related by v_val->V_LBO[R801];
    if ( empty myself_v_lbo or ( myself_v_lbo != v_lbo ) )
      ::check_log( message: "same subtype not found looping back across V_LBO->V_VAL[R801]->V_LBO[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_lrls from instances of V_LRL;
for each v_lrl in v_lrls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_lrl.Value_ID, name:"" );
  select many duplicate_v_lrls from instances of V_LRL where ( selected.Value_ID == v_lrl.Value_ID );
  if ( cardinality duplicate_v_lrls != 1 )
    ::check_log( message: "uniqueness violation in V_LRL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Literal Real(V_LRL) -> Value(V_VAL)
  select one v_val related by v_lrl->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_LRL->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_lrl related by v_val->V_LRL[R801];
    if ( empty myself_v_lrl or ( myself_v_lrl != v_lrl ) )
      ::check_log( message: "same subtype not found looping back across V_LRL->V_VAL[R801]->V_LRL[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_tvls from instances of V_TVL;
for each v_tvl in v_tvls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_tvl.Value_ID, name:"" );
  select many duplicate_v_tvls from instances of V_TVL where ( selected.Value_ID == v_tvl.Value_ID );
  if ( cardinality duplicate_v_tvls != 1 )
    ::check_log( message: "uniqueness violation in V_TVL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R805:  Transient Value Reference(V_TVL) -> Variable(V_VAR)
  select one v_var related by v_tvl->V_VAR[R805];
  if ( empty v_var )
    ::check_log( message: "one instance not found V_TVL->V_VAR[R805]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == v_tvl.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_TVL and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Transient Value Reference(V_TVL) -> Value(V_VAL)
  select one v_val related by v_tvl->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_TVL->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_tvl related by v_val->V_TVL[R801];
    if ( empty myself_v_tvl or ( myself_v_tvl != v_tvl ) )
      ::check_log( message: "same subtype not found looping back across V_TVL->V_VAL[R801]->V_TVL[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_edvs from instances of V_EDV;
for each v_edv in v_edvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_edv.Value_ID, name:"" );
  select many duplicate_v_edvs from instances of V_EDV where ( selected.Value_ID == v_edv.Value_ID );
  if ( cardinality duplicate_v_edvs != 1 )
    ::check_log( message: "uniqueness violation in V_EDV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Event Datum Value(V_EDV) -> Value(V_VAL)
  select one v_val related by v_edv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_EDV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_edv related by v_val->V_EDV[R801];
    if ( empty myself_v_edv or ( myself_v_edv != v_edv ) )
      ::check_log( message: "same subtype not found looping back across V_EDV->V_VAL[R801]->V_EDV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_isrs from instances of V_ISR;
for each v_isr in v_isrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_isr.Value_ID, name:"" );
  select many duplicate_v_isrs from instances of V_ISR where ( selected.Value_ID == v_isr.Value_ID );
  if ( cardinality duplicate_v_isrs != 1 )
    ::check_log( message: "uniqueness violation in V_ISR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R809:  Instance Set Reference(V_ISR) -> Variable(V_VAR)
  select one v_var related by v_isr->V_VAR[R809];
  if ( empty v_var )
    ::check_log( message: "one instance not found V_ISR->V_VAR[R809]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == v_isr.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_ISR and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Instance Set Reference(V_ISR) -> Value(V_VAL)
  select one v_val related by v_isr->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_ISR->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_isr related by v_val->V_ISR[R801];
    if ( empty myself_v_isr or ( myself_v_isr != v_isr ) )
      ::check_log( message: "same subtype not found looping back across V_ISR->V_VAL[R801]->V_ISR[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_trvs from instances of V_TRV;
for each v_trv in v_trvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_trv.Value_ID, name:"" );
  select many duplicate_v_trvs from instances of V_TRV where ( selected.Value_ID == v_trv.Value_ID );
  if ( cardinality duplicate_v_trvs != 1 )
    ::check_log( message: "uniqueness violation in V_TRV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R829:  Operation Value(V_TRV) -> Operation(O_TFR)
  select one o_tfr related by v_trv->O_TFR[R829];
  if ( empty o_tfr )
    ::check_log( message: "one instance not found V_TRV->O_TFR[R829]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tfr.Tfr_ID == v_trv.Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_TRV and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R830:  Operation Value(V_TRV) -> Variable(V_VAR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_trv.Var_ID ) ) )
  select one v_var related by v_trv->V_VAR[R830];
  if ( empty v_var )
    ::check_log( message: "one instance not found V_TRV->V_VAR[R830]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == v_trv.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_TRV and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R801:  Operation Value(V_TRV) -> Value(V_VAL)
  select one v_val related by v_trv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_TRV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_trv related by v_val->V_TRV[R801];
    if ( empty myself_v_trv or ( myself_v_trv != v_trv ) )
      ::check_log( message: "same subtype not found looping back across V_TRV->V_VAL[R801]->V_TRV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_unys from instances of V_UNY;
for each v_uny in v_unys
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_uny.Value_ID, name:"" );
  select many duplicate_v_unys from instances of V_UNY where ( selected.Value_ID == v_uny.Value_ID );
  if ( cardinality duplicate_v_unys != 1 )
    ::check_log( message: "uniqueness violation in V_UNY for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R804:  Unary Operation(V_UNY) -> Value(V_VAL)
  select one v_val related by v_uny->V_VAL[R804];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_UNY->V_VAL[R804]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_uny.Operand_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_UNY and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Unary Operation(V_UNY) -> Value(V_VAL)
  select one v_val related by v_uny->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_UNY->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_uny related by v_val->V_UNY[R801];
    if ( empty myself_v_uny or ( myself_v_uny != v_uny ) )
      ::check_log( message: "same subtype not found looping back across V_UNY->V_VAL[R801]->V_UNY[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_lsts from instances of V_LST;
for each v_lst in v_lsts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_lst.Value_ID, name:"" );
  select many duplicate_v_lsts from instances of V_LST where ( selected.Value_ID == v_lst.Value_ID );
  if ( cardinality duplicate_v_lsts != 1 )
    ::check_log( message: "uniqueness violation in V_LST for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Literal String(V_LST) -> Value(V_VAL)
  select one v_val related by v_lst->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_LST->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_lst related by v_val->V_LST[R801];
    if ( empty myself_v_lst or ( myself_v_lst != v_lst ) )
      ::check_log( message: "same subtype not found looping back across V_LST->V_VAL[R801]->V_LST[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_lins from instances of V_LIN;
for each v_lin in v_lins
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_lin.Value_ID, name:"" );
  select many duplicate_v_lins from instances of V_LIN where ( selected.Value_ID == v_lin.Value_ID );
  if ( cardinality duplicate_v_lins != 1 )
    ::check_log( message: "uniqueness violation in V_LIN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Literal Integer(V_LIN) -> Value(V_VAL)
  select one v_val related by v_lin->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_LIN->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_lin related by v_val->V_LIN[R801];
    if ( empty myself_v_lin or ( myself_v_lin != v_lin ) )
      ::check_log( message: "same subtype not found looping back across V_LIN->V_VAL[R801]->V_LIN[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_avls from instances of V_AVL;
for each v_avl in v_avls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_avl.Value_ID, name:"" );
  select many duplicate_v_avls from instances of V_AVL where ( selected.Value_ID == v_avl.Value_ID );
  if ( cardinality duplicate_v_avls != 1 )
    ::check_log( message: "uniqueness violation in V_AVL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R806:  Attribute Value Reference(V_AVL) -> Attribute(O_ATTR)
  select one o_attr related by v_avl->O_ATTR[R806];
  if ( empty o_attr )
    ::check_log( message: "one instance not found V_AVL->O_ATTR[R806]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_attr.Attr_ID == v_avl.Attr_ID and o_attr.Obj_ID == v_avl.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_AVL and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R807:  Attribute Value Reference(V_AVL) -> Value(V_VAL)
  select one v_val related by v_avl->V_VAL[R807];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_AVL->V_VAL[R807]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_avl.Root_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_AVL and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Attribute Value Reference(V_AVL) -> Value(V_VAL)
  select one v_val related by v_avl->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_AVL->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_avl related by v_val->V_AVL[R801];
    if ( empty myself_v_avl or ( myself_v_avl != v_avl ) )
      ::check_log( message: "same subtype not found looping back across V_AVL->V_VAL[R801]->V_AVL[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_irfs from instances of V_IRF;
for each v_irf in v_irfs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_irf.Value_ID, name:"" );
  select many duplicate_v_irfs from instances of V_IRF where ( selected.Value_ID == v_irf.Value_ID );
  if ( cardinality duplicate_v_irfs != 1 )
    ::check_log( message: "uniqueness violation in V_IRF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R808:  Instance Reference(V_IRF) -> Variable(V_VAR)
  select one v_var related by v_irf->V_VAR[R808];
  if ( empty v_var )
    ::check_log( message: "one instance not found V_IRF->V_VAR[R808]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == v_irf.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_IRF and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Instance Reference(V_IRF) -> Value(V_VAL)
  select one v_val related by v_irf->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_IRF->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_irf related by v_val->V_IRF[R801];
    if ( empty myself_v_irf or ( myself_v_irf != v_irf ) )
      ::check_log( message: "same subtype not found looping back across V_IRF->V_VAL[R801]->V_IRF[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_brvs from instances of V_BRV;
for each v_brv in v_brvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_brv.Value_ID, name:"" );
  select many duplicate_v_brvs from instances of V_BRV where ( selected.Value_ID == v_brv.Value_ID );
  if ( cardinality duplicate_v_brvs != 1 )
    ::check_log( message: "uniqueness violation in V_BRV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R828:  Bridge Value(V_BRV) -> Bridge(S_BRG)
  select one s_brg related by v_brv->S_BRG[R828];
  if ( empty s_brg )
    ::check_log( message: "one instance not found V_BRV->S_BRG[R828]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_brg.Brg_ID == v_brv.Brg_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_BRV and S_BRG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Bridge Value(V_BRV) -> Value(V_VAL)
  select one v_val related by v_brv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_BRV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_brv related by v_val->V_BRV[R801];
    if ( empty myself_v_brv or ( myself_v_brv != v_brv ) )
      ::check_log( message: "same subtype not found looping back across V_BRV->V_VAL[R801]->V_BRV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_vars from instances of V_VAR;
for each v_var in v_vars
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Var_ID", trace_id:v_var.Var_ID, name:v_var.Name );
  select many duplicate_v_vars from instances of V_VAR where ( selected.Var_ID == v_var.Var_ID );
  if ( cardinality duplicate_v_vars != 1 )
    ::check_log( message: "uniqueness violation in V_VAR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R823:  Variable(V_VAR) -> Block(ACT_BLK)
  select one act_blk related by v_var->ACT_BLK[R823];
  if ( empty act_blk )
    ::check_log( message: "one instance not found V_VAR->ACT_BLK[R823]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == v_var.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_VAR and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R848:  Variable(V_VAR) -> Data Type(S_DT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_var.DT_ID ) ) )
  select one s_dt related by v_var->S_DT[R848];
  if ( empty s_dt )
    ::check_log( message: "one instance not found V_VAR->S_DT[R848]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == v_var.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_VAR and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R814:  supertype Variable(V_VAR)
  subtype_count = 0;
  select one v_int related by v_var->V_INT[R814];
  if ( not_empty v_int )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_ins related by v_var->V_INS[R814];
  if ( not_empty v_ins )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one v_trn related by v_var->V_TRN[R814];
  if ( not_empty v_trn )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from V_VAR across R814", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from V_VAR across R814", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_ints from instances of V_INT;
for each v_int in v_ints
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Var_ID", trace_id:v_int.Var_ID, name:"" );
  select many duplicate_v_ints from instances of V_INT where ( selected.Var_ID == v_int.Var_ID );
  if ( cardinality duplicate_v_ints != 1 )
    ::check_log( message: "uniqueness violation in V_INT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R818:  Instance Handle(V_INT) -> Model Class(O_OBJ)
  select one o_obj related by v_int->O_OBJ[R818];
  if ( empty o_obj )
    ::check_log( message: "one instance not found V_INT->O_OBJ[R818]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == v_int.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_INT and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R814:  Instance Handle(V_INT) -> Variable(V_VAR)
  select one v_var related by v_int->V_VAR[R814];
  if ( empty v_var )
    ::check_log( message: "supertype not found across V_INT->V_VAR[R814]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_int related by v_var->V_INT[R814];
    if ( empty myself_v_int or ( myself_v_int != v_int ) )
      ::check_log( message: "same subtype not found looping back across V_INT->V_VAR[R814]->V_INT[R814]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_inss from instances of V_INS;
for each v_ins in v_inss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Var_ID", trace_id:v_ins.Var_ID, name:"" );
  select many duplicate_v_inss from instances of V_INS where ( selected.Var_ID == v_ins.Var_ID );
  if ( cardinality duplicate_v_inss != 1 )
    ::check_log( message: "uniqueness violation in V_INS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R819:  Instance Set(V_INS) -> Model Class(O_OBJ)
  select one o_obj related by v_ins->O_OBJ[R819];
  if ( empty o_obj )
    ::check_log( message: "one instance not found V_INS->O_OBJ[R819]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == v_ins.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_INS and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R814:  Instance Set(V_INS) -> Variable(V_VAR)
  select one v_var related by v_ins->V_VAR[R814];
  if ( empty v_var )
    ::check_log( message: "supertype not found across V_INS->V_VAR[R814]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_ins related by v_var->V_INS[R814];
    if ( empty myself_v_ins or ( myself_v_ins != v_ins ) )
      ::check_log( message: "same subtype not found looping back across V_INS->V_VAR[R814]->V_INS[R814]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_trns from instances of V_TRN;
for each v_trn in v_trns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Var_ID", trace_id:v_trn.Var_ID, name:"" );
  select many duplicate_v_trns from instances of V_TRN where ( selected.Var_ID == v_trn.Var_ID );
  if ( cardinality duplicate_v_trns != 1 )
    ::check_log( message: "uniqueness violation in V_TRN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R821:  Transient Var(V_TRN) -> Data Type(S_DT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_trn.DT_ID ) ) )
  select one s_dt related by v_trn->S_DT[R821];
  if ( empty s_dt )
    ::check_log( message: "one instance not found V_TRN->S_DT[R821]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == v_trn.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_TRN and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R814:  Transient Var(V_TRN) -> Variable(V_VAR)
  select one v_var related by v_trn->V_VAR[R814];
  if ( empty v_var )
    ::check_log( message: "supertype not found across V_TRN->V_VAR[R814]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_trn related by v_var->V_TRN[R814];
    if ( empty myself_v_trn or ( myself_v_trn != v_trn ) )
      ::check_log( message: "same subtype not found looping back across V_TRN->V_VAR[R814]->V_TRN[R814]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_slrs from instances of V_SLR;
for each v_slr in v_slrs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_slr.Value_ID, name:"" );
  select many duplicate_v_slrs from instances of V_SLR where ( selected.Value_ID == v_slr.Value_ID );
  if ( cardinality duplicate_v_slrs != 1 )
    ::check_log( message: "uniqueness violation in V_SLR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R825:  Selected Reference(V_SLR) -> Operation Value(V_TRV)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_slr.Op_Value_ID ) ) )
  select one v_trv related by v_slr->V_TRV[R825];
  if ( empty v_trv )
    ::check_log( message: "one instance not found V_SLR->V_TRV[R825]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_trv.Value_ID == v_slr.Op_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_SLR and V_TRV", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R812:  Selected Reference(V_SLR) -> Attribute(O_ATTR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_slr.Attr_ID ) and ::is_null_id( id:v_slr.Obj_ID ) ) )
  select one o_attr related by v_slr->O_ATTR[R812];
  if ( empty o_attr )
    ::check_log( message: "one instance not found V_SLR->O_ATTR[R812]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_attr.Attr_ID == v_slr.Attr_ID and o_attr.Obj_ID == v_slr.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_SLR and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R801:  Selected Reference(V_SLR) -> Value(V_VAL)
  select one v_val related by v_slr->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_SLR->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_slr related by v_val->V_SLR[R801];
    if ( empty myself_v_slr or ( myself_v_slr != v_slr ) )
      ::check_log( message: "same subtype not found looping back across V_SLR->V_VAL[R801]->V_SLR[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_pvls from instances of V_PVL;
for each v_pvl in v_pvls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_pvl.Value_ID, name:"" );
  select many duplicate_v_pvls from instances of V_PVL where ( selected.Value_ID == v_pvl.Value_ID );
  if ( cardinality duplicate_v_pvls != 1 )
    ::check_log( message: "uniqueness violation in V_PVL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R831:  Parameter Value(V_PVL) -> Bridge Parameter(S_BPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_pvl.BParm_ID ) ) )
  select one s_bparm related by v_pvl->S_BPARM[R831];
  if ( empty s_bparm )
    ::check_log( message: "one instance not found V_PVL->S_BPARM[R831]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_bparm.BParm_ID == v_pvl.BParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_PVL and S_BPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R832:  Parameter Value(V_PVL) -> Function Parameter(S_SPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_pvl.SParm_ID ) ) )
  select one s_sparm related by v_pvl->S_SPARM[R832];
  if ( empty s_sparm )
    ::check_log( message: "one instance not found V_PVL->S_SPARM[R832]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sparm.SParm_ID == v_pvl.SParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_PVL and S_SPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R833:  Parameter Value(V_PVL) -> Operation Parameter(O_TPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_pvl.TParm_ID ) ) )
  select one o_tparm related by v_pvl->O_TPARM[R833];
  if ( empty o_tparm )
    ::check_log( message: "one instance not found V_PVL->O_TPARM[R833]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tparm.TParm_ID == v_pvl.TParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_PVL and O_TPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R843:  Parameter Value(V_PVL) -> Property Parameter(C_PP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_pvl.PP_Id ) ) )
  select one c_pp related by v_pvl->C_PP[R843];
  if ( empty c_pp )
    ::check_log( message: "one instance not found V_PVL->C_PP[R843]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_pp.PP_Id == v_pvl.PP_Id ) )
      ::check_log( message: "referentials do not match identifiers between V_PVL and C_PP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R801:  Parameter Value(V_PVL) -> Value(V_VAL)
  select one v_val related by v_pvl->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_PVL->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_pvl related by v_val->V_PVL[R801];
    if ( empty myself_v_pvl or ( myself_v_pvl != v_pvl ) )
      ::check_log( message: "same subtype not found looping back across V_PVL->V_VAL[R801]->V_PVL[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_fnvs from instances of V_FNV;
for each v_fnv in v_fnvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_fnv.Value_ID, name:"" );
  select many duplicate_v_fnvs from instances of V_FNV where ( selected.Value_ID == v_fnv.Value_ID );
  if ( cardinality duplicate_v_fnvs != 1 )
    ::check_log( message: "uniqueness violation in V_FNV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R827:  Function Value(V_FNV) -> Function(S_SYNC)
  select one s_sync related by v_fnv->S_SYNC[R827];
  if ( empty s_sync )
    ::check_log( message: "one instance not found V_FNV->S_SYNC[R827]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sync.Sync_ID == v_fnv.Sync_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_FNV and S_SYNC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Function Value(V_FNV) -> Value(V_VAL)
  select one v_val related by v_fnv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_FNV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_fnv related by v_val->V_FNV[R801];
    if ( empty myself_v_fnv or ( myself_v_fnv != v_fnv ) )
      ::check_log( message: "same subtype not found looping back across V_FNV->V_VAL[R801]->V_FNV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_lens from instances of V_LEN;
for each v_len in v_lens
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_len.Value_ID, name:"" );
  select many duplicate_v_lens from instances of V_LEN where ( selected.Value_ID == v_len.Value_ID );
  if ( cardinality duplicate_v_lens != 1 )
    ::check_log( message: "uniqueness violation in V_LEN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R824:  Literal Enumerator(V_LEN) -> Enumerator(S_ENUM)
  select one s_enum related by v_len->S_ENUM[R824];
  if ( empty s_enum )
    ::check_log( message: "one instance not found V_LEN->S_ENUM[R824]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_enum.Enum_ID == v_len.Enum_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_LEN and S_ENUM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Literal Enumerator(V_LEN) -> Value(V_VAL)
  select one v_val related by v_len->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_LEN->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_len related by v_val->V_LEN[R801];
    if ( empty myself_v_len or ( myself_v_len != v_len ) )
      ::check_log( message: "same subtype not found looping back across V_LEN->V_VAL[R801]->V_LEN[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_locs from instances of V_LOC;
for each v_loc in v_locs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:v_loc.Id, name:"" );
  select many duplicate_v_locs from instances of V_LOC where ( selected.Id == v_loc.Id );
  if ( cardinality duplicate_v_locs != 1 )
    ::check_log( message: "uniqueness violation in V_LOC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R835:  Variable Location(V_LOC) -> Variable(V_VAR)
  select one v_var related by v_loc->V_VAR[R835];
  if ( empty v_var )
    ::check_log( message: "one instance not found V_LOC->V_VAR[R835]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_var.Var_ID == v_loc.Var_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_LOC and V_VAR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_mvls from instances of V_MVL;
for each v_mvl in v_mvls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_mvl.Value_ID, name:"" );
  select many duplicate_v_mvls from instances of V_MVL where ( selected.Value_ID == v_mvl.Value_ID );
  if ( cardinality duplicate_v_mvls != 1 )
    ::check_log( message: "uniqueness violation in V_MVL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R836:  Member Value Reference(V_MVL) -> Structure Member(S_MBR)
  select one s_mbr related by v_mvl->S_MBR[R836];
  if ( empty s_mbr )
    ::check_log( message: "one instance not found V_MVL->S_MBR[R836]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_mbr.Member_ID == v_mvl.Member_ID and s_mbr.Parent_DT_DT_ID == v_mvl.DT_DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_MVL and S_MBR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R837:  Member Value Reference(V_MVL) -> Value(V_VAL)
  select one v_val related by v_mvl->V_VAL[R837];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_MVL->V_VAL[R837]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_mvl.Root_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_MVL and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Member Value Reference(V_MVL) -> Value(V_VAL)
  select one v_val related by v_mvl->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_MVL->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_mvl related by v_val->V_MVL[R801];
    if ( empty myself_v_mvl or ( myself_v_mvl != v_mvl ) )
      ::check_log( message: "same subtype not found looping back across V_MVL->V_VAL[R801]->V_MVL[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_aers from instances of V_AER;
for each v_aer in v_aers
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_aer.Value_ID, name:"" );
  select many duplicate_v_aers from instances of V_AER where ( selected.Value_ID == v_aer.Value_ID );
  if ( cardinality duplicate_v_aers != 1 )
    ::check_log( message: "uniqueness violation in V_AER for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R838:  Array Element Reference(V_AER) -> Value(V_VAL)
  select one v_val related by v_aer->V_VAL[R838];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_AER->V_VAL[R838]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_aer.Root_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_AER and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R839:  Array Element Reference(V_AER) -> Value(V_VAL)
  select one v_val related by v_aer->V_VAL[R839];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_AER->V_VAL[R839]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_aer.Index_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_AER and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Array Element Reference(V_AER) -> Value(V_VAL)
  select one v_val related by v_aer->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_AER->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_aer related by v_val->V_AER[R801];
    if ( empty myself_v_aer or ( myself_v_aer != v_aer ) )
      ::check_log( message: "same subtype not found looping back across V_AER->V_VAL[R801]->V_AER[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_alvs from instances of V_ALV;
for each v_alv in v_alvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_alv.Value_ID, name:"" );
  select many duplicate_v_alvs from instances of V_ALV where ( selected.Value_ID == v_alv.Value_ID );
  if ( cardinality duplicate_v_alvs != 1 )
    ::check_log( message: "uniqueness violation in V_ALV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R840:  Array Length Value(V_ALV) -> Value(V_VAL)
  select one v_val related by v_alv->V_VAL[R840];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_ALV->V_VAL[R840]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_alv.Array_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_ALV and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Array Length Value(V_ALV) -> Value(V_VAL)
  select one v_val related by v_alv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_ALV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_alv related by v_val->V_ALV[R801];
    if ( empty myself_v_alv or ( myself_v_alv != v_alv ) )
      ::check_log( message: "same subtype not found looping back across V_ALV->V_VAL[R801]->V_ALV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_msvs from instances of V_MSV;
for each v_msv in v_msvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_msv.Value_ID, name:"" );
  select many duplicate_v_msvs from instances of V_MSV where ( selected.Value_ID == v_msv.Value_ID );
  if ( cardinality duplicate_v_msvs != 1 )
    ::check_log( message: "uniqueness violation in V_MSV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R841:  Message Value(V_MSV) -> Provided Executable Property(SPR_PEP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_msv.PEP_Id ) ) )
  select one spr_pep related by v_msv->SPR_PEP[R841];
  if ( empty spr_pep )
    ::check_log( message: "one instance not found V_MSV->SPR_PEP[R841]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_pep.Id == v_msv.PEP_Id ) )
      ::check_log( message: "referentials do not match identifiers between V_MSV and SPR_PEP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R845:  Message Value(V_MSV) -> Required Executable Property(SPR_REP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_msv.REP_Id ) ) )
  select one spr_rep related by v_msv->SPR_REP[R845];
  if ( empty spr_rep )
    ::check_log( message: "one instance not found V_MSV->SPR_REP[R845]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( spr_rep.Id == v_msv.REP_Id ) )
      ::check_log( message: "referentials do not match identifiers between V_MSV and SPR_REP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R851:  Message Value(V_MSV) -> Value(V_VAL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_msv.Target_Value_ID ) ) )
  select one v_val related by v_msv->V_VAL[R851];
  if ( empty v_val )
    ::check_log( message: "one instance not found V_MSV->V_VAL[R851]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == v_msv.Target_Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_MSV and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R801:  Message Value(V_MSV) -> Value(V_VAL)
  select one v_val related by v_msv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_MSV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_msv related by v_val->V_MSV[R801];
    if ( empty myself_v_msv or ( myself_v_msv != v_msv ) )
      ::check_log( message: "same subtype not found looping back across V_MSV->V_VAL[R801]->V_MSV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_eprs from instances of V_EPR;
for each v_epr in v_eprs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_epr.Value_ID, name:"" );
  select many duplicate_v_eprs from instances of V_EPR where ( selected.Value_ID == v_epr.Value_ID and selected.SM_ID == v_epr.SM_ID and selected.SMedi_ID == v_epr.SMedi_ID and selected.PP_Id == v_epr.PP_Id );
  if ( cardinality duplicate_v_eprs != 1 )
    ::check_log( message: "uniqueness violation in V_EPR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R834:  Event Parameter Reference(V_EPR) -> Event Datum Value(V_EDV)
  select one v_edv related by v_epr->V_EDV[R834];
  if ( empty v_edv )
    ::check_log( message: "one instance not found V_EPR->V_EDV[R834]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_edv.Value_ID == v_epr.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_EPR and V_EDV", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R846:  Event Parameter Reference(V_EPR) -> State Machine Event Data Item(SM_EVTDI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_epr.SM_ID ) and ::is_null_id( id:v_epr.SMedi_ID ) ) )
  select one sm_evtdi related by v_epr->SM_EVTDI[R846];
  if ( empty sm_evtdi )
    ::check_log( message: "one instance not found V_EPR->SM_EVTDI[R846]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evtdi.SM_ID == v_epr.SM_ID and sm_evtdi.SMedi_ID == v_epr.SMedi_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_EPR and SM_EVTDI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R847:  Event Parameter Reference(V_EPR) -> Property Parameter(C_PP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:v_epr.PP_Id ) ) )
  select one c_pp related by v_epr->C_PP[R847];
  if ( empty c_pp )
    ::check_log( message: "one instance not found V_EPR->C_PP[R847]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_pp.PP_Id == v_epr.PP_Id ) )
      ::check_log( message: "referentials do not match identifiers between V_EPR and C_PP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many v_scvs from instances of V_SCV;
for each v_scv in v_scvs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Value_ID", trace_id:v_scv.Value_ID, name:"" );
  select many duplicate_v_scvs from instances of V_SCV where ( selected.Value_ID == v_scv.Value_ID );
  if ( cardinality duplicate_v_scvs != 1 )
    ::check_log( message: "uniqueness violation in V_SCV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R850:  Symbolic Constant Value(V_SCV) -> Symbolic Constant(CNST_SYC)
  select one cnst_syc related by v_scv->CNST_SYC[R850];
  if ( empty cnst_syc )
    ::check_log( message: "one instance not found V_SCV->CNST_SYC[R850]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( cnst_syc.Const_ID == v_scv.Const_ID ) )
      ::check_log( message: "referentials do not match identifiers between V_SCV and CNST_SYC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R801:  Symbolic Constant Value(V_SCV) -> Value(V_VAL)
  select one v_val related by v_scv->V_VAL[R801];
  if ( empty v_val )
    ::check_log( message: "supertype not found across V_SCV->V_VAL[R801]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_v_scv related by v_val->V_SCV[R801];
    if ( empty myself_v_scv or ( myself_v_scv != v_scv ) )
      ::check_log( message: "same subtype not found looping back across V_SCV->V_VAL[R801]->V_SCV[R801]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_lss from instances of SQ_LS;
for each sq_ls in sq_lss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_ls.Part_ID, name:"" );
  select many duplicate_sq_lss from instances of SQ_LS where ( selected.Part_ID == sq_ls.Part_ID );
  if ( cardinality duplicate_sq_lss != 1 )
    ::check_log( message: "uniqueness violation in SQ_LS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R940:  Lifespan(SQ_LS) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_ls->SQ_P[R940];
  if ( empty sq_p )
    ::check_log( message: "one instance not found SQ_LS->SQ_P[R940]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == sq_ls.Source_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_LS and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R930:  Lifespan(SQ_LS) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_ls->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_LS->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_ls related by sq_p->SQ_LS[R930];
    if ( empty myself_sq_ls or ( myself_sq_ls != sq_ls ) )
      ::check_log( message: "same subtype not found looping back across SQ_LS->SQ_P[R930]->SQ_LS[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_cips from instances of SQ_CIP;
for each sq_cip in sq_cips
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_cip.Part_ID, name:sq_cip.Name );
  select many duplicate_sq_cips from instances of SQ_CIP where ( selected.Part_ID == sq_cip.Part_ID );
  if ( cardinality duplicate_sq_cips != 1 )
    ::check_log( message: "uniqueness violation in SQ_CIP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R934:  Class Instance Participant(SQ_CIP) -> Model Class(O_OBJ)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_cip.Obj_ID ) ) )
  select one o_obj related by sq_cip->O_OBJ[R934];
  if ( empty o_obj )
    ::check_log( message: "one instance not found SQ_CIP->O_OBJ[R934]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == sq_cip.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_CIP and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R930:  Class Instance Participant(SQ_CIP) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_cip->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_CIP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_cip related by sq_p->SQ_CIP[R930];
    if ( empty myself_sq_cip or ( myself_sq_cip != sq_cip ) )
      ::check_log( message: "same subtype not found looping back across SQ_CIP->SQ_P[R930]->SQ_CIP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_cops from instances of SQ_COP;
for each sq_cop in sq_cops
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_cop.Part_ID, name:"" );
  select many duplicate_sq_cops from instances of SQ_COP where ( selected.Part_ID == sq_cop.Part_ID );
  if ( cardinality duplicate_sq_cops != 1 )
    ::check_log( message: "uniqueness violation in SQ_COP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R955:  Component Participant(SQ_COP) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_cop.Component_Id ) ) )
  select one c_c related by sq_cop->C_C[R955];
  if ( empty c_c )
    ::check_log( message: "one instance not found SQ_COP->C_C[R955]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == sq_cop.Component_Id ) )
      ::check_log( message: "referentials do not match identifiers between SQ_COP and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R930:  Component Participant(SQ_COP) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_cop->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_COP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_cop related by sq_p->SQ_COP[R930];
    if ( empty myself_sq_cop or ( myself_sq_cop != sq_cop ) )
      ::check_log( message: "same subtype not found looping back across SQ_COP->SQ_P[R930]->SQ_COP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_tms from instances of SQ_TM;
for each sq_tm in sq_tms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Mark_ID", trace_id:sq_tm.Mark_ID, name:sq_tm.Name );
  select many duplicate_sq_tms from instances of SQ_TM where ( selected.Mark_ID == sq_tm.Mark_ID );
  if ( cardinality duplicate_sq_tms != 1 )
    ::check_log( message: "uniqueness violation in SQ_TM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R931:  Timing Mark(SQ_TM) -> Lifespan(SQ_LS)
  select one sq_ls related by sq_tm->SQ_LS[R931];
  if ( empty sq_ls )
    ::check_log( message: "one instance not found SQ_TM->SQ_LS[R931]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_ls.Part_ID == sq_tm.Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_TM and SQ_LS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_tss from instances of SQ_TS;
for each sq_ts in sq_tss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Span_ID", trace_id:sq_ts.Span_ID, name:sq_ts.Name );
  select many duplicate_sq_tss from instances of SQ_TS where ( selected.Span_ID == sq_ts.Span_ID );
  if ( cardinality duplicate_sq_tss != 1 )
    ::check_log( message: "uniqueness violation in SQ_TS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R941:  Time Span(SQ_TS) -> Timing Mark(SQ_TM)
  select one sq_tm related by sq_ts->SQ_TM[R941];
  if ( empty sq_tm )
    ::check_log( message: "one instance not found SQ_TS->SQ_TM[R941]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_tm.Mark_ID == sq_ts.Prev_Mark_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_TS and SQ_TM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R942:  Time Span(SQ_TS) -> Timing Mark(SQ_TM)
  select one sq_tm related by sq_ts->SQ_TM[R942];
  if ( empty sq_tm )
    ::check_log( message: "one instance not found SQ_TS->SQ_TM[R942]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_tm.Mark_ID == sq_ts.Mark_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_TS and SQ_TM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_cps from instances of SQ_CP;
for each sq_cp in sq_cps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_cp.Part_ID, name:"" );
  select many duplicate_sq_cps from instances of SQ_CP where ( selected.Part_ID == sq_cp.Part_ID );
  if ( cardinality duplicate_sq_cps != 1 )
    ::check_log( message: "uniqueness violation in SQ_CP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R939:  Class Participant(SQ_CP) -> Model Class(O_OBJ)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_cp.Obj_ID ) ) )
  select one o_obj related by sq_cp->O_OBJ[R939];
  if ( empty o_obj )
    ::check_log( message: "one instance not found SQ_CP->O_OBJ[R939]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_obj.Obj_ID == sq_cp.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_CP and O_OBJ", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R930:  Class Participant(SQ_CP) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_cp->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_CP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_cp related by sq_p->SQ_CP[R930];
    if ( empty myself_sq_cp or ( myself_sq_cp != sq_cp ) )
      ::check_log( message: "same subtype not found looping back across SQ_CP->SQ_P[R930]->SQ_CP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_ps from instances of SQ_P;
for each sq_p in sq_ps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_p.Part_ID, name:"" );
  select many duplicate_sq_ps from instances of SQ_P where ( selected.Part_ID == sq_p.Part_ID );
  if ( cardinality duplicate_sq_ps != 1 )
    ::check_log( message: "uniqueness violation in SQ_P for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Interaction Participant(SQ_P) -> Packageable Element(PE_PE)
  select one pe_pe related by sq_p->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across SQ_P->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_p related by pe_pe->SQ_P[R8001];
    if ( empty myself_sq_p or ( myself_sq_p != sq_p ) )
      ::check_log( message: "same subtype not found looping back across SQ_P->PE_PE[R8001]->SQ_P[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R930:  supertype Interaction Participant(SQ_P)
  subtype_count = 0;
  select one sq_cip related by sq_p->SQ_CIP[R930];
  if ( not_empty sq_cip )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_eep related by sq_p->SQ_EEP[R930];
  if ( not_empty sq_eep )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_cp related by sq_p->SQ_CP[R930];
  if ( not_empty sq_cp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_ap related by sq_p->SQ_AP[R930];
  if ( not_empty sq_ap )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_ls related by sq_p->SQ_LS[R930];
  if ( not_empty sq_ls )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one ia_ucp related by sq_p->IA_UCP[R930];
  if ( not_empty ia_ucp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_cop related by sq_p->SQ_COP[R930];
  if ( not_empty sq_cop )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_pp related by sq_p->SQ_PP[R930];
  if ( not_empty sq_pp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SQ_P across R930", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SQ_P across R930", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_eeps from instances of SQ_EEP;
for each sq_eep in sq_eeps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_eep.Part_ID, name:"" );
  select many duplicate_sq_eeps from instances of SQ_EEP where ( selected.Part_ID == sq_eep.Part_ID );
  if ( cardinality duplicate_sq_eeps != 1 )
    ::check_log( message: "uniqueness violation in SQ_EEP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R933:  External Entity Participant(SQ_EEP) -> External Entity(S_EE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_eep.EE_ID ) ) )
  select one s_ee related by sq_eep->S_EE[R933];
  if ( empty s_ee )
    ::check_log( message: "one instance not found SQ_EEP->S_EE[R933]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_ee.EE_ID == sq_eep.EE_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_EEP and S_EE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R930:  External Entity Participant(SQ_EEP) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_eep->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_EEP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_eep related by sq_p->SQ_EEP[R930];
    if ( empty myself_sq_eep or ( myself_sq_eep != sq_eep ) )
      ::check_log( message: "same subtype not found looping back across SQ_EEP->SQ_P[R930]->SQ_EEP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_cpas from instances of SQ_CPA;
for each sq_cpa in sq_cpas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Ia_ID", trace_id:sq_cpa.Ia_ID, name:sq_cpa.Name );
  select many duplicate_sq_cpas from instances of SQ_CPA where ( selected.Ia_ID == sq_cpa.Ia_ID );
  if ( cardinality duplicate_sq_cpas != 1 )
    ::check_log( message: "uniqueness violation in SQ_CPA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R935:  Class Participant Attribute(SQ_CPA) -> Class Participant(SQ_CP)
  select one sq_cp related by sq_cpa->SQ_CP[R935];
  if ( empty sq_cp )
    ::check_log( message: "one instance not found SQ_CPA->SQ_CP[R935]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_cp.Part_ID == sq_cpa.Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_CPA and SQ_CP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R947:  supertype Class Participant Attribute(SQ_CPA)
  subtype_count = 0;
  select one sq_ia related by sq_cpa->SQ_IA[R947];
  if ( not_empty sq_ia )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_fa related by sq_cpa->SQ_FA[R947];
  if ( not_empty sq_fa )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SQ_CPA across R947", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SQ_CPA across R947", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_avs from instances of SQ_AV;
for each sq_av in sq_avs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Av_ID", trace_id:sq_av.Av_ID, name:"" );
  select many duplicate_sq_avs from instances of SQ_AV where ( selected.Av_ID == sq_av.Av_ID );
  if ( cardinality duplicate_sq_avs != 1 )
    ::check_log( message: "uniqueness violation in SQ_AV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R936:  Instance Attribute Value(SQ_AV) -> Class Instance Participant(SQ_CIP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_av.Informal_Part_ID ) ) )
  select one sq_cip related by sq_av->SQ_CIP[R936];
  if ( empty sq_cip )
    ::check_log( message: "one instance not found SQ_AV->SQ_CIP[R936]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_cip.Part_ID == sq_av.Informal_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_AV and SQ_CIP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R937:  Instance Attribute Value(SQ_AV) -> Class Instance Participant(SQ_CIP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_av.Formal_Part_ID ) ) )
  select one sq_cip related by sq_av->SQ_CIP[R937];
  if ( empty sq_cip )
    ::check_log( message: "one instance not found SQ_AV->SQ_CIP[R937]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_cip.Part_ID == sq_av.Formal_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_AV and SQ_CIP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R938:  Instance Attribute Value(SQ_AV) -> Attribute(O_ATTR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_av.Attr_ID ) and ::is_null_id( id:sq_av.Obj_ID ) ) )
  select one o_attr related by sq_av->O_ATTR[R938];
  if ( empty o_attr )
    ::check_log( message: "one instance not found SQ_AV->O_ATTR[R938]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_attr.Attr_ID == sq_av.Attr_ID and o_attr.Obj_ID == sq_av.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_AV and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R948:  supertype Instance Attribute Value(SQ_AV)
  subtype_count = 0;
  select one sq_iav related by sq_av->SQ_IAV[R948];
  if ( not_empty sq_iav )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_fav related by sq_av->SQ_FAV[R948];
  if ( not_empty sq_fav )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SQ_AV across R948", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SQ_AV across R948", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_aps from instances of SQ_AP;
for each sq_ap in sq_aps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_ap.Part_ID, name:sq_ap.Name );
  select many duplicate_sq_aps from instances of SQ_AP where ( selected.Part_ID == sq_ap.Part_ID );
  if ( cardinality duplicate_sq_aps != 1 )
    ::check_log( message: "uniqueness violation in SQ_AP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R949:  Actor Participant(SQ_AP) -> Lifespan(SQ_LS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_ap.LS_Part_ID ) ) )
  select one sq_ls related by sq_ap->SQ_LS[R949];
  if ( empty sq_ls )
    ::check_log( message: "one instance not found SQ_AP->SQ_LS[R949]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_ls.Part_ID == sq_ap.LS_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_AP and SQ_LS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R930:  Actor Participant(SQ_AP) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_ap->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_AP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_ap related by sq_p->SQ_AP[R930];
    if ( empty myself_sq_ap or ( myself_sq_ap != sq_ap ) )
      ::check_log( message: "same subtype not found looping back across SQ_AP->SQ_P[R930]->SQ_AP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_ias from instances of SQ_IA;
for each sq_ia in sq_ias
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Ia_ID", trace_id:sq_ia.Ia_ID, name:"" );
  select many duplicate_sq_ias from instances of SQ_IA where ( selected.Ia_ID == sq_ia.Ia_ID );
  if ( cardinality duplicate_sq_ias != 1 )
    ::check_log( message: "uniqueness violation in SQ_IA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R947:  Informal Attribute(SQ_IA) -> Class Participant Attribute(SQ_CPA)
  select one sq_cpa related by sq_ia->SQ_CPA[R947];
  if ( empty sq_cpa )
    ::check_log( message: "supertype not found across SQ_IA->SQ_CPA[R947]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_ia related by sq_cpa->SQ_IA[R947];
    if ( empty myself_sq_ia or ( myself_sq_ia != sq_ia ) )
      ::check_log( message: "same subtype not found looping back across SQ_IA->SQ_CPA[R947]->SQ_IA[R947]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_fas from instances of SQ_FA;
for each sq_fa in sq_fas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Ia_ID", trace_id:sq_fa.Ia_ID, name:"" );
  select many duplicate_sq_fas from instances of SQ_FA where ( selected.Ia_ID == sq_fa.Ia_ID );
  if ( cardinality duplicate_sq_fas != 1 )
    ::check_log( message: "uniqueness violation in SQ_FA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R947:  Formal Attribute(SQ_FA) -> Class Participant Attribute(SQ_CPA)
  select one sq_cpa related by sq_fa->SQ_CPA[R947];
  if ( empty sq_cpa )
    ::check_log( message: "supertype not found across SQ_FA->SQ_CPA[R947]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_fa related by sq_cpa->SQ_FA[R947];
    if ( empty myself_sq_fa or ( myself_sq_fa != sq_fa ) )
      ::check_log( message: "same subtype not found looping back across SQ_FA->SQ_CPA[R947]->SQ_FA[R947]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_favs from instances of SQ_FAV;
for each sq_fav in sq_favs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Av_ID", trace_id:sq_fav.Av_ID, name:"" );
  select many duplicate_sq_favs from instances of SQ_FAV where ( selected.Av_ID == sq_fav.Av_ID );
  if ( cardinality duplicate_sq_favs != 1 )
    ::check_log( message: "uniqueness violation in SQ_FAV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R948:  Formal Attribute Value(SQ_FAV) -> Instance Attribute Value(SQ_AV)
  select one sq_av related by sq_fav->SQ_AV[R948];
  if ( empty sq_av )
    ::check_log( message: "supertype not found across SQ_FAV->SQ_AV[R948]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_fav related by sq_av->SQ_FAV[R948];
    if ( empty myself_sq_fav or ( myself_sq_fav != sq_fav ) )
      ::check_log( message: "same subtype not found looping back across SQ_FAV->SQ_AV[R948]->SQ_FAV[R948]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_iavs from instances of SQ_IAV;
for each sq_iav in sq_iavs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Av_ID", trace_id:sq_iav.Av_ID, name:"" );
  select many duplicate_sq_iavs from instances of SQ_IAV where ( selected.Av_ID == sq_iav.Av_ID );
  if ( cardinality duplicate_sq_iavs != 1 )
    ::check_log( message: "uniqueness violation in SQ_IAV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R948:  Informal Attribute Value(SQ_IAV) -> Instance Attribute Value(SQ_AV)
  select one sq_av related by sq_iav->SQ_AV[R948];
  if ( empty sq_av )
    ::check_log( message: "supertype not found across SQ_IAV->SQ_AV[R948]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_iav related by sq_av->SQ_IAV[R948];
    if ( empty myself_sq_iav or ( myself_sq_iav != sq_iav ) )
      ::check_log( message: "same subtype not found looping back across SQ_IAV->SQ_AV[R948]->SQ_IAV[R948]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many ia_ucps from instances of IA_UCP;
for each ia_ucp in ia_ucps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:ia_ucp.Part_ID, name:ia_ucp.Name );
  select many duplicate_ia_ucps from instances of IA_UCP where ( selected.Part_ID == ia_ucp.Part_ID );
  if ( cardinality duplicate_ia_ucps != 1 )
    ::check_log( message: "uniqueness violation in IA_UCP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R930:  Use Case Participant(IA_UCP) -> Interaction Participant(SQ_P)
  select one sq_p related by ia_ucp->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across IA_UCP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_ia_ucp related by sq_p->IA_UCP[R930];
    if ( empty myself_ia_ucp or ( myself_ia_ucp != ia_ucp ) )
      ::check_log( message: "same subtype not found looping back across IA_UCP->SQ_P[R930]->IA_UCP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many sq_pps from instances of SQ_PP;
for each sq_pp in sq_pps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Part_ID", trace_id:sq_pp.Part_ID, name:"" );
  select many duplicate_sq_pps from instances of SQ_PP where ( selected.Part_ID == sq_pp.Part_ID );
  if ( cardinality duplicate_sq_pps != 1 )
    ::check_log( message: "uniqueness violation in SQ_PP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R956:  Package Participant(SQ_PP) -> Package(EP_PKG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:sq_pp.Package_ID ) ) )
  select one ep_pkg related by sq_pp->EP_PKG[R956];
  if ( empty ep_pkg )
    ::check_log( message: "one instance not found SQ_PP->EP_PKG[R956]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( ep_pkg.Package_ID == sq_pp.Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between SQ_PP and EP_PKG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R930:  Package Participant(SQ_PP) -> Interaction Participant(SQ_P)
  select one sq_p related by sq_pp->SQ_P[R930];
  if ( empty sq_p )
    ::check_log( message: "supertype not found across SQ_PP->SQ_P[R930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_sq_pp related by sq_p->SQ_PP[R930];
    if ( empty myself_sq_pp or ( myself_sq_pp != sq_pp ) )
      ::check_log( message: "same subtype not found looping back across SQ_PP->SQ_P[R930]->SQ_PP[R930]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_ms from instances of MSG_M;
for each msg_m in msg_ms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_m.Msg_ID, name:"" );
  select many duplicate_msg_ms from instances of MSG_M where ( selected.Msg_ID == msg_m.Msg_ID );
  if ( cardinality duplicate_msg_ms != 1 )
    ::check_log( message: "uniqueness violation in MSG_M for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1007:  Message(MSG_M) -> Interaction Participant(SQ_P)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_m.Sender_Part_ID ) ) )
  select one sq_p related by msg_m->SQ_P[R1007];
  if ( empty sq_p )
    ::check_log( message: "one instance not found MSG_M->SQ_P[R1007]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == msg_m.Sender_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_M and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R1008:  Message(MSG_M) -> Interaction Participant(SQ_P)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_m.Receiver_Part_ID ) ) )
  select one sq_p related by msg_m->SQ_P[R1008];
  if ( empty sq_p )
    ::check_log( message: "one instance not found MSG_M->SQ_P[R1008]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == msg_m.Receiver_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_M and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R8001:  Message(MSG_M) -> Packageable Element(PE_PE)
  select one pe_pe related by msg_m->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across MSG_M->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_m related by pe_pe->MSG_M[R8001];
    if ( empty myself_msg_m or ( myself_msg_m != msg_m ) )
      ::check_log( message: "same subtype not found looping back across MSG_M->PE_PE[R8001]->MSG_M[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1018:  supertype Message(MSG_M)
  subtype_count = 0;
  select one msg_am related by msg_m->MSG_AM[R1018];
  if ( not_empty msg_am )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_sm related by msg_m->MSG_SM[R1018];
  if ( not_empty msg_sm )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_r related by msg_m->MSG_R[R1018];
  if ( not_empty msg_r )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from MSG_M across R1018", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from MSG_M across R1018", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_as from instances of MSG_A;
for each msg_a in msg_as
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_a.Arg_ID, name:"" );
  select many duplicate_msg_as from instances of MSG_A where ( selected.Arg_ID == msg_a.Arg_ID );
  if ( cardinality duplicate_msg_as != 1 )
    ::check_log( message: "uniqueness violation in MSG_A for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1000:  Message Argument(MSG_A) -> Message(MSG_M)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_a.Informal_Msg_ID ) ) )
  select one msg_m related by msg_a->MSG_M[R1000];
  if ( empty msg_m )
    ::check_log( message: "one instance not found MSG_A->MSG_M[R1000]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( msg_m.Msg_ID == msg_a.Informal_Msg_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_A and MSG_M", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R1001:  Message Argument(MSG_A) -> Message(MSG_M)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_a.Formal_Msg_ID ) ) )
  select one msg_m related by msg_a->MSG_M[R1001];
  if ( empty msg_m )
    ::check_log( message: "one instance not found MSG_A->MSG_M[R1001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( msg_m.Msg_ID == msg_a.Formal_Msg_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_A and MSG_M", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R1013:  supertype Message Argument(MSG_A)
  subtype_count = 0;
  select one msg_ba related by msg_a->MSG_BA[R1013];
  if ( not_empty msg_ba )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_oa related by msg_a->MSG_OA[R1013];
  if ( not_empty msg_oa )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_fa related by msg_a->MSG_FA[R1013];
  if ( not_empty msg_fa )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_ea related by msg_a->MSG_EA[R1013];
  if ( not_empty msg_ea )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_ia related by msg_a->MSG_IA[R1013];
  if ( not_empty msg_ia )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_epa related by msg_a->MSG_EPA[R1013];
  if ( not_empty msg_epa )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from MSG_A across R1013", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from MSG_A across R1013", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_os from instances of MSG_O;
for each msg_o in msg_os
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_o.Msg_ID, name:"" );
  select many duplicate_msg_os from instances of MSG_O where ( selected.Msg_ID == msg_o.Msg_ID );
  if ( cardinality duplicate_msg_os != 1 )
    ::check_log( message: "uniqueness violation in MSG_O for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1011:  Operation Message(MSG_O) -> Operation(O_TFR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_o.Tfr_ID ) ) )
  select one o_tfr related by msg_o->O_TFR[R1011];
  if ( empty o_tfr )
    ::check_log( message: "one instance not found MSG_O->O_TFR[R1011]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tfr.Tfr_ID == msg_o.Tfr_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_O and O_TFR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1020:  Operation Message(MSG_O) -> Synchronous Message(MSG_SM)
  select one msg_sm related by msg_o->MSG_SM[R1020];
  if ( empty msg_sm )
    ::check_log( message: "supertype not found across MSG_O->MSG_SM[R1020]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_o related by msg_sm->MSG_O[R1020];
    if ( empty myself_msg_o or ( myself_msg_o != msg_o ) )
      ::check_log( message: "same subtype not found looping back across MSG_O->MSG_SM[R1020]->MSG_O[R1020]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_bs from instances of MSG_B;
for each msg_b in msg_bs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_b.Msg_ID, name:"" );
  select many duplicate_msg_bs from instances of MSG_B where ( selected.Msg_ID == msg_b.Msg_ID );
  if ( cardinality duplicate_msg_bs != 1 )
    ::check_log( message: "uniqueness violation in MSG_B for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1012:  Bridge Message(MSG_B) -> Bridge(S_BRG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_b.Brg_ID ) ) )
  select one s_brg related by msg_b->S_BRG[R1012];
  if ( empty s_brg )
    ::check_log( message: "one instance not found MSG_B->S_BRG[R1012]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_brg.Brg_ID == msg_b.Brg_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_B and S_BRG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1020:  Bridge Message(MSG_B) -> Synchronous Message(MSG_SM)
  select one msg_sm related by msg_b->MSG_SM[R1020];
  if ( empty msg_sm )
    ::check_log( message: "supertype not found across MSG_B->MSG_SM[R1020]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_b related by msg_sm->MSG_B[R1020];
    if ( empty myself_msg_b or ( myself_msg_b != msg_b ) )
      ::check_log( message: "same subtype not found looping back across MSG_B->MSG_SM[R1020]->MSG_B[R1020]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_es from instances of MSG_E;
for each msg_e in msg_es
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_e.Msg_ID, name:"" );
  select many duplicate_msg_es from instances of MSG_E where ( selected.Msg_ID == msg_e.Msg_ID );
  if ( cardinality duplicate_msg_es != 1 )
    ::check_log( message: "uniqueness violation in MSG_E for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1009:  Event Message(MSG_E) -> State Machine Event(SM_EVT)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_e.SMevt_ID ) ) )
  select one sm_evt related by msg_e->SM_EVT[R1009];
  if ( empty sm_evt )
    ::check_log( message: "one instance not found MSG_E->SM_EVT[R1009]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evt.SMevt_ID == msg_e.SMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_E and SM_EVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1019:  Event Message(MSG_E) -> Asynchronous Message(MSG_AM)
  select one msg_am related by msg_e->MSG_AM[R1019];
  if ( empty msg_am )
    ::check_log( message: "supertype not found across MSG_E->MSG_AM[R1019]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_e related by msg_am->MSG_E[R1019];
    if ( empty myself_msg_e or ( myself_msg_e != msg_e ) )
      ::check_log( message: "same subtype not found looping back across MSG_E->MSG_AM[R1019]->MSG_E[R1019]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_fs from instances of MSG_F;
for each msg_f in msg_fs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_f.Msg_ID, name:"" );
  select many duplicate_msg_fs from instances of MSG_F where ( selected.Msg_ID == msg_f.Msg_ID );
  if ( cardinality duplicate_msg_fs != 1 )
    ::check_log( message: "uniqueness violation in MSG_F for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1010:  Function Message(MSG_F) -> Function(S_SYNC)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_f.Sync_ID ) ) )
  select one s_sync related by msg_f->S_SYNC[R1010];
  if ( empty s_sync )
    ::check_log( message: "one instance not found MSG_F->S_SYNC[R1010]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sync.Sync_ID == msg_f.Sync_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_F and S_SYNC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1020:  Function Message(MSG_F) -> Synchronous Message(MSG_SM)
  select one msg_sm related by msg_f->MSG_SM[R1020];
  if ( empty msg_sm )
    ::check_log( message: "supertype not found across MSG_F->MSG_SM[R1020]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_f related by msg_sm->MSG_F[R1020];
    if ( empty myself_msg_f or ( myself_msg_f != msg_f ) )
      ::check_log( message: "same subtype not found looping back across MSG_F->MSG_SM[R1020]->MSG_F[R1020]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_bas from instances of MSG_BA;
for each msg_ba in msg_bas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_ba.Arg_ID, name:"" );
  select many duplicate_msg_bas from instances of MSG_BA where ( selected.Arg_ID == msg_ba.Arg_ID );
  if ( cardinality duplicate_msg_bas != 1 )
    ::check_log( message: "uniqueness violation in MSG_BA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1014:  Bridge Argument(MSG_BA) -> Bridge Parameter(S_BPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_ba.BParm_ID ) ) )
  select one s_bparm related by msg_ba->S_BPARM[R1014];
  if ( empty s_bparm )
    ::check_log( message: "one instance not found MSG_BA->S_BPARM[R1014]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_bparm.BParm_ID == msg_ba.BParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_BA and S_BPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1013:  Bridge Argument(MSG_BA) -> Message Argument(MSG_A)
  select one msg_a related by msg_ba->MSG_A[R1013];
  if ( empty msg_a )
    ::check_log( message: "supertype not found across MSG_BA->MSG_A[R1013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_ba related by msg_a->MSG_BA[R1013];
    if ( empty myself_msg_ba or ( myself_msg_ba != msg_ba ) )
      ::check_log( message: "same subtype not found looping back across MSG_BA->MSG_A[R1013]->MSG_BA[R1013]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_oas from instances of MSG_OA;
for each msg_oa in msg_oas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_oa.Arg_ID, name:"" );
  select many duplicate_msg_oas from instances of MSG_OA where ( selected.Arg_ID == msg_oa.Arg_ID );
  if ( cardinality duplicate_msg_oas != 1 )
    ::check_log( message: "uniqueness violation in MSG_OA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1015:  Operation Argument(MSG_OA) -> Operation Parameter(O_TPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_oa.TParm_ID ) ) )
  select one o_tparm related by msg_oa->O_TPARM[R1015];
  if ( empty o_tparm )
    ::check_log( message: "one instance not found MSG_OA->O_TPARM[R1015]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_tparm.TParm_ID == msg_oa.TParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_OA and O_TPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1013:  Operation Argument(MSG_OA) -> Message Argument(MSG_A)
  select one msg_a related by msg_oa->MSG_A[R1013];
  if ( empty msg_a )
    ::check_log( message: "supertype not found across MSG_OA->MSG_A[R1013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_oa related by msg_a->MSG_OA[R1013];
    if ( empty myself_msg_oa or ( myself_msg_oa != msg_oa ) )
      ::check_log( message: "same subtype not found looping back across MSG_OA->MSG_A[R1013]->MSG_OA[R1013]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_fas from instances of MSG_FA;
for each msg_fa in msg_fas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_fa.Arg_ID, name:"" );
  select many duplicate_msg_fas from instances of MSG_FA where ( selected.Arg_ID == msg_fa.Arg_ID );
  if ( cardinality duplicate_msg_fas != 1 )
    ::check_log( message: "uniqueness violation in MSG_FA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1016:  Function Argument(MSG_FA) -> Function Parameter(S_SPARM)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_fa.SParm_ID ) ) )
  select one s_sparm related by msg_fa->S_SPARM[R1016];
  if ( empty s_sparm )
    ::check_log( message: "one instance not found MSG_FA->S_SPARM[R1016]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sparm.SParm_ID == msg_fa.SParm_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_FA and S_SPARM", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1013:  Function Argument(MSG_FA) -> Message Argument(MSG_A)
  select one msg_a related by msg_fa->MSG_A[R1013];
  if ( empty msg_a )
    ::check_log( message: "supertype not found across MSG_FA->MSG_A[R1013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_fa related by msg_a->MSG_FA[R1013];
    if ( empty myself_msg_fa or ( myself_msg_fa != msg_fa ) )
      ::check_log( message: "same subtype not found looping back across MSG_FA->MSG_A[R1013]->MSG_FA[R1013]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_eas from instances of MSG_EA;
for each msg_ea in msg_eas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_ea.Arg_ID, name:"" );
  select many duplicate_msg_eas from instances of MSG_EA where ( selected.Arg_ID == msg_ea.Arg_ID );
  if ( cardinality duplicate_msg_eas != 1 )
    ::check_log( message: "uniqueness violation in MSG_EA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1017:  Event Argument(MSG_EA) -> State Machine Event Data Item(SM_EVTDI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_ea.SM_ID ) and ::is_null_id( id:msg_ea.SMedi_ID ) ) )
  select one sm_evtdi related by msg_ea->SM_EVTDI[R1017];
  if ( empty sm_evtdi )
    ::check_log( message: "one instance not found MSG_EA->SM_EVTDI[R1017]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evtdi.SM_ID == msg_ea.SM_ID and sm_evtdi.SMedi_ID == msg_ea.SMedi_ID ) )
      ::check_log( message: "referentials do not match identifiers between MSG_EA and SM_EVTDI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1013:  Event Argument(MSG_EA) -> Message Argument(MSG_A)
  select one msg_a related by msg_ea->MSG_A[R1013];
  if ( empty msg_a )
    ::check_log( message: "supertype not found across MSG_EA->MSG_A[R1013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_ea related by msg_a->MSG_EA[R1013];
    if ( empty myself_msg_ea or ( myself_msg_ea != msg_ea ) )
      ::check_log( message: "same subtype not found looping back across MSG_EA->MSG_A[R1013]->MSG_EA[R1013]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_rs from instances of MSG_R;
for each msg_r in msg_rs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_r.Msg_ID, name:msg_r.Name );
  select many duplicate_msg_rs from instances of MSG_R where ( selected.Msg_ID == msg_r.Msg_ID );
  if ( cardinality duplicate_msg_rs != 1 )
    ::check_log( message: "uniqueness violation in MSG_R for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1018:  Return Message(MSG_R) -> Message(MSG_M)
  select one msg_m related by msg_r->MSG_M[R1018];
  if ( empty msg_m )
    ::check_log( message: "supertype not found across MSG_R->MSG_M[R1018]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_r related by msg_m->MSG_R[R1018];
    if ( empty myself_msg_r or ( myself_msg_r != msg_r ) )
      ::check_log( message: "same subtype not found looping back across MSG_R->MSG_M[R1018]->MSG_R[R1018]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_sms from instances of MSG_SM;
for each msg_sm in msg_sms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_sm.Msg_ID, name:"" );
  select many duplicate_msg_sms from instances of MSG_SM where ( selected.Msg_ID == msg_sm.Msg_ID );
  if ( cardinality duplicate_msg_sms != 1 )
    ::check_log( message: "uniqueness violation in MSG_SM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1018:  Synchronous Message(MSG_SM) -> Message(MSG_M)
  select one msg_m related by msg_sm->MSG_M[R1018];
  if ( empty msg_m )
    ::check_log( message: "supertype not found across MSG_SM->MSG_M[R1018]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_sm related by msg_m->MSG_SM[R1018];
    if ( empty myself_msg_sm or ( myself_msg_sm != msg_sm ) )
      ::check_log( message: "same subtype not found looping back across MSG_SM->MSG_M[R1018]->MSG_SM[R1018]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1020:  supertype Synchronous Message(MSG_SM)
  subtype_count = 0;
  select one msg_f related by msg_sm->MSG_F[R1020];
  if ( not_empty msg_f )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_o related by msg_sm->MSG_O[R1020];
  if ( not_empty msg_o )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_b related by msg_sm->MSG_B[R1020];
  if ( not_empty msg_b )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_ism related by msg_sm->MSG_ISM[R1020];
  if ( not_empty msg_ism )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_iop related by msg_sm->MSG_IOP[R1020];
  if ( not_empty msg_iop )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from MSG_SM across R1020", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from MSG_SM across R1020", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_ams from instances of MSG_AM;
for each msg_am in msg_ams
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_am.Msg_ID, name:"" );
  select many duplicate_msg_ams from instances of MSG_AM where ( selected.Msg_ID == msg_am.Msg_ID );
  if ( cardinality duplicate_msg_ams != 1 )
    ::check_log( message: "uniqueness violation in MSG_AM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1018:  Asynchronous Message(MSG_AM) -> Message(MSG_M)
  select one msg_m related by msg_am->MSG_M[R1018];
  if ( empty msg_m )
    ::check_log( message: "supertype not found across MSG_AM->MSG_M[R1018]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_am related by msg_m->MSG_AM[R1018];
    if ( empty myself_msg_am or ( myself_msg_am != msg_am ) )
      ::check_log( message: "same subtype not found looping back across MSG_AM->MSG_M[R1018]->MSG_AM[R1018]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1019:  supertype Asynchronous Message(MSG_AM)
  subtype_count = 0;
  select one msg_e related by msg_am->MSG_E[R1019];
  if ( not_empty msg_e )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_iam related by msg_am->MSG_IAM[R1019];
  if ( not_empty msg_iam )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_sig related by msg_am->MSG_SIG[R1019];
  if ( not_empty msg_sig )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from MSG_AM across R1019", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from MSG_AM across R1019", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_isms from instances of MSG_ISM;
for each msg_ism in msg_isms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_ism.Msg_ID, name:"" );
  select many duplicate_msg_isms from instances of MSG_ISM where ( selected.Msg_ID == msg_ism.Msg_ID );
  if ( cardinality duplicate_msg_isms != 1 )
    ::check_log( message: "uniqueness violation in MSG_ISM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1020:  Informal Synchronous Message(MSG_ISM) -> Synchronous Message(MSG_SM)
  select one msg_sm related by msg_ism->MSG_SM[R1020];
  if ( empty msg_sm )
    ::check_log( message: "supertype not found across MSG_ISM->MSG_SM[R1020]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_ism related by msg_sm->MSG_ISM[R1020];
    if ( empty myself_msg_ism or ( myself_msg_ism != msg_ism ) )
      ::check_log( message: "same subtype not found looping back across MSG_ISM->MSG_SM[R1020]->MSG_ISM[R1020]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_iams from instances of MSG_IAM;
for each msg_iam in msg_iams
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_iam.Msg_ID, name:"" );
  select many duplicate_msg_iams from instances of MSG_IAM where ( selected.Msg_ID == msg_iam.Msg_ID );
  if ( cardinality duplicate_msg_iams != 1 )
    ::check_log( message: "uniqueness violation in MSG_IAM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1019:  Informal Asynchronous Message(MSG_IAM) -> Asynchronous Message(MSG_AM)
  select one msg_am related by msg_iam->MSG_AM[R1019];
  if ( empty msg_am )
    ::check_log( message: "supertype not found across MSG_IAM->MSG_AM[R1019]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_iam related by msg_am->MSG_IAM[R1019];
    if ( empty myself_msg_iam or ( myself_msg_iam != msg_iam ) )
      ::check_log( message: "same subtype not found looping back across MSG_IAM->MSG_AM[R1019]->MSG_IAM[R1019]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_ias from instances of MSG_IA;
for each msg_ia in msg_ias
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_ia.Arg_ID, name:"" );
  select many duplicate_msg_ias from instances of MSG_IA where ( selected.Arg_ID == msg_ia.Arg_ID );
  if ( cardinality duplicate_msg_ias != 1 )
    ::check_log( message: "uniqueness violation in MSG_IA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1013:  Informal Argument(MSG_IA) -> Message Argument(MSG_A)
  select one msg_a related by msg_ia->MSG_A[R1013];
  if ( empty msg_a )
    ::check_log( message: "supertype not found across MSG_IA->MSG_A[R1013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_ia related by msg_a->MSG_IA[R1013];
    if ( empty myself_msg_ia or ( myself_msg_ia != msg_ia ) )
      ::check_log( message: "same subtype not found looping back across MSG_IA->MSG_A[R1013]->MSG_IA[R1013]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_sigs from instances of MSG_SIG;
for each msg_sig in msg_sigs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_sig.Msg_ID, name:"" );
  select many duplicate_msg_sigs from instances of MSG_SIG where ( selected.Msg_ID == msg_sig.Msg_ID );
  if ( cardinality duplicate_msg_sigs != 1 )
    ::check_log( message: "uniqueness violation in MSG_SIG for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1021:  Signal Message(MSG_SIG) -> Interface Signal(C_AS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_sig.Id ) ) )
  select one c_as related by msg_sig->C_AS[R1021];
  if ( empty c_as )
    ::check_log( message: "one instance not found MSG_SIG->C_AS[R1021]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_as.Id == msg_sig.Id ) )
      ::check_log( message: "referentials do not match identifiers between MSG_SIG and C_AS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1019:  Signal Message(MSG_SIG) -> Asynchronous Message(MSG_AM)
  select one msg_am related by msg_sig->MSG_AM[R1019];
  if ( empty msg_am )
    ::check_log( message: "supertype not found across MSG_SIG->MSG_AM[R1019]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_sig related by msg_am->MSG_SIG[R1019];
    if ( empty myself_msg_sig or ( myself_msg_sig != msg_sig ) )
      ::check_log( message: "same subtype not found looping back across MSG_SIG->MSG_AM[R1019]->MSG_SIG[R1019]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_iops from instances of MSG_IOP;
for each msg_iop in msg_iops
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Msg_ID", trace_id:msg_iop.Msg_ID, name:"" );
  select many duplicate_msg_iops from instances of MSG_IOP where ( selected.Msg_ID == msg_iop.Msg_ID );
  if ( cardinality duplicate_msg_iops != 1 )
    ::check_log( message: "uniqueness violation in MSG_IOP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1022:  Interface Operation Message(MSG_IOP) -> Interface Operation(C_IO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_iop.Id ) ) )
  select one c_io related by msg_iop->C_IO[R1022];
  if ( empty c_io )
    ::check_log( message: "one instance not found MSG_IOP->C_IO[R1022]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_io.Id == msg_iop.Id ) )
      ::check_log( message: "referentials do not match identifiers between MSG_IOP and C_IO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1020:  Interface Operation Message(MSG_IOP) -> Synchronous Message(MSG_SM)
  select one msg_sm related by msg_iop->MSG_SM[R1020];
  if ( empty msg_sm )
    ::check_log( message: "supertype not found across MSG_IOP->MSG_SM[R1020]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_iop related by msg_sm->MSG_IOP[R1020];
    if ( empty myself_msg_iop or ( myself_msg_iop != msg_iop ) )
      ::check_log( message: "same subtype not found looping back across MSG_IOP->MSG_SM[R1020]->MSG_IOP[R1020]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many msg_epas from instances of MSG_EPA;
for each msg_epa in msg_epas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Arg_ID", trace_id:msg_epa.Arg_ID, name:"" );
  select many duplicate_msg_epas from instances of MSG_EPA where ( selected.Arg_ID == msg_epa.Arg_ID );
  if ( cardinality duplicate_msg_epas != 1 )
    ::check_log( message: "uniqueness violation in MSG_EPA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1023:  Executable Property Argument(MSG_EPA) -> Property Parameter(C_PP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:msg_epa.PP_Id ) ) )
  select one c_pp related by msg_epa->C_PP[R1023];
  if ( empty c_pp )
    ::check_log( message: "one instance not found MSG_EPA->C_PP[R1023]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_pp.PP_Id == msg_epa.PP_Id ) )
      ::check_log( message: "referentials do not match identifiers between MSG_EPA and C_PP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R1013:  Executable Property Argument(MSG_EPA) -> Message Argument(MSG_A)
  select one msg_a related by msg_epa->MSG_A[R1013];
  if ( empty msg_a )
    ::check_log( message: "supertype not found across MSG_EPA->MSG_A[R1013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_msg_epa related by msg_a->MSG_EPA[R1013];
    if ( empty myself_msg_epa or ( myself_msg_epa != msg_epa ) )
      ::check_log( message: "same subtype not found looping back across MSG_EPA->MSG_A[R1013]->MSG_EPA[R1013]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_ns from instances of A_N;
for each a_n in a_ns
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_n.Id, name:"" );
  select many duplicate_a_ns from instances of A_N where ( selected.Id == a_n.Id );
  if ( cardinality duplicate_a_ns != 1 )
    ::check_log( message: "uniqueness violation in A_N for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Activity Node(A_N) -> Packageable Element(PE_PE)
  select one pe_pe related by a_n->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across A_N->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_n related by pe_pe->A_N[R8001];
    if ( empty myself_a_n or ( myself_a_n != a_n ) )
      ::check_log( message: "same subtype not found looping back across A_N->PE_PE[R8001]->A_N[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1105:  supertype Activity Node(A_N)
  subtype_count = 0;
  select one a_act related by a_n->A_ACT[R1105];
  if ( not_empty a_act )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_obj related by a_n->A_OBJ[R1105];
  if ( not_empty a_obj )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_ctl related by a_n->A_CTL[R1105];
  if ( not_empty a_ctl )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from A_N across R1105", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from A_N across R1105", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_es from instances of A_E;
for each a_e in a_es
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_e.Id, name:"" );
  select many duplicate_a_es from instances of A_E where ( selected.Id == a_e.Id );
  if ( cardinality duplicate_a_es != 1 )
    ::check_log( message: "uniqueness violation in A_E for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1103:  Activity Edge(A_E) -> Activity Node(A_N)
  select one a_n related by a_e->A_N[R1103];
  if ( empty a_n )
    ::check_log( message: "one instance not found A_E->A_N[R1103]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( a_n.Id == a_e.TargetId ) )
      ::check_log( message: "referentials do not match identifiers between A_E and A_N", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1104:  Activity Edge(A_E) -> Activity Node(A_N)
  select one a_n related by a_e->A_N[R1104];
  if ( empty a_n )
    ::check_log( message: "one instance not found A_E->A_N[R1104]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( a_n.Id == a_e.SourceId ) )
      ::check_log( message: "referentials do not match identifiers between A_E and A_N", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Activity Edge(A_E) -> Packageable Element(PE_PE)
  select one pe_pe related by a_e->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across A_E->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_e related by pe_pe->A_E[R8001];
    if ( empty myself_a_e or ( myself_a_e != a_e ) )
      ::check_log( message: "same subtype not found looping back across A_E->PE_PE[R8001]->A_E[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_acts from instances of A_ACT;
for each a_act in a_acts
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_act.Id, name:"" );
  select many duplicate_a_acts from instances of A_ACT where ( selected.Id == a_act.Id );
  if ( cardinality duplicate_a_acts != 1 )
    ::check_log( message: "uniqueness violation in A_ACT for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1105:  Action Node(A_ACT) -> Activity Node(A_N)
  select one a_n related by a_act->A_N[R1105];
  if ( empty a_n )
    ::check_log( message: "supertype not found across A_ACT->A_N[R1105]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_act related by a_n->A_ACT[R1105];
    if ( empty myself_a_act or ( myself_a_act != a_act ) )
      ::check_log( message: "same subtype not found looping back across A_ACT->A_N[R1105]->A_ACT[R1105]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1107:  supertype Action Node(A_ACT)
  subtype_count = 0;
  select one a_ae related by a_act->A_AE[R1107];
  if ( not_empty a_ae )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_ga related by a_act->A_GA[R1107];
  if ( not_empty a_ga )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_ss related by a_act->A_SS[R1107];
  if ( not_empty a_ss )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from A_ACT across R1107", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from A_ACT across R1107", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_objs from instances of A_OBJ;
for each a_obj in a_objs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_obj.Id, name:a_obj.Name );
  select many duplicate_a_objs from instances of A_OBJ where ( selected.Id == a_obj.Id );
  if ( cardinality duplicate_a_objs != 1 )
    ::check_log( message: "uniqueness violation in A_OBJ for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1105:  Object Node(A_OBJ) -> Activity Node(A_N)
  select one a_n related by a_obj->A_N[R1105];
  if ( empty a_n )
    ::check_log( message: "supertype not found across A_OBJ->A_N[R1105]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_obj related by a_n->A_OBJ[R1105];
    if ( empty myself_a_obj or ( myself_a_obj != a_obj ) )
      ::check_log( message: "same subtype not found looping back across A_OBJ->A_N[R1105]->A_OBJ[R1105]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_ctls from instances of A_CTL;
for each a_ctl in a_ctls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ctl.Id, name:"" );
  select many duplicate_a_ctls from instances of A_CTL where ( selected.Id == a_ctl.Id );
  if ( cardinality duplicate_a_ctls != 1 )
    ::check_log( message: "uniqueness violation in A_CTL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1105:  Control Node(A_CTL) -> Activity Node(A_N)
  select one a_n related by a_ctl->A_N[R1105];
  if ( empty a_n )
    ::check_log( message: "supertype not found across A_CTL->A_N[R1105]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ctl related by a_n->A_CTL[R1105];
    if ( empty myself_a_ctl or ( myself_a_ctl != a_ctl ) )
      ::check_log( message: "same subtype not found looping back across A_CTL->A_N[R1105]->A_CTL[R1105]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1106:  supertype Control Node(A_CTL)
  subtype_count = 0;
  select one a_ff related by a_ctl->A_FF[R1106];
  if ( not_empty a_ff )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_af related by a_ctl->A_AF[R1106];
  if ( not_empty a_af )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_ini related by a_ctl->A_INI[R1106];
  if ( not_empty a_ini )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_dm related by a_ctl->A_DM[R1106];
  if ( not_empty a_dm )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_fj related by a_ctl->A_FJ[R1106];
  if ( not_empty a_fj )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from A_CTL across R1106", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from A_CTL across R1106", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_inis from instances of A_INI;
for each a_ini in a_inis
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ini.Id, name:"" );
  select many duplicate_a_inis from instances of A_INI where ( selected.Id == a_ini.Id );
  if ( cardinality duplicate_a_inis != 1 )
    ::check_log( message: "uniqueness violation in A_INI for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1106:  Initial Node(A_INI) -> Control Node(A_CTL)
  select one a_ctl related by a_ini->A_CTL[R1106];
  if ( empty a_ctl )
    ::check_log( message: "supertype not found across A_INI->A_CTL[R1106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ini related by a_ctl->A_INI[R1106];
    if ( empty myself_a_ini or ( myself_a_ini != a_ini ) )
      ::check_log( message: "same subtype not found looping back across A_INI->A_CTL[R1106]->A_INI[R1106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_afs from instances of A_AF;
for each a_af in a_afs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_af.Id, name:"" );
  select many duplicate_a_afs from instances of A_AF where ( selected.Id == a_af.Id );
  if ( cardinality duplicate_a_afs != 1 )
    ::check_log( message: "uniqueness violation in A_AF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1106:  Activity Final Node(A_AF) -> Control Node(A_CTL)
  select one a_ctl related by a_af->A_CTL[R1106];
  if ( empty a_ctl )
    ::check_log( message: "supertype not found across A_AF->A_CTL[R1106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_af related by a_ctl->A_AF[R1106];
    if ( empty myself_a_af or ( myself_a_af != a_af ) )
      ::check_log( message: "same subtype not found looping back across A_AF->A_CTL[R1106]->A_AF[R1106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_ffs from instances of A_FF;
for each a_ff in a_ffs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ff.Id, name:"" );
  select many duplicate_a_ffs from instances of A_FF where ( selected.Id == a_ff.Id );
  if ( cardinality duplicate_a_ffs != 1 )
    ::check_log( message: "uniqueness violation in A_FF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1106:  Flow Final Node(A_FF) -> Control Node(A_CTL)
  select one a_ctl related by a_ff->A_CTL[R1106];
  if ( empty a_ctl )
    ::check_log( message: "supertype not found across A_FF->A_CTL[R1106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ff related by a_ctl->A_FF[R1106];
    if ( empty myself_a_ff or ( myself_a_ff != a_ff ) )
      ::check_log( message: "same subtype not found looping back across A_FF->A_CTL[R1106]->A_FF[R1106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_dms from instances of A_DM;
for each a_dm in a_dms
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_dm.Id, name:a_dm.Name );
  select many duplicate_a_dms from instances of A_DM where ( selected.Id == a_dm.Id );
  if ( cardinality duplicate_a_dms != 1 )
    ::check_log( message: "uniqueness violation in A_DM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1106:  Decision Merge Node(A_DM) -> Control Node(A_CTL)
  select one a_ctl related by a_dm->A_CTL[R1106];
  if ( empty a_ctl )
    ::check_log( message: "supertype not found across A_DM->A_CTL[R1106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_dm related by a_ctl->A_DM[R1106];
    if ( empty myself_a_dm or ( myself_a_dm != a_dm ) )
      ::check_log( message: "same subtype not found looping back across A_DM->A_CTL[R1106]->A_DM[R1106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_fjs from instances of A_FJ;
for each a_fj in a_fjs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_fj.Id, name:"" );
  select many duplicate_a_fjs from instances of A_FJ where ( selected.Id == a_fj.Id );
  if ( cardinality duplicate_a_fjs != 1 )
    ::check_log( message: "uniqueness violation in A_FJ for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1106:  Fork Join Node(A_FJ) -> Control Node(A_CTL)
  select one a_ctl related by a_fj->A_CTL[R1106];
  if ( empty a_ctl )
    ::check_log( message: "supertype not found across A_FJ->A_CTL[R1106]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_fj related by a_ctl->A_FJ[R1106];
    if ( empty myself_a_fj or ( myself_a_fj != a_fj ) )
      ::check_log( message: "same subtype not found looping back across A_FJ->A_CTL[R1106]->A_FJ[R1106]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_gas from instances of A_GA;
for each a_ga in a_gas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ga.Id, name:a_ga.Name );
  select many duplicate_a_gas from instances of A_GA where ( selected.Id == a_ga.Id );
  if ( cardinality duplicate_a_gas != 1 )
    ::check_log( message: "uniqueness violation in A_GA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1107:  Activity Diagram Action(A_GA) -> Action Node(A_ACT)
  select one a_act related by a_ga->A_ACT[R1107];
  if ( empty a_act )
    ::check_log( message: "supertype not found across A_GA->A_ACT[R1107]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ga related by a_act->A_GA[R1107];
    if ( empty myself_a_ga or ( myself_a_ga != a_ga ) )
      ::check_log( message: "same subtype not found looping back across A_GA->A_ACT[R1107]->A_GA[R1107]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_aes from instances of A_AE;
for each a_ae in a_aes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ae.Id, name:"" );
  select many duplicate_a_aes from instances of A_AE where ( selected.Id == a_ae.Id );
  if ( cardinality duplicate_a_aes != 1 )
    ::check_log( message: "uniqueness violation in A_AE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1107:  Accept Event(A_AE) -> Action Node(A_ACT)
  select one a_act related by a_ae->A_ACT[R1107];
  if ( empty a_act )
    ::check_log( message: "supertype not found across A_AE->A_ACT[R1107]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ae related by a_act->A_AE[R1107];
    if ( empty myself_a_ae or ( myself_a_ae != a_ae ) )
      ::check_log( message: "same subtype not found looping back across A_AE->A_ACT[R1107]->A_AE[R1107]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1112:  supertype Accept Event(A_AE)
  subtype_count = 0;
  select one a_ate related by a_ae->A_ATE[R1112];
  if ( not_empty a_ate )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_aea related by a_ae->A_AEA[R1112];
  if ( not_empty a_aea )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from A_AE across R1112", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from A_AE across R1112", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_sss from instances of A_SS;
for each a_ss in a_sss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ss.Id, name:a_ss.Name );
  select many duplicate_a_sss from instances of A_SS where ( selected.Id == a_ss.Id );
  if ( cardinality duplicate_a_sss != 1 )
    ::check_log( message: "uniqueness violation in A_SS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1107:  Send Signal(A_SS) -> Action Node(A_ACT)
  select one a_act related by a_ss->A_ACT[R1107];
  if ( empty a_act )
    ::check_log( message: "supertype not found across A_SS->A_ACT[R1107]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ss related by a_act->A_SS[R1107];
    if ( empty myself_a_ss or ( myself_a_ss != a_ss ) )
      ::check_log( message: "same subtype not found looping back across A_SS->A_ACT[R1107]->A_SS[R1107]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many comm_lnks from instances of COMM_LNK;
for each comm_lnk in comm_lnks
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Link_ID", trace_id:comm_lnk.Link_ID, name:"" );
  select many duplicate_comm_lnks from instances of COMM_LNK where ( selected.Link_ID == comm_lnk.Link_ID );
  if ( cardinality duplicate_comm_lnks != 1 )
    ::check_log( message: "uniqueness violation in COMM_LNK for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1128:  Communication Link(COMM_LNK) -> Association(R_REL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:comm_lnk.Rel_ID ) ) )
  select one r_rel related by comm_lnk->R_REL[R1128];
  if ( empty r_rel )
    ::check_log( message: "one instance not found COMM_LNK->R_REL[R1128]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == comm_lnk.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between COMM_LNK and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R1133:  Communication Link(COMM_LNK) -> Interaction Participant(SQ_P)
  select one sq_p related by comm_lnk->SQ_P[R1133];
  if ( empty sq_p )
    ::check_log( message: "one instance not found COMM_LNK->SQ_P[R1133]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == comm_lnk.Start_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between COMM_LNK and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1134:  Communication Link(COMM_LNK) -> Interaction Participant(SQ_P)
  select one sq_p related by comm_lnk->SQ_P[R1134];
  if ( empty sq_p )
    ::check_log( message: "one instance not found COMM_LNK->SQ_P[R1134]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == comm_lnk.Destination_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between COMM_LNK and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many uc_ucas from instances of UC_UCA;
for each uc_uca in uc_ucas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Assoc_ID", trace_id:uc_uca.Assoc_ID, name:"" );
  select many duplicate_uc_ucas from instances of UC_UCA where ( selected.Assoc_ID == uc_uca.Assoc_ID );
  if ( cardinality duplicate_uc_ucas != 1 )
    ::check_log( message: "uniqueness violation in UC_UCA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1206:  Use Case Association(UC_UCA) -> Interaction Participant(SQ_P)
  select one sq_p related by uc_uca->SQ_P[R1206];
  if ( empty sq_p )
    ::check_log( message: "one instance not found UC_UCA->SQ_P[R1206]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == uc_uca.Source_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between UC_UCA and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1207:  Use Case Association(UC_UCA) -> Interaction Participant(SQ_P)
  select one sq_p related by uc_uca->SQ_P[R1207];
  if ( empty sq_p )
    ::check_log( message: "one instance not found UC_UCA->SQ_P[R1207]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sq_p.Part_ID == uc_uca.Destination_Part_ID ) )
      ::check_log( message: "referentials do not match identifiers between UC_UCA and SQ_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Use Case Association(UC_UCA) -> Packageable Element(PE_PE)
  select one pe_pe related by uc_uca->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across UC_UCA->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_uc_uca related by pe_pe->UC_UCA[R8001];
    if ( empty myself_uc_uca or ( myself_uc_uca != uc_uca ) )
      ::check_log( message: "same subtype not found looping back across UC_UCA->PE_PE[R8001]->UC_UCA[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1210:  supertype Use Case Association(UC_UCA)
  subtype_count = 0;
  select one uc_e related by uc_uca->UC_E[R1210];
  if ( not_empty uc_e )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one uc_g related by uc_uca->UC_G[R1210];
  if ( not_empty uc_g )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one uc_i related by uc_uca->UC_I[R1210];
  if ( not_empty uc_i )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one uc_ba related by uc_uca->UC_BA[R1210];
  if ( not_empty uc_ba )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from UC_UCA across R1210", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from UC_UCA across R1210", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many uc_bas from instances of UC_BA;
for each uc_ba in uc_bas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Assoc_ID", trace_id:uc_ba.Assoc_ID, name:"" );
  select many duplicate_uc_bas from instances of UC_BA where ( selected.Assoc_ID == uc_ba.Assoc_ID );
  if ( cardinality duplicate_uc_bas != 1 )
    ::check_log( message: "uniqueness violation in UC_BA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1210:  Binary Association(UC_BA) -> Use Case Association(UC_UCA)
  select one uc_uca related by uc_ba->UC_UCA[R1210];
  if ( empty uc_uca )
    ::check_log( message: "supertype not found across UC_BA->UC_UCA[R1210]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_uc_ba related by uc_uca->UC_BA[R1210];
    if ( empty myself_uc_ba or ( myself_uc_ba != uc_ba ) )
      ::check_log( message: "same subtype not found looping back across UC_BA->UC_UCA[R1210]->UC_BA[R1210]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many uc_gs from instances of UC_G;
for each uc_g in uc_gs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Assoc_ID", trace_id:uc_g.Assoc_ID, name:"" );
  select many duplicate_uc_gs from instances of UC_G where ( selected.Assoc_ID == uc_g.Assoc_ID );
  if ( cardinality duplicate_uc_gs != 1 )
    ::check_log( message: "uniqueness violation in UC_G for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1210:  Generalization(UC_G) -> Use Case Association(UC_UCA)
  select one uc_uca related by uc_g->UC_UCA[R1210];
  if ( empty uc_uca )
    ::check_log( message: "supertype not found across UC_G->UC_UCA[R1210]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_uc_g related by uc_uca->UC_G[R1210];
    if ( empty myself_uc_g or ( myself_uc_g != uc_g ) )
      ::check_log( message: "same subtype not found looping back across UC_G->UC_UCA[R1210]->UC_G[R1210]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many uc_is from instances of UC_I;
for each uc_i in uc_is
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Assoc_ID", trace_id:uc_i.Assoc_ID, name:"" );
  select many duplicate_uc_is from instances of UC_I where ( selected.Assoc_ID == uc_i.Assoc_ID );
  if ( cardinality duplicate_uc_is != 1 )
    ::check_log( message: "uniqueness violation in UC_I for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1210:  Include(UC_I) -> Use Case Association(UC_UCA)
  select one uc_uca related by uc_i->UC_UCA[R1210];
  if ( empty uc_uca )
    ::check_log( message: "supertype not found across UC_I->UC_UCA[R1210]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_uc_i related by uc_uca->UC_I[R1210];
    if ( empty myself_uc_i or ( myself_uc_i != uc_i ) )
      ::check_log( message: "same subtype not found looping back across UC_I->UC_UCA[R1210]->UC_I[R1210]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many uc_es from instances of UC_E;
for each uc_e in uc_es
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Assoc_ID", trace_id:uc_e.Assoc_ID, name:"" );
  select many duplicate_uc_es from instances of UC_E where ( selected.Assoc_ID == uc_e.Assoc_ID );
  if ( cardinality duplicate_uc_es != 1 )
    ::check_log( message: "uniqueness violation in UC_E for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1210:  Extend(UC_E) -> Use Case Association(UC_UCA)
  select one uc_uca related by uc_e->UC_UCA[R1210];
  if ( empty uc_uca )
    ::check_log( message: "supertype not found across UC_E->UC_UCA[R1210]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_uc_e related by uc_uca->UC_E[R1210];
    if ( empty myself_uc_e or ( myself_uc_e != uc_e ) )
      ::check_log( message: "same subtype not found looping back across UC_E->UC_UCA[R1210]->UC_E[R1210]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_aps from instances of A_AP;
for each a_ap in a_aps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ap.Id, name:a_ap.Name );
  select many duplicate_a_aps from instances of A_AP where ( selected.Id == a_ap.Id );
  if ( cardinality duplicate_a_aps != 1 )
    ::check_log( message: "uniqueness violation in A_AP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Activity Partition(A_AP) -> Packageable Element(PE_PE)
  select one pe_pe related by a_ap->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across A_AP->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ap related by pe_pe->A_AP[R8001];
    if ( empty myself_a_ap or ( myself_a_ap != a_ap ) )
      ::check_log( message: "same subtype not found looping back across A_AP->PE_PE[R8001]->A_AP[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_ates from instances of A_ATE;
for each a_ate in a_ates
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_ate.Id, name:a_ate.Name );
  select many duplicate_a_ates from instances of A_ATE where ( selected.Id == a_ate.Id );
  if ( cardinality duplicate_a_ates != 1 )
    ::check_log( message: "uniqueness violation in A_ATE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1112:  Accept Time Event Action(A_ATE) -> Accept Event(A_AE)
  select one a_ae related by a_ate->A_AE[R1112];
  if ( empty a_ae )
    ::check_log( message: "supertype not found across A_ATE->A_AE[R1112]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_ate related by a_ae->A_ATE[R1112];
    if ( empty myself_a_ate or ( myself_a_ate != a_ate ) )
      ::check_log( message: "same subtype not found looping back across A_ATE->A_AE[R1112]->A_ATE[R1112]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many a_aeas from instances of A_AEA;
for each a_aea in a_aeas
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:a_aea.Id, name:a_aea.Name );
  select many duplicate_a_aeas from instances of A_AEA where ( selected.Id == a_aea.Id );
  if ( cardinality duplicate_a_aeas != 1 )
    ::check_log( message: "uniqueness violation in A_AEA for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1112:  Accept Event Action(A_AEA) -> Accept Event(A_AE)
  select one a_ae related by a_aea->A_AE[R1112];
  if ( empty a_ae )
    ::check_log( message: "supertype not found across A_AEA->A_AE[R1112]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_a_aea related by a_ae->A_AEA[R1112];
    if ( empty myself_a_aea or ( myself_a_aea != a_aea ) )
      ::check_log( message: "same subtype not found looping back across A_AEA->A_AE[R1112]->A_AEA[R1112]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many ep_pkgs from instances of EP_PKG;
for each ep_pkg in ep_pkgs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Package_ID", trace_id:ep_pkg.Package_ID, name:ep_pkg.Name );
  select many duplicate_ep_pkgs from instances of EP_PKG where ( selected.Package_ID == ep_pkg.Package_ID );
  if ( cardinality duplicate_ep_pkgs != 1 )
    ::check_log( message: "uniqueness violation in EP_PKG for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1401:  Package(EP_PKG) -> System Model(S_SYS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:ep_pkg.Sys_ID ) ) )
  select one s_sys related by ep_pkg->S_SYS[R1401];
  if ( empty s_sys )
    ::check_log( message: "one instance not found EP_PKG->S_SYS[R1401]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sys.Sys_ID == ep_pkg.Sys_ID ) )
      ::check_log( message: "referentials do not match identifiers between EP_PKG and S_SYS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R1405:  Package(EP_PKG) -> System Model(S_SYS)
  select one s_sys related by ep_pkg->S_SYS[R1405];
  if ( empty s_sys )
    ::check_log( message: "one instance not found EP_PKG->S_SYS[R1405]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_sys.Sys_ID == ep_pkg.Direct_Sys_ID ) )
      ::check_log( message: "referentials do not match identifiers between EP_PKG and S_SYS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Package(EP_PKG) -> Packageable Element(PE_PE)
  if ( 0 == T::idtoi( id:ep_pkg.Sys_ID ) )
  // Look for supertype PE_PE only if not a top-level package (connected to System).
  select one pe_pe related by ep_pkg->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across EP_PKG->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_ep_pkg related by pe_pe->EP_PKG[R8001];
    if ( empty myself_ep_pkg or ( myself_ep_pkg != ep_pkg ) )
      ::check_log( message: "same subtype not found looping back across EP_PKG->PE_PE[R8001]->EP_PKG[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many ep_pkgrefs from instances of EP_PKGREF;
for each ep_pkgref in ep_pkgrefs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Referring_Package_ID", trace_id:ep_pkgref.Referring_Package_ID, name:"" );
  select many duplicate_ep_pkgrefs from instances of EP_PKGREF where ( selected.Referring_Package_ID == ep_pkgref.Referring_Package_ID );
  if ( cardinality duplicate_ep_pkgrefs != 1 )
    ::check_log( message: "uniqueness violation in EP_PKGREF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R1402:  Package Reference(EP_PKGREF) -> Package(EP_PKG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:ep_pkgref.Referred_Package_ID ) ) )
  select one ep_pkg related by ep_pkgref->EP_PKG[R1402.''refers to''];
  if ( empty ep_pkg )
    ::check_log( message: "one instance not found EP_PKGREF->EP_PKG[R1402.''refers to'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( ep_pkg.Package_ID == ep_pkgref.Referred_Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between EP_PKGREF and EP_PKG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R1402:  Package Reference(EP_PKGREF) -> Package(EP_PKG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:ep_pkgref.Referring_Package_ID ) ) )
  select one ep_pkg related by ep_pkgref->EP_PKG[R1402.''is referenced by''];
  if ( empty ep_pkg )
    ::check_log( message: "one instance not found EP_PKGREF->EP_PKG[R1402.''is referenced by'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( ep_pkg.Package_ID == ep_pkgref.Referring_Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between EP_PKGREF and EP_PKG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cnst_csps from instances of CNST_CSP;
for each cnst_csp in cnst_csps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Constant_Spec_ID", trace_id:cnst_csp.Constant_Spec_ID, name:"" );
  select many duplicate_cnst_csps from instances of CNST_CSP where ( selected.Constant_Spec_ID == cnst_csp.Constant_Spec_ID );
  if ( cardinality duplicate_cnst_csps != 1 )
    ::check_log( message: "uniqueness violation in CNST_CSP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Constant Specification(CNST_CSP) -> Packageable Element(PE_PE)
  select one pe_pe related by cnst_csp->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across CNST_CSP->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_cnst_csp related by pe_pe->CNST_CSP[R8001];
    if ( empty myself_cnst_csp or ( myself_cnst_csp != cnst_csp ) )
      ::check_log( message: "same subtype not found looping back across CNST_CSP->PE_PE[R8001]->CNST_CSP[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cnst_sycs from instances of CNST_SYC;
for each cnst_syc in cnst_sycs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Const_ID", trace_id:cnst_syc.Const_ID, name:cnst_syc.Name );
  select many duplicate_cnst_sycs from instances of CNST_SYC where ( selected.Const_ID == cnst_syc.Const_ID );
  if ( cardinality duplicate_cnst_sycs != 1 )
    ::check_log( message: "uniqueness violation in CNST_SYC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1500:  Symbolic Constant(CNST_SYC) -> Data Type(S_DT)
  select one s_dt related by cnst_syc->S_DT[R1500];
  if ( empty s_dt )
    ::check_log( message: "one instance not found CNST_SYC->S_DT[R1500]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == cnst_syc.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between CNST_SYC and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1504:  Symbolic Constant(CNST_SYC) -> Constant Specification(CNST_CSP)
  select one cnst_csp related by cnst_syc->CNST_CSP[R1504];
  if ( empty cnst_csp )
    ::check_log( message: "one instance not found CNST_SYC->CNST_CSP[R1504]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( cnst_csp.Constant_Spec_ID == cnst_syc.Constant_Spec_ID ) )
      ::check_log( message: "referentials do not match identifiers between CNST_SYC and CNST_CSP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R1505:  Symbolic Constant(CNST_SYC) -> Symbolic Constant(CNST_SYC)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cnst_syc.Previous_Const_ID ) ) )
  select one right_cnst_syc related by cnst_syc->CNST_SYC[R1505.''succeeds''];
  if ( empty right_cnst_syc )
    ::check_log( message: "one instance not found CNST_SYC->CNST_SYC[R1505.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_cnst_syc.Const_ID == cnst_syc.Previous_Const_ID ) )
      ::check_log( message: "referentials do not match identifiers between CNST_SYC and CNST_SYC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R1502:  supertype Symbolic Constant(CNST_SYC)
  subtype_count = 0;
  select one cnst_lfsc related by cnst_syc->CNST_LFSC[R1502];
  if ( not_empty cnst_lfsc )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from CNST_SYC across R1502", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from CNST_SYC across R1502", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cnst_lfscs from instances of CNST_LFSC;
for each cnst_lfsc in cnst_lfscs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Const_ID", trace_id:cnst_lfsc.Const_ID, name:"" );
  select many duplicate_cnst_lfscs from instances of CNST_LFSC where ( selected.Const_ID == cnst_lfsc.Const_ID );
  if ( cardinality duplicate_cnst_lfscs != 1 )
    ::check_log( message: "uniqueness violation in CNST_LFSC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1502:  Leaf Symbolic Constant(CNST_LFSC) -> Symbolic Constant(CNST_SYC)
  select one cnst_syc related by cnst_lfsc->CNST_SYC[R1502];
  if ( empty cnst_syc )
    ::check_log( message: "supertype not found across CNST_LFSC->CNST_SYC[R1502]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_cnst_lfsc related by cnst_syc->CNST_LFSC[R1502];
    if ( empty myself_cnst_lfsc or ( myself_cnst_lfsc != cnst_lfsc ) )
      ::check_log( message: "same subtype not found looping back across CNST_LFSC->CNST_SYC[R1502]->CNST_LFSC[R1502]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  // super to sub participation R1503:  supertype Leaf Symbolic Constant(CNST_LFSC)
  subtype_count = 0;
  select one cnst_lsc related by cnst_lfsc->CNST_LSC[R1503];
  if ( not_empty cnst_lsc )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from CNST_LFSC across R1503", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from CNST_LFSC across R1503", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cnst_lscs from instances of CNST_LSC;
for each cnst_lsc in cnst_lscs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Const_ID", trace_id:cnst_lsc.Const_ID, name:"" );
  select many duplicate_cnst_lscs from instances of CNST_LSC where ( selected.Const_ID == cnst_lsc.Const_ID );
  if ( cardinality duplicate_cnst_lscs != 1 )
    ::check_log( message: "uniqueness violation in CNST_LSC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R1503:  Literal Symbolic Constant(CNST_LSC) -> Leaf Symbolic Constant(CNST_LFSC)
  select one cnst_lfsc related by cnst_lsc->CNST_LFSC[R1503];
  if ( empty cnst_lfsc )
    ::check_log( message: "supertype not found across CNST_LSC->CNST_LFSC[R1503]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_cnst_lsc related by cnst_lfsc->CNST_LSC[R1503];
    if ( empty myself_cnst_lsc or ( myself_cnst_lsc != cnst_lsc ) )
      ::check_log( message: "same subtype not found looping back across CNST_LSC->CNST_LFSC[R1503]->CNST_LSC[R1503]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_lnks from instances of I_LNK;
for each i_lnk in i_lnks
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Link_ID", trace_id:i_lnk.Link_ID, name:"" );
  select many duplicate_i_lnks from instances of I_LNK where ( selected.Link_ID == i_lnk.Link_ID );
  if ( cardinality duplicate_i_lnks != 1 )
    ::check_log( message: "uniqueness violation in I_LNK for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2904:  Link(I_LNK) -> Association(R_REL)
  select one r_rel related by i_lnk->R_REL[R2904];
  if ( empty r_rel )
    ::check_log( message: "one instance not found I_LNK->R_REL[R2904]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == i_lnk.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_LNK and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2901:  Link(I_LNK) -> Link Participation(I_LIP)
  select one i_lip related by i_lnk->I_LIP[R2901];
  if ( empty i_lip )
    ::check_log( message: "one instance not found I_LNK->I_LIP[R2901]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_lip.Inst_ID == i_lnk.fromInst_ID and i_lip.Rel_ID == i_lnk.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_LNK and I_LIP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2902:  Link(I_LNK) -> Link Participation(I_LIP)
  select one i_lip related by i_lnk->I_LIP[R2902];
  if ( empty i_lip )
    ::check_log( message: "one instance not found I_LNK->I_LIP[R2902]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_lip.Inst_ID == i_lnk.toInst_ID and i_lip.Rel_ID == i_lnk.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_LNK and I_LIP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2903:  Link(I_LNK) -> Link Participation(I_LIP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_lnk.assocInst_ID ) ) )
  select one i_lip related by i_lnk->I_LIP[R2903];
  if ( empty i_lip )
    ::check_log( message: "one instance not found I_LNK->I_LIP[R2903]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_lip.Inst_ID == i_lnk.assocInst_ID and i_lip.Rel_ID == i_lnk.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_LNK and I_LIP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_evis from instances of I_EVI;
for each i_evi in i_evis
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Event_ID", trace_id:i_evi.Event_ID, name:"" );
  select many duplicate_i_evis from instances of I_EVI where ( selected.Event_ID == i_evi.Event_ID );
  if ( cardinality duplicate_i_evis != 1 )
    ::check_log( message: "uniqueness violation in I_EVI for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2906:  Pending Event(I_EVI) -> State Machine Event(SM_EVT)
  select one sm_evt related by i_evi->SM_EVT[R2906];
  if ( empty sm_evt )
    ::check_log( message: "one instance not found I_EVI->SM_EVT[R2906]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evt.SMevt_ID == i_evi.SMevt_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EVI and SM_EVT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2908:  Pending Event(I_EVI) -> Pending Event(I_EVI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_evi.nextEvent_ID ) ) )
  select one right_i_evi related by i_evi->I_EVI[R2908.''will be processed after''];
  if ( empty right_i_evi )
    ::check_log( message: "one instance not found I_EVI->I_EVI[R2908.''will be processed after'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_evi.Event_ID == i_evi.nextEvent_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EVI and I_EVI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2907:  Pending Event(I_EVI) -> Instance(I_INS)
  // formalizer participation R2935:  Pending Event(I_EVI) -> Instance(I_INS)
  // formalizer participation R2937:  Pending Event(I_EVI) -> Instance(I_INS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_evi.Sent_By_Inst_ID ) ) )
  select one i_ins related by i_evi->I_INS[R2937];
  if ( empty i_ins )
    ::check_log( message: "one instance not found I_EVI->I_INS[R2937]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_ins.Inst_ID == i_evi.Sent_By_Inst_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EVI and I_INS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2939:  Pending Event(I_EVI) -> Pending Event(I_EVI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_evi.next_self_Event_ID ) ) )
  select one right_i_evi related by i_evi->I_EVI[R2939.''will be processed before''];
  if ( empty right_i_evi )
    ::check_log( message: "one instance not found I_EVI->I_EVI[R2939.''will be processed before'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_evi.Event_ID == i_evi.next_self_Event_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EVI and I_EVI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2964:  Pending Event(I_EVI) -> Component Instance(I_EXE)
  select one i_exe related by i_evi->I_EXE[R2964];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_EVI->I_EXE[R2964]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_evi.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EVI and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2976:  Pending Event(I_EVI) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_evi.Originating_Execution_Engine_ID ) ) )
  select one i_exe related by i_evi->I_EXE[R2976];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_EVI->I_EXE[R2976]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_evi.Originating_Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EVI and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_avls from instances of I_AVL;
for each i_avl in i_avls
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Inst_ID", trace_id:i_avl.Inst_ID, name:"" );
  select many duplicate_i_avls from instances of I_AVL where ( selected.Inst_ID == i_avl.Inst_ID and selected.Attr_ID == i_avl.Attr_ID );
  if ( cardinality duplicate_i_avls != 1 )
    ::check_log( message: "uniqueness violation in I_AVL for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2910:  Attribute Value(I_AVL) -> Attribute(O_ATTR)
  select one o_attr related by i_avl->O_ATTR[R2910];
  if ( empty o_attr )
    ::check_log( message: "one instance not found I_AVL->O_ATTR[R2910]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( o_attr.Attr_ID == i_avl.Attr_ID and o_attr.Obj_ID == i_avl.Obj_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_AVL and O_ATTR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2909:  Attribute Value(I_AVL) -> Instance(I_INS)
  select one i_ins related by i_avl->I_INS[R2909];
  if ( empty i_ins )
    ::check_log( message: "one instance not found I_AVL->I_INS[R2909]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_ins.Inst_ID == i_avl.Inst_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_AVL and I_INS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_inss from instances of I_INS;
for each i_ins in i_inss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Inst_ID", trace_id:i_ins.Inst_ID, name:i_ins.Name );
  select many duplicate_i_inss from instances of I_INS where ( selected.Inst_ID == i_ins.Inst_ID );
  if ( cardinality duplicate_i_inss != 1 )
    ::check_log( message: "uniqueness violation in I_INS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2915:  Instance(I_INS) -> State Machine State(SM_STATE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_ins.SMstt_ID ) ) )
  select one sm_state related by i_ins->SM_STATE[R2915];
  if ( empty sm_state )
    ::check_log( message: "one instance not found I_INS->SM_STATE[R2915]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_state.SM_ID == i_ins.SM_ID and sm_state.SMstt_ID == i_ins.SMstt_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_INS and SM_STATE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2953:  Instance(I_INS) -> Transition(SM_TXN)
  select one sm_txn related by i_ins->SM_TXN[R2953];
  if ( empty sm_txn )
    ::check_log( message: "one instance not found I_INS->SM_TXN[R2953]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_txn.Trans_ID == i_ins.Trans_ID and sm_txn.SM_ID == i_ins.SM_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_INS and SM_TXN", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2957:  Instance(I_INS) -> Component Instance(I_EXE)
  select one i_exe related by i_ins->I_EXE[R2957];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_INS->I_EXE[R2957]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_ins.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_INS and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_exes from instances of I_EXE;
for each i_exe in i_exes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Execution_Engine_ID", trace_id:i_exe.Execution_Engine_ID, name:"" );
  select many duplicate_i_exes from instances of I_EXE where ( selected.Execution_Engine_ID == i_exe.Execution_Engine_ID );
  if ( cardinality duplicate_i_exes != 1 )
    ::check_log( message: "uniqueness violation in I_EXE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // participant participation R2930:  Component Instance(I_EXE) -> Stack(I_STACK)
  select one i_stack related by i_exe->I_STACK[R2930];
  if ( empty i_stack )
    ::check_log( message: "one instance not found I_EXE->I_STACK[R2930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stack.Execution_Engine_ID == i_exe.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EXE and I_STACK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2955:  Component Instance(I_EXE) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_exe.Component_Id ) ) )
  select one c_c related by i_exe->C_C[R2955];
  if ( empty c_c )
    ::check_log( message: "one instance not found I_EXE->C_C[R2955]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == i_exe.Component_Id ) )
      ::check_log( message: "referentials do not match identifiers between I_EXE and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2963:  Component Instance(I_EXE) -> Component Reference(CL_IC)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_exe.ImportedComponent_Id ) ) )
  select one cl_ic related by i_exe->CL_IC[R2963];
  if ( empty cl_ic )
    ::check_log( message: "one instance not found I_EXE->CL_IC[R2963]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( cl_ic.Id == i_exe.ImportedComponent_Id ) )
      ::check_log( message: "referentials do not match identifiers between I_EXE and CL_IC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2970:  Component Instance(I_EXE) -> Package(EP_PKG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_exe.Package_ID ) ) )
  select one ep_pkg related by i_exe->EP_PKG[R2970];
  if ( empty ep_pkg )
    ::check_log( message: "one instance not found I_EXE->EP_PKG[R2970]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( ep_pkg.Package_ID == i_exe.Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EXE and EP_PKG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2975:  Component Instance(I_EXE) -> Component Instance Container(I_CIN)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_exe.Container_ID ) ) )
  select one i_cin related by i_exe->I_CIN[R2975];
  if ( empty i_cin )
    ::check_log( message: "one instance not found I_EXE->I_CIN[R2975]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_cin.Container_ID == i_exe.Container_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EXE and I_CIN", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_stfs from instances of I_STF;
for each i_stf in i_stfs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Stack_Frame_ID", trace_id:i_stf.Stack_Frame_ID, name:"" );
  select many duplicate_i_stfs from instances of I_STF where ( selected.Stack_Frame_ID == i_stf.Stack_Frame_ID );
  if ( cardinality duplicate_i_stfs != 1 )
    ::check_log( message: "uniqueness violation in I_STF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2928:  Stack Frame(I_STF) -> Stack Frame(I_STF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stf.Child_Stack_Frame_ID ) ) )
  select one right_i_stf related by i_stf->I_STF[R2928.''next context''];
  if ( empty right_i_stf )
    ::check_log( message: "one instance not found I_STF->I_STF[R2928.''next context'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_stf.Stack_Frame_ID == i_stf.Child_Stack_Frame_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STF and I_STF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2929:  Stack Frame(I_STF) -> Stack(I_STACK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stf.Top_Stack_Frame_Stack_ID ) ) )
  select one i_stack related by i_stf->I_STACK[R2929];
  if ( empty i_stack )
    ::check_log( message: "one instance not found I_STF->I_STACK[R2929]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stack.Stack_ID == i_stf.Top_Stack_Frame_Stack_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STF and I_STACK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2943:  Stack Frame(I_STF) -> Stack(I_STACK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stf.Stack_ID ) ) )
  select one i_stack related by i_stf->I_STACK[R2943];
  if ( empty i_stack )
    ::check_log( message: "one instance not found I_STF->I_STACK[R2943]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stack.Stack_ID == i_stf.Stack_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STF and I_STACK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2954:  Stack Frame(I_STF) -> Instance(I_INS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stf.Inst_ID ) ) )
  select one i_ins related by i_stf->I_INS[R2954];
  if ( empty i_ins )
    ::check_log( message: "one instance not found I_STF->I_INS[R2954]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_ins.Inst_ID == i_stf.Inst_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STF and I_INS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2965:  Stack Frame(I_STF) -> Stack Frame(I_STF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stf.Blocking_Stack_Frame_ID ) ) )
  select one right_i_stf related by i_stf->I_STF[R2965.''blocked by''];
  if ( empty right_i_stf )
    ::check_log( message: "one instance not found I_STF->I_STF[R2965.''blocked by'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_stf.Stack_Frame_ID == i_stf.Blocking_Stack_Frame_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STF and I_STF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2967:  Stack Frame(I_STF) -> Stack(I_STACK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stf.Value_Q_Stack_ID ) ) )
  select one i_stack related by i_stf->I_STACK[R2967];
  if ( empty i_stack )
    ::check_log( message: "one instance not found I_STF->I_STACK[R2967]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stack.Stack_ID == i_stf.Value_Q_Stack_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STF and I_STACK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_bsfs from instances of I_BSF;
for each i_bsf in i_bsfs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Block_ID", trace_id:i_bsf.Block_ID, name:"" );
  select many duplicate_i_bsfs from instances of I_BSF where ( selected.Block_ID == i_bsf.Block_ID and selected.Stack_Frame_ID == i_bsf.Stack_Frame_ID );
  if ( cardinality duplicate_i_bsfs != 1 )
    ::check_log( message: "uniqueness violation in I_BSF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2941:  Block in Stack Frame(I_BSF) -> Statement(ACT_SMT)
  select one act_smt related by i_bsf->ACT_SMT[R2941];
  if ( empty act_smt )
    ::check_log( message: "one instance not found I_BSF->ACT_SMT[R2941]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_smt.Statement_ID == i_bsf.Statement_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_BSF and ACT_SMT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R2923:  Block in Stack Frame(I_BSF) -> Block(ACT_BLK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_bsf.Block_ID ) ) )
  select one act_blk related by i_bsf->ACT_BLK[R2923];
  if ( empty act_blk )
    ::check_log( message: "one instance not found I_BSF->ACT_BLK[R2923]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( act_blk.Block_ID == i_bsf.Block_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_BSF and ACT_BLK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R2923:  Block in Stack Frame(I_BSF) -> Stack Frame(I_STF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_bsf.Stack_Frame_ID ) ) )
  select one i_stf related by i_bsf->I_STF[R2923];
  if ( empty i_stf )
    ::check_log( message: "one instance not found I_BSF->I_STF[R2923]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stf.Stack_Frame_ID == i_bsf.Stack_Frame_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_BSF and I_STF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_stacks from instances of I_STACK;
for each i_stack in i_stacks
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Stack_ID", trace_id:i_stack.Stack_ID, name:"" );
  select many duplicate_i_stacks from instances of I_STACK where ( selected.Stack_ID == i_stack.Stack_ID );
  if ( cardinality duplicate_i_stacks != 1 )
    ::check_log( message: "uniqueness violation in I_STACK for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2930:  Stack(I_STACK) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_stack.Execution_Engine_ID ) ) )
  select one i_exe related by i_stack->I_EXE[R2930];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_STACK->I_EXE[R2930]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_stack.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_STACK and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_divs from instances of I_DIV;
for each i_div in i_divs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"DIV_ID", trace_id:i_div.DIV_ID, name:"" );
  select many duplicate_i_divs from instances of I_DIV where ( selected.DIV_ID == i_div.DIV_ID );
  if ( cardinality duplicate_i_divs != 1 )
    ::check_log( message: "uniqueness violation in I_DIV for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2933:  Data Item Value(I_DIV) -> Pending Event(I_EVI)
  select one i_evi related by i_div->I_EVI[R2933];
  if ( empty i_evi )
    ::check_log( message: "one instance not found I_DIV->I_EVI[R2933]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_evi.Event_ID == i_div.Event_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_DIV and I_EVI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2934:  Data Item Value(I_DIV) -> State Machine Event Data Item(SM_EVTDI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_div.SM_ID ) and ::is_null_id( id:i_div.SMedi_ID ) ) )
  select one sm_evtdi related by i_div->SM_EVTDI[R2934];
  if ( empty sm_evtdi )
    ::check_log( message: "one instance not found I_DIV->SM_EVTDI[R2934]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( sm_evtdi.SM_ID == i_div.SM_ID and sm_evtdi.SMedi_ID == i_div.SMedi_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_DIV and SM_EVTDI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2956:  Data Item Value(I_DIV) -> Property Parameter(C_PP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_div.PP_Id ) ) )
  select one c_pp related by i_div->C_PP[R2956];
  if ( empty c_pp )
    ::check_log( message: "one instance not found I_DIV->C_PP[R2956]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_pp.PP_Id == i_div.PP_Id ) )
      ::check_log( message: "referentials do not match identifiers between I_DIV and C_PP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_tims from instances of I_TIM;
for each i_tim in i_tims
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Timer_ID", trace_id:i_tim.Timer_ID, name:"" );
  select many duplicate_i_tims from instances of I_TIM where ( selected.Timer_ID == i_tim.Timer_ID );
  if ( cardinality duplicate_i_tims != 1 )
    ::check_log( message: "uniqueness violation in I_TIM for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2940:  Timer(I_TIM) -> Pending Event(I_EVI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_tim.Event_ID ) ) )
  select one i_evi related by i_tim->I_EVI[R2940];
  if ( empty i_evi )
    ::check_log( message: "one instance not found I_TIM->I_EVI[R2940]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_evi.Event_ID == i_tim.Event_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_TIM and I_EVI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_eqes from instances of I_EQE;
for each i_eqe in i_eqes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Event_Queue_Entry_ID", trace_id:i_eqe.Event_Queue_Entry_ID, name:"" );
  select many duplicate_i_eqes from instances of I_EQE where ( selected.Event_Queue_Entry_ID == i_eqe.Event_Queue_Entry_ID );
  if ( cardinality duplicate_i_eqes != 1 )
    ::check_log( message: "uniqueness violation in I_EQE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2945:  Event Queue Entry(I_EQE) -> Event Queue Entry(I_EQE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_eqe.Next_Event_Queue_Entry_ID ) ) )
  select one right_i_eqe related by i_eqe->I_EQE[R2945.''follows''];
  if ( empty right_i_eqe )
    ::check_log( message: "one instance not found I_EQE->I_EQE[R2945.''follows'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_eqe.Event_Queue_Entry_ID == i_eqe.Next_Event_Queue_Entry_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EQE and I_EQE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator one participation R2944:  Event Queue Entry(I_EQE) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_eqe.Execution_Engine_ID ) ) )
  select one i_exe related by i_eqe->I_EXE[R2944];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_EQE->I_EXE[R2944]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_eqe.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EQE and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R2944:  Event Queue Entry(I_EQE) -> Pending Event(I_EVI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_eqe.Event_ID ) ) )
  select one i_evi related by i_eqe->I_EVI[R2944];
  if ( empty i_evi )
    ::check_log( message: "one instance not found I_EQE->I_EVI[R2944]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_evi.Event_ID == i_eqe.Event_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_EQE and I_EVI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_sqes from instances of I_SQE;
for each i_sqe in i_sqes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Self_Queue_Entry_ID", trace_id:i_sqe.Self_Queue_Entry_ID, name:"" );
  select many duplicate_i_sqes from instances of I_SQE where ( selected.Self_Queue_Entry_ID == i_sqe.Self_Queue_Entry_ID );
  if ( cardinality duplicate_i_sqes != 1 )
    ::check_log( message: "uniqueness violation in I_SQE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2947:  Self Queue Entry(I_SQE) -> Self Queue Entry(I_SQE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_sqe.Next_Self_Queue_Entry_ID ) ) )
  select one right_i_sqe related by i_sqe->I_SQE[R2947.''follows''];
  if ( empty right_i_sqe )
    ::check_log( message: "one instance not found I_SQE->I_SQE[R2947.''follows'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_sqe.Self_Queue_Entry_ID == i_sqe.Next_Self_Queue_Entry_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_SQE and I_SQE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator one participation R2946:  Self Queue Entry(I_SQE) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_sqe.Execution_Engine_ID ) ) )
  select one i_exe related by i_sqe->I_EXE[R2946];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_SQE->I_EXE[R2946]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_sqe.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_SQE and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R2946:  Self Queue Entry(I_SQE) -> Pending Event(I_EVI)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_sqe.Event_ID ) ) )
  select one i_evi related by i_sqe->I_EVI[R2946];
  if ( empty i_evi )
    ::check_log( message: "one instance not found I_SQE->I_EVI[R2946]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_evi.Event_ID == i_sqe.Event_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_SQE and I_EVI", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_mons from instances of I_MON;
for each i_mon in i_mons
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Execution_Engine_ID", trace_id:i_mon.Execution_Engine_ID, name:"" );
  select many duplicate_i_mons from instances of I_MON where ( selected.Execution_Engine_ID == i_mon.Execution_Engine_ID and selected.Inst_ID == i_mon.Inst_ID );
  if ( cardinality duplicate_i_mons != 1 )
    ::check_log( message: "uniqueness violation in I_MON for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R2949:  Monitor(I_MON) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_mon.Execution_Engine_ID ) ) )
  select one i_exe related by i_mon->I_EXE[R2949];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_MON->I_EXE[R2949]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_mon.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_MON and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R2949:  Monitor(I_MON) -> Instance(I_INS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_mon.Inst_ID ) ) )
  select one i_ins related by i_mon->I_INS[R2949];
  if ( empty i_ins )
    ::check_log( message: "one instance not found I_MON->I_INS[R2949]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_ins.Inst_ID == i_mon.Inst_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_MON and I_INS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_vsfs from instances of I_VSF;
for each i_vsf in i_vsfs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"ValueInStackFrame_ID", trace_id:i_vsf.ValueInStackFrame_ID, name:"" );
  select many duplicate_i_vsfs from instances of I_VSF where ( selected.ValueInStackFrame_ID == i_vsf.ValueInStackFrame_ID );
  if ( cardinality duplicate_i_vsfs != 1 )
    ::check_log( message: "uniqueness violation in I_VSF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2951:  Value in Stack Frame(I_VSF) -> Stack Frame(I_STF)
  select one i_stf related by i_vsf->I_STF[R2951];
  if ( empty i_stf )
    ::check_log( message: "one instance not found I_VSF->I_STF[R2951]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stf.Stack_Frame_ID == i_vsf.Stack_Frame_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_VSF and I_STF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2978:  Value in Stack Frame(I_VSF) -> Value(V_VAL)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_vsf.Value_ID ) ) )
  select one v_val related by i_vsf->V_VAL[R2978];
  if ( empty v_val )
    ::check_log( message: "one instance not found I_VSF->V_VAL[R2978]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( v_val.Value_ID == i_vsf.Value_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_VSF and V_VAL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_lips from instances of I_LIP;
for each i_lip in i_lips
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Inst_ID", trace_id:i_lip.Inst_ID, name:"" );
  select many duplicate_i_lips from instances of I_LIP where ( selected.Inst_ID == i_lip.Inst_ID and selected.Rel_ID == i_lip.Rel_ID );
  if ( cardinality duplicate_i_lips != 1 )
    ::check_log( message: "uniqueness violation in I_LIP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2958:  Link Participation(I_LIP) -> Instance(I_INS)
  select one i_ins related by i_lip->I_INS[R2958];
  if ( empty i_ins )
    ::check_log( message: "one instance not found I_LIP->I_INS[R2958]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_ins.Inst_ID == i_lip.Inst_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_LIP and I_INS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2959:  Link Participation(I_LIP) -> Association(R_REL)
  select one r_rel related by i_lip->R_REL[R2959];
  if ( empty r_rel )
    ::check_log( message: "one instance not found I_LIP->R_REL[R2959]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( r_rel.Rel_ID == i_lip.Rel_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_LIP and R_REL", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_rchs from instances of I_RCH;
for each i_rch in i_rchs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Execution_Engine_ID", trace_id:i_rch.Execution_Engine_ID, name:"" );
  select many duplicate_i_rchs from instances of I_RCH where ( selected.Channel_Id == i_rch.Channel_Id );
  if ( cardinality duplicate_i_rchs != 1 )
    ::check_log( message: "uniqueness violation in I_RCH for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_i_rchs from instances of I_RCH where ( selected.Execution_Engine_ID == i_rch.Execution_Engine_ID and selected.other_Execution_Engine_ID == i_rch.other_Execution_Engine_ID and selected.Satisfaction_Id == i_rch.Satisfaction_Id );
  if ( cardinality duplicate_i_rchs != 1 )
    ::check_log( message: "uniqueness violation in I_RCH for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2969:  Runtime Channel(I_RCH) -> Satisfaction(C_SF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_rch.Satisfaction_Id ) ) )
  select one c_sf related by i_rch->C_SF[R2969];
  if ( empty c_sf )
    ::check_log( message: "one instance not found I_RCH->C_SF[R2969]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_sf.Id == i_rch.Satisfaction_Id ) )
      ::check_log( message: "referentials do not match identifiers between I_RCH and C_SF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2973:  Runtime Channel(I_RCH) -> Runtime Channel(I_RCH)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_rch.Next_provider_Channel_Id ) ) )
  select one right_i_rch related by i_rch->I_RCH[R2973.''requirer''];
  if ( empty right_i_rch )
    ::check_log( message: "one instance not found I_RCH->I_RCH[R2973.''requirer'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_i_rch.Channel_Id == i_rch.Next_provider_Channel_Id ) )
      ::check_log( message: "referentials do not match identifiers between I_RCH and I_RCH", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R2972:  Runtime Channel(I_RCH) -> Delegation(C_DG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_rch.Delegation_Id ) ) )
  select one c_dg related by i_rch->C_DG[R2972];
  if ( empty c_dg )
    ::check_log( message: "one instance not found I_RCH->C_DG[R2972]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_dg.Id == i_rch.Delegation_Id ) )
      ::check_log( message: "referentials do not match identifiers between I_RCH and C_DG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator one participation R2968:  Runtime Channel(I_RCH) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_rch.Execution_Engine_ID ) ) )
  select one i_exe related by i_rch->I_EXE[R2968.''is interface provider to''];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_RCH->I_EXE[R2968.''is interface provider to'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_rch.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_RCH and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R2968:  Runtime Channel(I_RCH) -> Component Instance(I_EXE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_rch.other_Execution_Engine_ID ) ) )
  select one i_exe related by i_rch->I_EXE[R2968.''is interface requirer of''];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_RCH->I_EXE[R2968.''is interface requirer of'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_rch.other_Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_RCH and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_cins from instances of I_CIN;
for each i_cin in i_cins
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Container_ID", trace_id:i_cin.Container_ID, name:"" );
  select many duplicate_i_cins from instances of I_CIN where ( selected.Container_ID == i_cin.Container_ID );
  if ( cardinality duplicate_i_cins != 1 )
    ::check_log( message: "uniqueness violation in I_CIN for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2974:  Component Instance Container(I_CIN) -> Component Instance(I_EXE)
  select one i_exe related by i_cin->I_EXE[R2974];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_CIN->I_EXE[R2974]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_cin.Container_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_CIN and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many i_icqes from instances of I_ICQE;
for each i_icqe in i_icqes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Stack_ID", trace_id:i_icqe.Stack_ID, name:"" );
  select many duplicate_i_icqes from instances of I_ICQE where ( selected.Stack_ID == i_icqe.Stack_ID and selected.Stack_Frame_ID == i_icqe.Stack_Frame_ID );
  if ( cardinality duplicate_i_icqes != 1 )
    ::check_log( message: "uniqueness violation in I_ICQE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R2977:  Intercomponent Queue Entry(I_ICQE) -> Component Instance(I_EXE)
  select one i_exe related by i_icqe->I_EXE[R2977];
  if ( empty i_exe )
    ::check_log( message: "one instance not found I_ICQE->I_EXE[R2977]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_exe.Execution_Engine_ID == i_icqe.Execution_Engine_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_ICQE and I_EXE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R2966:  Intercomponent Queue Entry(I_ICQE) -> Stack(I_STACK)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_icqe.Stack_ID ) ) )
  select one i_stack related by i_icqe->I_STACK[R2966];
  if ( empty i_stack )
    ::check_log( message: "one instance not found I_ICQE->I_STACK[R2966]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stack.Stack_ID == i_icqe.Stack_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_ICQE and I_STACK", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R2966:  Intercomponent Queue Entry(I_ICQE) -> Stack Frame(I_STF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:i_icqe.Stack_Frame_ID ) ) )
  select one i_stf related by i_icqe->I_STF[R2966];
  if ( empty i_stf )
    ::check_log( message: "one instance not found I_ICQE->I_STF[R2966]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( i_stf.Stack_Frame_ID == i_icqe.Stack_Frame_ID ) )
      ::check_log( message: "referentials do not match identifiers between I_ICQE and I_STF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_cs from instances of C_C;
for each c_c in c_cs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_c.Id, name:c_c.Name );
  select many duplicate_c_cs from instances of C_C where ( selected.Id == c_c.Id );
  if ( cardinality duplicate_c_cs != 1 )
    ::check_log( message: "uniqueness violation in C_C for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Component(C_C) -> Packageable Element(PE_PE)
  select one pe_pe related by c_c->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across C_C->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_c related by pe_pe->C_C[R8001];
    if ( empty myself_c_c or ( myself_c_c != c_c ) )
      ::check_log( message: "same subtype not found looping back across C_C->PE_PE[R8001]->C_C[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_is from instances of C_I;
for each c_i in c_is
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_i.Id, name:c_i.Name );
  select many duplicate_c_is from instances of C_I where ( selected.Id == c_i.Id );
  if ( cardinality duplicate_c_is != 1 )
    ::check_log( message: "uniqueness violation in C_I for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Interface(C_I) -> Packageable Element(PE_PE)
  select one pe_pe related by c_i->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across C_I->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_i related by pe_pe->C_I[R8001];
    if ( empty myself_c_i or ( myself_c_i != c_i ) )
      ::check_log( message: "same subtype not found looping back across C_I->PE_PE[R8001]->C_I[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_ps from instances of C_P;
for each c_p in c_ps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Provision_Id", trace_id:c_p.Provision_Id, name:c_p.Name );
  select many duplicate_c_ps from instances of C_P where ( selected.Provision_Id == c_p.Provision_Id );
  if ( cardinality duplicate_c_ps != 1 )
    ::check_log( message: "uniqueness violation in C_P for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4009:  Provision(C_P) -> Interface Reference(C_IR)
  select one c_ir related by c_p->C_IR[R4009];
  if ( empty c_ir )
    ::check_log( message: "supertype not found across C_P->C_IR[R4009]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_p related by c_ir->C_P[R4009];
    if ( empty myself_c_p or ( myself_c_p != c_p ) )
      ::check_log( message: "same subtype not found looping back across C_P->C_IR[R4009]->C_P[R4009]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_rs from instances of C_R;
for each c_r in c_rs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Requirement_Id", trace_id:c_r.Requirement_Id, name:c_r.Name );
  select many duplicate_c_rs from instances of C_R where ( selected.Requirement_Id == c_r.Requirement_Id );
  if ( cardinality duplicate_c_rs != 1 )
    ::check_log( message: "uniqueness violation in C_R for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4009:  Requirement(C_R) -> Interface Reference(C_IR)
  select one c_ir related by c_r->C_IR[R4009];
  if ( empty c_ir )
    ::check_log( message: "supertype not found across C_R->C_IR[R4009]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_r related by c_ir->C_R[R4009];
    if ( empty myself_c_r or ( myself_c_r != c_r ) )
      ::check_log( message: "same subtype not found looping back across C_R->C_IR[R4009]->C_R[R4009]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_eps from instances of C_EP;
for each c_ep in c_eps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_ep.Id, name:c_ep.Name );
  select many duplicate_c_eps from instances of C_EP where ( selected.Id == c_ep.Id );
  if ( cardinality duplicate_c_eps != 1 )
    ::check_log( message: "uniqueness violation in C_EP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4003:  Executable Property(C_EP) -> Interface(C_I)
  select one c_i related by c_ep->C_I[R4003];
  if ( empty c_i )
    ::check_log( message: "one instance not found C_EP->C_I[R4003]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_i.Id == c_ep.Interface_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_EP and C_I", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R4004:  supertype Executable Property(C_EP)
  subtype_count = 0;
  select one c_io related by c_ep->C_IO[R4004];
  if ( not_empty c_io )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one c_as related by c_ep->C_AS[R4004];
  if ( not_empty c_as )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from C_EP across R4004", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from C_EP across R4004", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_ass from instances of C_AS;
for each c_as in c_ass
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_as.Id, name:c_as.Name );
  select many duplicate_c_ass from instances of C_AS where ( selected.Id == c_as.Id );
  if ( cardinality duplicate_c_ass != 1 )
    ::check_log( message: "uniqueness violation in C_AS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4020:  Interface Signal(C_AS) -> Interface Signal(C_AS)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_as.Previous_Id ) ) )
  select one right_c_as related by c_as->C_AS[R4020.''succeeds''];
  if ( empty right_c_as )
    ::check_log( message: "one instance not found C_AS->C_AS[R4020.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_c_as.Id == c_as.Previous_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_AS and C_AS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R4004:  Interface Signal(C_AS) -> Executable Property(C_EP)
  select one c_ep related by c_as->C_EP[R4004];
  if ( empty c_ep )
    ::check_log( message: "supertype not found across C_AS->C_EP[R4004]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_as related by c_ep->C_AS[R4004];
    if ( empty myself_c_as or ( myself_c_as != c_as ) )
      ::check_log( message: "same subtype not found looping back across C_AS->C_EP[R4004]->C_AS[R4004]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_ios from instances of C_IO;
for each c_io in c_ios
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_io.Id, name:c_io.Name );
  select many duplicate_c_ios from instances of C_IO where ( selected.Id == c_io.Id );
  if ( cardinality duplicate_c_ios != 1 )
    ::check_log( message: "uniqueness violation in C_IO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4008:  Interface Operation(C_IO) -> Data Type(S_DT)
  select one s_dt related by c_io->S_DT[R4008];
  if ( empty s_dt )
    ::check_log( message: "one instance not found C_IO->S_DT[R4008]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == c_io.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between C_IO and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4019:  Interface Operation(C_IO) -> Interface Operation(C_IO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_io.Previous_Id ) ) )
  select one right_c_io related by c_io->C_IO[R4019.''succeeds''];
  if ( empty right_c_io )
    ::check_log( message: "one instance not found C_IO->C_IO[R4019.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_c_io.Id == c_io.Previous_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_IO and C_IO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R4004:  Interface Operation(C_IO) -> Executable Property(C_EP)
  select one c_ep related by c_io->C_EP[R4004];
  if ( empty c_ep )
    ::check_log( message: "supertype not found across C_IO->C_EP[R4004]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_io related by c_ep->C_IO[R4004];
    if ( empty myself_c_io or ( myself_c_io != c_io ) )
      ::check_log( message: "same subtype not found looping back across C_IO->C_EP[R4004]->C_IO[R4004]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_sfs from instances of C_SF;
for each c_sf in c_sfs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Requirement_Id", trace_id:c_sf.Requirement_Id, name:"" );
  select many duplicate_c_sfs from instances of C_SF where ( selected.Id == c_sf.Id );
  if ( cardinality duplicate_c_sfs != 1 )
    ::check_log( message: "uniqueness violation in C_SF for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  select many duplicate_c_sfs from instances of C_SF where ( selected.Requirement_Id == c_sf.Requirement_Id and selected.Provision_Id == c_sf.Provision_Id );
  if ( cardinality duplicate_c_sfs != 1 )
    ::check_log( message: "uniqueness violation in C_SF for identifier 2", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R4002:  Satisfaction(C_SF) -> Requirement(C_R)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_sf.Requirement_Id ) ) )
  select one c_r related by c_sf->C_R[R4002];
  if ( empty c_r )
    ::check_log( message: "one instance not found C_SF->C_R[R4002]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_r.Requirement_Id == c_sf.Requirement_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_SF and C_R", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R4002:  Satisfaction(C_SF) -> Provision(C_P)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_sf.Provision_Id ) ) )
  select one c_p related by c_sf->C_P[R4002];
  if ( empty c_p )
    ::check_log( message: "one instance not found C_SF->C_P[R4002]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_p.Provision_Id == c_sf.Provision_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_SF and C_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R8001:  Satisfaction(C_SF) -> Packageable Element(PE_PE)
  select one pe_pe related by c_sf->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across C_SF->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_sf related by pe_pe->C_SF[R8001];
    if ( empty myself_c_sf or ( myself_c_sf != c_sf ) )
      ::check_log( message: "same subtype not found looping back across C_SF->PE_PE[R8001]->C_SF[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_pps from instances of C_PP;
for each c_pp in c_pps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"PP_Id", trace_id:c_pp.PP_Id, name:c_pp.Name );
  select many duplicate_c_pps from instances of C_PP where ( selected.PP_Id == c_pp.PP_Id );
  if ( cardinality duplicate_c_pps != 1 )
    ::check_log( message: "uniqueness violation in C_PP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4006:  Property Parameter(C_PP) -> Executable Property(C_EP)
  select one c_ep related by c_pp->C_EP[R4006];
  if ( empty c_ep )
    ::check_log( message: "one instance not found C_PP->C_EP[R4006]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_ep.Id == c_pp.Signal_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_PP and C_EP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4007:  Property Parameter(C_PP) -> Data Type(S_DT)
  select one s_dt related by c_pp->S_DT[R4007];
  if ( empty s_dt )
    ::check_log( message: "one instance not found C_PP->S_DT[R4007]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( s_dt.DT_ID == c_pp.DT_ID ) )
      ::check_log( message: "referentials do not match identifiers between C_PP and S_DT", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4021:  Property Parameter(C_PP) -> Property Parameter(C_PP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_pp.Previous_PP_Id ) ) )
  select one right_c_pp related by c_pp->C_PP[R4021.''succeeds''];
  if ( empty right_c_pp )
    ::check_log( message: "one instance not found C_PP->C_PP[R4021.''succeeds'']", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( right_c_pp.PP_Id == c_pp.Previous_PP_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_PP and C_PP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_irs from instances of C_IR;
for each c_ir in c_irs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_ir.Id, name:"" );
  select many duplicate_c_irs from instances of C_IR where ( selected.Id == c_ir.Id );
  if ( cardinality duplicate_c_irs != 1 )
    ::check_log( message: "uniqueness violation in C_IR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4012:  Interface Reference(C_IR) -> Interface(C_I)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_ir.Formal_Interface_Id ) ) )
  select one c_i related by c_ir->C_I[R4012];
  if ( empty c_i )
    ::check_log( message: "one instance not found C_IR->C_I[R4012]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_i.Id == c_ir.Formal_Interface_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_IR and C_I", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4014:  Interface Reference(C_IR) -> Delegation(C_DG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_ir.Delegation_Id ) ) )
  select one c_dg related by c_ir->C_DG[R4014];
  if ( empty c_dg )
    ::check_log( message: "one instance not found C_IR->C_DG[R4014]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_dg.Id == c_ir.Delegation_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_IR and C_DG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4016:  Interface Reference(C_IR) -> Port(C_PO)
  select one c_po related by c_ir->C_PO[R4016];
  if ( empty c_po )
    ::check_log( message: "one instance not found C_IR->C_PO[R4016]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_po.Id == c_ir.Port_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_IR and C_PO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R4009:  supertype Interface Reference(C_IR)
  subtype_count = 0;
  select one c_r related by c_ir->C_R[R4009];
  if ( not_empty c_r )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one c_p related by c_ir->C_P[R4009];
  if ( not_empty c_p )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from C_IR across R4009", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from C_IR across R4009", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_dgs from instances of C_DG;
for each c_dg in c_dgs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_dg.Id, name:c_dg.Name );
  select many duplicate_c_dgs from instances of C_DG where ( selected.Id == c_dg.Id );
  if ( cardinality duplicate_c_dgs != 1 )
    ::check_log( message: "uniqueness violation in C_DG for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // aoth participation R9002:  Delegation(C_DG) -> Delegation In Component(PA_DIC)
  select one pa_dic related by c_dg->PA_DIC[R9002];
  if ( empty pa_dic )
    ::check_log( message: "one instance not found C_DG->PA_DIC[R9002]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_dg.Id == pa_dic.Delegation_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_DG and PA_DIC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R8001:  Delegation(C_DG) -> Packageable Element(PE_PE)
  select one pe_pe related by c_dg->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across C_DG->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_c_dg related by pe_pe->C_DG[R8001];
    if ( empty myself_c_dg or ( myself_c_dg != c_dg ) )
      ::check_log( message: "same subtype not found looping back across C_DG->PE_PE[R8001]->C_DG[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_pos from instances of C_PO;
for each c_po in c_pos
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:c_po.Id, name:c_po.Name );
  select many duplicate_c_pos from instances of C_PO where ( selected.Id == c_po.Id );
  if ( cardinality duplicate_c_pos != 1 )
    ::check_log( message: "uniqueness violation in C_PO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4010:  Port(C_PO) -> Component(C_C)
  select one c_c related by c_po->C_C[R4010];
  if ( empty c_c )
    ::check_log( message: "one instance not found C_PO->C_C[R4010]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == c_po.Component_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_PO and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many c_rids from instances of C_RID;
for each c_rid in c_rids
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Reference_Id", trace_id:c_rid.Reference_Id, name:"" );
  select many duplicate_c_rids from instances of C_RID where ( selected.Reference_Id == c_rid.Reference_Id and selected.Delegation_Id == c_rid.Delegation_Id );
  if ( cardinality duplicate_c_rids != 1 )
    ::check_log( message: "uniqueness violation in C_RID for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R4013:  Interface Reference In Delegation(C_RID) -> Interface Reference(C_IR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_rid.Reference_Id ) ) )
  select one c_ir related by c_rid->C_IR[R4013];
  if ( empty c_ir )
    ::check_log( message: "one instance not found C_RID->C_IR[R4013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_ir.Id == c_rid.Reference_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_RID and C_IR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R4013:  Interface Reference In Delegation(C_RID) -> Delegation(C_DG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:c_rid.Delegation_Id ) ) )
  select one c_dg related by c_rid->C_DG[R4013];
  if ( empty c_dg )
    ::check_log( message: "one instance not found C_RID->C_DG[R4013]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_dg.Id == c_rid.Delegation_Id ) )
      ::check_log( message: "referentials do not match identifiers between C_RID and C_DG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many spr_reps from instances of SPR_REP;
for each spr_rep in spr_reps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:spr_rep.Id, name:"" );
  select many duplicate_spr_reps from instances of SPR_REP where ( selected.Id == spr_rep.Id );
  if ( cardinality duplicate_spr_reps != 1 )
    ::check_log( message: "uniqueness violation in SPR_REP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R4500:  Required Executable Property(SPR_REP) -> Executable Property(C_EP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:spr_rep.ExecutableProperty_Id ) ) )
  select one c_ep related by spr_rep->C_EP[R4500];
  if ( empty c_ep )
    ::check_log( message: "one instance not found SPR_REP->C_EP[R4500]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_ep.Id == spr_rep.ExecutableProperty_Id ) )
      ::check_log( message: "referentials do not match identifiers between SPR_REP and C_EP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R4500:  Required Executable Property(SPR_REP) -> Requirement(C_R)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:spr_rep.Requirement_Id ) ) )
  select one c_r related by spr_rep->C_R[R4500];
  if ( empty c_r )
    ::check_log( message: "one instance not found SPR_REP->C_R[R4500]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_r.Requirement_Id == spr_rep.Requirement_Id ) )
      ::check_log( message: "referentials do not match identifiers between SPR_REP and C_R", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R4502:  supertype Required Executable Property(SPR_REP)
  subtype_count = 0;
  select one spr_rs related by spr_rep->SPR_RS[R4502];
  if ( not_empty spr_rs )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one spr_ro related by spr_rep->SPR_RO[R4502];
  if ( not_empty spr_ro )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SPR_REP across R4502", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SPR_REP across R4502", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many spr_peps from instances of SPR_PEP;
for each spr_pep in spr_peps
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:spr_pep.Id, name:"" );
  select many duplicate_spr_peps from instances of SPR_PEP where ( selected.Id == spr_pep.Id );
  if ( cardinality duplicate_spr_peps != 1 )
    ::check_log( message: "uniqueness violation in SPR_PEP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R4501:  Provided Executable Property(SPR_PEP) -> Executable Property(C_EP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:spr_pep.ExecutableProperty_Id ) ) )
  select one c_ep related by spr_pep->C_EP[R4501];
  if ( empty c_ep )
    ::check_log( message: "one instance not found SPR_PEP->C_EP[R4501]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_ep.Id == spr_pep.ExecutableProperty_Id ) )
      ::check_log( message: "referentials do not match identifiers between SPR_PEP and C_EP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R4501:  Provided Executable Property(SPR_PEP) -> Provision(C_P)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:spr_pep.Provision_Id ) ) )
  select one c_p related by spr_pep->C_P[R4501];
  if ( empty c_p )
    ::check_log( message: "one instance not found SPR_PEP->C_P[R4501]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_p.Provision_Id == spr_pep.Provision_Id ) )
      ::check_log( message: "referentials do not match identifiers between SPR_PEP and C_P", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R4503:  supertype Provided Executable Property(SPR_PEP)
  subtype_count = 0;
  select one spr_po related by spr_pep->SPR_PO[R4503];
  if ( not_empty spr_po )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one spr_ps related by spr_pep->SPR_PS[R4503];
  if ( not_empty spr_ps )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from SPR_PEP across R4503", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from SPR_PEP across R4503", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many spr_ros from instances of SPR_RO;
for each spr_ro in spr_ros
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:spr_ro.Id, name:spr_ro.Name );
  select many duplicate_spr_ros from instances of SPR_RO where ( selected.Id == spr_ro.Id );
  if ( cardinality duplicate_spr_ros != 1 )
    ::check_log( message: "uniqueness violation in SPR_RO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4502:  Required Operation(SPR_RO) -> Required Executable Property(SPR_REP)
  select one spr_rep related by spr_ro->SPR_REP[R4502];
  if ( empty spr_rep )
    ::check_log( message: "supertype not found across SPR_RO->SPR_REP[R4502]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_spr_ro related by spr_rep->SPR_RO[R4502];
    if ( empty myself_spr_ro or ( myself_spr_ro != spr_ro ) )
      ::check_log( message: "same subtype not found looping back across SPR_RO->SPR_REP[R4502]->SPR_RO[R4502]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many spr_rss from instances of SPR_RS;
for each spr_rs in spr_rss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:spr_rs.Id, name:spr_rs.Name );
  select many duplicate_spr_rss from instances of SPR_RS where ( selected.Id == spr_rs.Id );
  if ( cardinality duplicate_spr_rss != 1 )
    ::check_log( message: "uniqueness violation in SPR_RS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4502:  Required Signal(SPR_RS) -> Required Executable Property(SPR_REP)
  select one spr_rep related by spr_rs->SPR_REP[R4502];
  if ( empty spr_rep )
    ::check_log( message: "supertype not found across SPR_RS->SPR_REP[R4502]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_spr_rs related by spr_rep->SPR_RS[R4502];
    if ( empty myself_spr_rs or ( myself_spr_rs != spr_rs ) )
      ::check_log( message: "same subtype not found looping back across SPR_RS->SPR_REP[R4502]->SPR_RS[R4502]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many spr_pos from instances of SPR_PO;
for each spr_po in spr_pos
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:spr_po.Id, name:spr_po.Name );
  select many duplicate_spr_pos from instances of SPR_PO where ( selected.Id == spr_po.Id );
  if ( cardinality duplicate_spr_pos != 1 )
    ::check_log( message: "uniqueness violation in SPR_PO for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4503:  Provided Operation(SPR_PO) -> Provided Executable Property(SPR_PEP)
  select one spr_pep related by spr_po->SPR_PEP[R4503];
  if ( empty spr_pep )
    ::check_log( message: "supertype not found across SPR_PO->SPR_PEP[R4503]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_spr_po related by spr_pep->SPR_PO[R4503];
    if ( empty myself_spr_po or ( myself_spr_po != spr_po ) )
      ::check_log( message: "same subtype not found looping back across SPR_PO->SPR_PEP[R4503]->SPR_PO[R4503]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many spr_pss from instances of SPR_PS;
for each spr_ps in spr_pss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:spr_ps.Id, name:spr_ps.Name );
  select many duplicate_spr_pss from instances of SPR_PS where ( selected.Id == spr_ps.Id );
  if ( cardinality duplicate_spr_pss != 1 )
    ::check_log( message: "uniqueness violation in SPR_PS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4503:  Provided Signal(SPR_PS) -> Provided Executable Property(SPR_PEP)
  select one spr_pep related by spr_ps->SPR_PEP[R4503];
  if ( empty spr_pep )
    ::check_log( message: "supertype not found across SPR_PS->SPR_PEP[R4503]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_spr_ps related by spr_pep->SPR_PS[R4503];
    if ( empty myself_spr_ps or ( myself_spr_ps != spr_ps ) )
      ::check_log( message: "same subtype not found looping back across SPR_PS->SPR_PEP[R4503]->SPR_PS[R4503]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cl_ipinss from instances of CL_IPINS;
for each cl_ipins in cl_ipinss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"ImportedProvision_Id", trace_id:cl_ipins.ImportedProvision_Id, name:"" );
  select many duplicate_cl_ipinss from instances of CL_IPINS where ( selected.ImportedProvision_Id == cl_ipins.ImportedProvision_Id and selected.Satisfaction_Id == cl_ipins.Satisfaction_Id );
  if ( cardinality duplicate_cl_ipinss != 1 )
    ::check_log( message: "uniqueness violation in CL_IPINS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R4705:  Imported Provision In Satisfaction(CL_IPINS) -> Satisfaction(C_SF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_ipins.Satisfaction_Id ) ) )
  select one c_sf related by cl_ipins->C_SF[R4705];
  if ( empty c_sf )
    ::check_log( message: "one instance not found CL_IPINS->C_SF[R4705]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_sf.Id == cl_ipins.Satisfaction_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IPINS and C_SF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R4705:  Imported Provision In Satisfaction(CL_IPINS) -> Imported Provision(CL_IP)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_ipins.ImportedProvision_Id ) ) )
  select one cl_ip related by cl_ipins->CL_IP[R4705];
  if ( empty cl_ip )
    ::check_log( message: "one instance not found CL_IPINS->CL_IP[R4705]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( cl_ip.Id == cl_ipins.ImportedProvision_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IPINS and CL_IP", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cl_ips from instances of CL_IP;
for each cl_ip in cl_ips
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:cl_ip.Id, name:cl_ip.Name );
  select many duplicate_cl_ips from instances of CL_IP where ( selected.Id == cl_ip.Id );
  if ( cardinality duplicate_cl_ips != 1 )
    ::check_log( message: "uniqueness violation in CL_IP for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // sub to super participation R4703:  Imported Provision(CL_IP) -> Imported Reference(CL_IIR)
  select one cl_iir related by cl_ip->CL_IIR[R4703];
  if ( empty cl_iir )
    ::check_log( message: "supertype not found across CL_IP->CL_IIR[R4703]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_cl_ip related by cl_iir->CL_IP[R4703];
    if ( empty myself_cl_ip or ( myself_cl_ip != cl_ip ) )
      ::check_log( message: "same subtype not found looping back across CL_IP->CL_IIR[R4703]->CL_IP[R4703]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cl_irs from instances of CL_IR;
for each cl_ir in cl_irs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:cl_ir.Id, name:cl_ir.Name );
  select many duplicate_cl_irs from instances of CL_IR where ( selected.Id == cl_ir.Id );
  if ( cardinality duplicate_cl_irs != 1 )
    ::check_log( message: "uniqueness violation in CL_IR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4706:  Imported Requirement(CL_IR) -> Satisfaction(C_SF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_ir.Satisfaction_Element_Id ) ) )
  select one c_sf related by cl_ir->C_SF[R4706];
  if ( empty c_sf )
    ::check_log( message: "one instance not found CL_IR->C_SF[R4706]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_sf.Id == cl_ir.Satisfaction_Element_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IR and C_SF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R4703:  Imported Requirement(CL_IR) -> Imported Reference(CL_IIR)
  select one cl_iir related by cl_ir->CL_IIR[R4703];
  if ( empty cl_iir )
    ::check_log( message: "supertype not found across CL_IR->CL_IIR[R4703]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_cl_ir related by cl_iir->CL_IR[R4703];
    if ( empty myself_cl_ir or ( myself_cl_ir != cl_ir ) )
      ::check_log( message: "same subtype not found looping back across CL_IR->CL_IIR[R4703]->CL_IR[R4703]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cl_iirs from instances of CL_IIR;
for each cl_iir in cl_iirs
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:cl_iir.Id, name:cl_iir.Name );
  select many duplicate_cl_iirs from instances of CL_IIR where ( selected.Id == cl_iir.Id );
  if ( cardinality duplicate_cl_iirs != 1 )
    ::check_log( message: "uniqueness violation in CL_IIR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4701:  Imported Reference(CL_IIR) -> Interface Reference(C_IR)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_iir.Ref_Id ) ) )
  select one c_ir related by cl_iir->C_IR[R4701];
  if ( empty c_ir )
    ::check_log( message: "one instance not found CL_IIR->C_IR[R4701]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_ir.Id == cl_iir.Ref_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IIR and C_IR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4704:  Imported Reference(CL_IIR) -> Delegation(C_DG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_iir.Delegation_Id ) ) )
  select one c_dg related by cl_iir->C_DG[R4704];
  if ( empty c_dg )
    ::check_log( message: "one instance not found CL_IIR->C_DG[R4704]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_dg.Id == cl_iir.Delegation_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IIR and C_DG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4708:  Imported Reference(CL_IIR) -> Port Reference(CL_POR)
  select one cl_por related by cl_iir->CL_POR[R4708];
  if ( empty cl_por )
    ::check_log( message: "one instance not found CL_IIR->CL_POR[R4708]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( cl_por.Id == cl_iir.CL_POR_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IIR and CL_POR", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // super to sub participation R4703:  supertype Imported Reference(CL_IIR)
  subtype_count = 0;
  select one cl_ip related by cl_iir->CL_IP[R4703];
  if ( not_empty cl_ip )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one cl_ir related by cl_iir->CL_IR[R4703];
  if ( not_empty cl_ir )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from CL_IIR across R4703", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from CL_IIR across R4703", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cl_ics from instances of CL_IC;
for each cl_ic in cl_ics
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:cl_ic.Id, name:cl_ic.Name );
  select many duplicate_cl_ics from instances of CL_IC where ( selected.Id == cl_ic.Id );
  if ( cardinality duplicate_cl_ics != 1 )
    ::check_log( message: "uniqueness violation in CL_IC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4201:  Component Reference(CL_IC) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_ic.AssignedComp_Id ) ) )
  select one c_c related by cl_ic->C_C[R4201];
  if ( empty c_c )
    ::check_log( message: "one instance not found CL_IC->C_C[R4201]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == cl_ic.AssignedComp_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IC and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R4205:  Component Reference(CL_IC) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_ic.ParentComp_Id ) ) )
  select one c_c related by cl_ic->C_C[R4205];
  if ( empty c_c )
    ::check_log( message: "one instance not found CL_IC->C_C[R4205]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == cl_ic.ParentComp_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_IC and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // sub to super participation R8001:  Component Reference(CL_IC) -> Packageable Element(PE_PE)
  select one pe_pe related by cl_ic->PE_PE[R8001];
  if ( empty pe_pe )
    ::check_log( message: "supertype not found across CL_IC->PE_PE[R8001]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    select one myself_cl_ic related by pe_pe->CL_IC[R8001];
    if ( empty myself_cl_ic or ( myself_cl_ic != cl_ic ) )
      ::check_log( message: "same subtype not found looping back across CL_IC->PE_PE[R8001]->CL_IC[R8001]", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many cl_pors from instances of CL_POR;
for each cl_por in cl_pors
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:cl_por.Id, name:cl_por.Name );
  select many duplicate_cl_pors from instances of CL_POR where ( selected.Id == cl_por.Id );
  if ( cardinality duplicate_cl_pors != 1 )
    ::check_log( message: "uniqueness violation in CL_POR for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4707:  Port Reference(CL_POR) -> Component Reference(CL_IC)
  select one cl_ic related by cl_por->CL_IC[R4707];
  if ( empty cl_ic )
    ::check_log( message: "one instance not found CL_POR->CL_IC[R4707]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( cl_ic.Id == cl_por.CL_IC_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_POR and CL_IC", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R4709:  Port Reference(CL_POR) -> Port(C_PO)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:cl_por.C_PO_Id ) ) )
  select one c_po related by cl_por->C_PO[R4709];
  if ( empty c_po )
    ::check_log( message: "one instance not found CL_POR->C_PO[R4709]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_po.Id == cl_por.C_PO_Id ) )
      ::check_log( message: "referentials do not match identifiers between CL_POR and C_PO", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pe_pes from instances of PE_PE;
for each pe_pe in pe_pes
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Element_ID", trace_id:pe_pe.Element_ID, name:"" );
  select many duplicate_pe_pes from instances of PE_PE where ( selected.Element_ID == pe_pe.Element_ID );
  if ( cardinality duplicate_pe_pes != 1 )
    ::check_log( message: "uniqueness violation in PE_PE for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R8000:  Packageable Element(PE_PE) -> Package(EP_PKG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pe_pe.Package_ID ) ) )
  select one ep_pkg related by pe_pe->EP_PKG[R8000];
  if ( empty ep_pkg )
    ::check_log( message: "one instance not found PE_PE->EP_PKG[R8000]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( ep_pkg.Package_ID == pe_pe.Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between PE_PE and EP_PKG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // formalizer participation R8003:  Packageable Element(PE_PE) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pe_pe.Component_ID ) ) )
  select one c_c related by pe_pe->C_C[R8003];
  if ( empty c_c )
    ::check_log( message: "one instance not found PE_PE->C_C[R8003]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == pe_pe.Component_ID ) )
      ::check_log( message: "referentials do not match identifiers between PE_PE and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // super to sub participation R8001:  supertype Packageable Element(PE_PE)
  subtype_count = 0;
  select one s_dt related by pe_pe->S_DT[R8001];
  if ( not_empty s_dt )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one sq_p related by pe_pe->SQ_P[R8001];
  if ( not_empty sq_p )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one uc_uca related by pe_pe->UC_UCA[R8001];
  if ( not_empty uc_uca )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_n related by pe_pe->A_N[R8001];
  if ( not_empty a_n )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one o_obj related by pe_pe->O_OBJ[R8001];
  if ( not_empty o_obj )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one c_c related by pe_pe->C_C[R8001];
  if ( not_empty c_c )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one cl_ic related by pe_pe->CL_IC[R8001];
  if ( not_empty cl_ic )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one c_i related by pe_pe->C_I[R8001];
  if ( not_empty c_i )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one ep_pkg related by pe_pe->EP_PKG[R8001];
  if ( not_empty ep_pkg )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one cnst_csp related by pe_pe->CNST_CSP[R8001];
  if ( not_empty cnst_csp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_ap related by pe_pe->A_AP[R8001];
  if ( not_empty a_ap )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one a_e related by pe_pe->A_E[R8001];
  if ( not_empty a_e )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one msg_m related by pe_pe->MSG_M[R8001];
  if ( not_empty msg_m )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one o_iobj related by pe_pe->O_IOBJ[R8001];
  if ( not_empty o_iobj )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one r_rel related by pe_pe->R_REL[R8001];
  if ( not_empty r_rel )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_ee related by pe_pe->S_EE[R8001];
  if ( not_empty s_ee )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_sync related by pe_pe->S_SYNC[R8001];
  if ( not_empty s_sync )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one c_sf related by pe_pe->C_SF[R8001];
  if ( not_empty c_sf )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one c_dg related by pe_pe->C_DG[R8001];
  if ( not_empty c_dg )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  select one s_exp related by pe_pe->S_EXP[R8001];
  if ( not_empty s_exp )
    subtype_count = subtype_count + 1;
  end if;
  check_count = check_count + 1;
  if ( subtype_count < 1 )
    ::check_log( message: "subtype not found from PE_PE across R8001", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  elif ( subtype_count > 1 )
    ::check_log( message: "more than one subtype found from PE_PE across R8001", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    // nop
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pe_viss from instances of PE_VIS;
for each pe_vis in pe_viss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Element_ID", trace_id:pe_vis.Element_ID, name:pe_vis.Name );
  select many duplicate_pe_viss from instances of PE_VIS where ( selected.Element_ID == pe_vis.Element_ID and selected.Package_ID == pe_vis.Package_ID and selected.Visibility_ID == pe_vis.Visibility_ID );
  if ( cardinality duplicate_pe_viss != 1 )
    ::check_log( message: "uniqueness violation in PE_VIS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R8006:  Element Visibility(PE_VIS) -> Search Result Set(PE_SRS)
  select one pe_srs related by pe_vis->PE_SRS[R8006];
  if ( empty pe_srs )
    ::check_log( message: "one instance not found PE_VIS->PE_SRS[R8006]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( pe_srs.Name == pe_vis.Name and pe_srs.Type == pe_vis.Type and pe_srs.Package_ID == pe_vis.Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between PE_VIS and PE_SRS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R8002:  Element Visibility(PE_VIS) -> Packageable Element(PE_PE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pe_vis.Element_ID ) ) )
  select one pe_pe related by pe_vis->PE_PE[R8002];
  if ( empty pe_pe )
    ::check_log( message: "one instance not found PE_VIS->PE_PE[R8002]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( pe_pe.Element_ID == pe_vis.Element_ID ) )
      ::check_log( message: "referentials do not match identifiers between PE_VIS and PE_PE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R8002:  Element Visibility(PE_VIS) -> Package(EP_PKG)
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pe_cvss from instances of PE_CVS;
for each pe_cvs in pe_cvss
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Id", trace_id:pe_cvs.Id, name:pe_cvs.Name );
  select many duplicate_pe_cvss from instances of PE_CVS where ( selected.Id == pe_cvs.Id and selected.Element_ID == pe_cvs.Element_ID and selected.Visibility_ID == pe_cvs.Visibility_ID );
  if ( cardinality duplicate_pe_cvss != 1 )
    ::check_log( message: "uniqueness violation in PE_CVS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R8008:  Component Visibility(PE_CVS) -> Component Result Set(PE_CRS)
  select one pe_crs related by pe_cvs->PE_CRS[R8008];
  if ( empty pe_crs )
    ::check_log( message: "one instance not found PE_CVS->PE_CRS[R8008]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( pe_crs.Name == pe_cvs.Name and pe_crs.Type == pe_cvs.Type and pe_crs.Id == pe_cvs.Id ) )
      ::check_log( message: "referentials do not match identifiers between PE_CVS and PE_CRS", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R8004:  Component Visibility(PE_CVS) -> Component(C_C)
  // associator other participation R8004:  Component Visibility(PE_CVS) -> Packageable Element(PE_PE)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pe_cvs.Element_ID ) ) )
  select one pe_pe related by pe_cvs->PE_PE[R8004];
  if ( empty pe_pe )
    ::check_log( message: "one instance not found PE_CVS->PE_PE[R8004]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( pe_pe.Element_ID == pe_cvs.Element_ID ) )
      ::check_log( message: "referentials do not match identifiers between PE_CVS and PE_PE", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pe_srss from instances of PE_SRS;
for each pe_srs in pe_srss
  instance_count = instance_count + 1;
  trace = "";
  select many duplicate_pe_srss from instances of PE_SRS where ( selected.Name == pe_srs.Name and selected.Type == pe_srs.Type and selected.Package_ID == pe_srs.Package_ID );
  if ( cardinality duplicate_pe_srss != 1 )
    ::check_log( message: "uniqueness violation in PE_SRS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R8005:  Search Result Set(PE_SRS) -> Package(EP_PKG)
  select one ep_pkg related by pe_srs->EP_PKG[R8005];
  if ( empty ep_pkg )
    ::check_log( message: "one instance not found PE_SRS->EP_PKG[R8005]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( ep_pkg.Package_ID == pe_srs.Package_ID ) )
      ::check_log( message: "referentials do not match identifiers between PE_SRS and EP_PKG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pe_crss from instances of PE_CRS;
for each pe_crs in pe_crss
  instance_count = instance_count + 1;
  trace = "";
  select many duplicate_pe_crss from instances of PE_CRS where ( selected.Name == pe_crs.Name and selected.Type == pe_crs.Type and selected.Id == pe_crs.Id );
  if ( cardinality duplicate_pe_crss != 1 )
    ::check_log( message: "uniqueness violation in PE_CRS for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // formalizer participation R8007:  Component Result Set(PE_CRS) -> Component(C_C)
  select one c_c related by pe_crs->C_C[R8007];
  if ( empty c_c )
    ::check_log( message: "one instance not found PE_CRS->C_C[R8007]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == pe_crs.Id ) )
      ::check_log( message: "referentials do not match identifiers between PE_CRS and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pa_sics from instances of PA_SIC;
for each pa_sic in pa_sics
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Component_Id", trace_id:pa_sic.Component_Id, name:"" );
  select many duplicate_pa_sics from instances of PA_SIC where ( selected.Component_Id == pa_sic.Component_Id and selected.Satisfaction_Id == pa_sic.Satisfaction_Id );
  if ( cardinality duplicate_pa_sics != 1 )
    ::check_log( message: "uniqueness violation in PA_SIC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R9000:  Satisfaction In Component(PA_SIC) -> Component(C_C)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pa_sic.Component_Id ) ) )
  select one c_c related by pa_sic->C_C[R9000];
  if ( empty c_c )
    ::check_log( message: "one instance not found PA_SIC->C_C[R9000]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == pa_sic.Component_Id ) )
      ::check_log( message: "referentials do not match identifiers between PA_SIC and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
  // associator other participation R9000:  Satisfaction In Component(PA_SIC) -> Satisfaction(C_SF)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pa_sic.Satisfaction_Id ) ) )
  select one c_sf related by pa_sic->C_SF[R9000];
  if ( empty c_sf )
    ::check_log( message: "one instance not found PA_SIC->C_SF[R9000]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_sf.Id == pa_sic.Satisfaction_Id ) )
      ::check_log( message: "referentials do not match identifiers between PA_SIC and C_SF", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
local_error_count = 0;
select many pa_dics from instances of PA_DIC;
for each pa_dic in pa_dics
  instance_count = instance_count + 1;
  trace = ::check_trace( trace_attribute:"Component_Id", trace_id:pa_dic.Component_Id, name:"" );
  select many duplicate_pa_dics from instances of PA_DIC where ( selected.Component_Id == pa_dic.Component_Id and selected.Delegation_Id == pa_dic.Delegation_Id );
  if ( cardinality duplicate_pa_dics != 1 )
    ::check_log( message: "uniqueness violation in PA_DIC for identifier 1", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  end if;
  check_count = check_count + 1;
  // associator one participation R9002:  Delegation In Component(PA_DIC) -> Component(C_C)
  select one c_c related by pa_dic->C_C[R9002];
  if ( empty c_c )
    ::check_log( message: "one instance not found PA_DIC->C_C[R9002]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_c.Id == pa_dic.Component_Id ) )
      ::check_log( message: "referentials do not match identifiers between PA_DIC and C_C", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  // associator other participation R9002:  Delegation In Component(PA_DIC) -> Delegation(C_DG)
  // checking conditional link only if referential attribute is non-null
  if ( not ( ::is_null_id( id:pa_dic.Delegation_Id ) ) )
  select one c_dg related by pa_dic->C_DG[R9002];
  if ( empty c_dg )
    ::check_log( message: "one instance not found PA_DIC->C_DG[R9002]", trace:trace );
    local_error_count = local_error_count + 1;
    if ( 10 < local_error_count )
      break;
    end if;
  else
    if ( not ( c_dg.Id == pa_dic.Delegation_Id ) )
      ::check_log( message: "referentials do not match identifiers between PA_DIC and C_DG", trace:trace );
      local_error_count = local_error_count + 1;
      if ( 10 < local_error_count )
        break;
      end if;
    end if;
  end if;
  check_count = check_count + 1;
  end if;
end for;
total_error_count = total_error_count + local_error_count;
::check_log_integer( message:"instances checked:  ", i:instance_count );
::check_log_integer( message:"checks made:  ", i:check_count );
::check_log_integer( message:"errors found:  ", i:total_error_count );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("e559aaf6-ab55-4b2d-bedf-9c6f95fefff5",
	1,
	"e409e116-2060-4994-8235-9f2ecc5db2b9",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("847f28d9-2231-428c-9cd1-a553df19511e",
	"00000000-0000-0000-0000-000000000000",
	'check_trace',
	'',
	'trace = param.trace_attribute;
uuid = "00000000-0000-0000-0000-000000000000";
trace = trace + " " + STRING::idtoa( a:uuid, id:param.trace_id );
trace = trace + " " + param.name;
return trace;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3a0df8e0-f087-40cd-a4e2-6a37b3f71b91",
	"847f28d9-2231-428c-9cd1-a553df19511e",
	'trace_attribute',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3cc8c484-d0c2-4308-b8c0-f7a5594ec302",
	"847f28d9-2231-428c-9cd1-a553df19511e",
	'trace_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3a0df8e0-f087-40cd-a4e2-6a37b3f71b91",
	'');
INSERT INTO S_SPARM
	VALUES ("74a94de2-55d1-48d4-8448-335b271d176e",
	"847f28d9-2231-428c-9cd1-a553df19511e",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3cc8c484-d0c2-4308-b8c0-f7a5594ec302",
	'');
INSERT INTO PE_PE
	VALUES ("847f28d9-2231-428c-9cd1-a553df19511e",
	1,
	"e409e116-2060-4994-8235-9f2ecc5db2b9",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("40903693-0728-4f01-bbe1-640af096a172",
	"00000000-0000-0000-0000-000000000000",
	'check_log',
	'',
	's = param.message + ":  " + param.trace;
LOG::LogInfo( message:s );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3a7e353b-564d-445a-9f97-b451b83960e5",
	"40903693-0728-4f01-bbe1-640af096a172",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9682b855-599f-43e1-afe2-bd2c2b95d743",
	"40903693-0728-4f01-bbe1-640af096a172",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3a7e353b-564d-445a-9f97-b451b83960e5",
	'');
INSERT INTO PE_PE
	VALUES ("40903693-0728-4f01-bbe1-640af096a172",
	1,
	"e409e116-2060-4994-8235-9f2ecc5db2b9",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5b0e26b8-cb7e-4796-a10d-28f52f880d3c",
	"00000000-0000-0000-0000-000000000000",
	'is_null_id',
	'',
	'return 0 == T::idtoi( id:param.id );',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5397ce90-27c2-49da-a5b8-17125e9d2785",
	"5b0e26b8-cb7e-4796-a10d-28f52f880d3c",
	'id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5b0e26b8-cb7e-4796-a10d-28f52f880d3c",
	1,
	"e409e116-2060-4994-8235-9f2ecc5db2b9",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5956ac3c-391a-4f96-8468-c715f5fa0bd3",
	"00000000-0000-0000-0000-000000000000",
	'check_log_integer',
	'',
	's = param.message + STRING::itoa( i:param.i );
LOG::LogInfo( message:s );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("75449ea9-a732-49de-910a-43a368181b16",
	"5956ac3c-391a-4f96-8468-c715f5fa0bd3",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1ba47381-faa3-4a26-8d33-b94f8e3f6aca",
	"5956ac3c-391a-4f96-8468-c715f5fa0bd3",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"75449ea9-a732-49de-910a-43a368181b16",
	'');
INSERT INTO PE_PE
	VALUES ("5956ac3c-391a-4f96-8468-c715f5fa0bd3",
	1,
	"e409e116-2060-4994-8235-9f2ecc5db2b9",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("e409e116-2060-4994-8235-9f2ecc5db2b9",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("ac72a1fd-c7b6-4d22-bf49-996f2af2ffad",
	'integrity',
	1,
	'../integrity.xtuml');
