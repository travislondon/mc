-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'domain',
	3702,
	'domain',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("b20f6b27-99e6-4c7a-8509-a6b8cc8832d4",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'populate',
	'',
	"baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	0,
	'project = param.project;
create object instance domain of domain;
domain.name = param.name;
domain.implementation_system = param.implementation_system;
domain.key_letters = param.key_letters;
domain.version = "1";
if ( not_empty project )
  relate project to domain across R3701.''configures'';
end if;
markable = markable::populate( name:"domain" );
relate domain to markable across R3783;
return domain;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("11b21edf-33b3-49d7-8a2d-c247985704d7",
	"b20f6b27-99e6-4c7a-8509-a6b8cc8832d4",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("987ba81d-6fe9-40f2-ad79-a7d08847d4f2",
	"b20f6b27-99e6-4c7a-8509-a6b8cc8832d4",
	'project',
	"f6bc1fc3-7c5a-4872-a359-b2e25e1712d9",
	0,
	'',
	"c7c24032-6c3f-4479-bc73-3943aee1d144",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f6bc1fc3-7c5a-4872-a359-b2e25e1712d9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<project>',
	'',
	'',
	'../masl.xtuml');
INSERT INTO O_TPARM
	VALUES ("c7c24032-6c3f-4479-bc73-3943aee1d144",
	"b20f6b27-99e6-4c7a-8509-a6b8cc8832d4",
	'key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"11b21edf-33b3-49d7-8a2d-c247985704d7",
	'');
INSERT INTO O_TPARM
	VALUES ("22880c84-a9f2-412c-896f-ca6170e0ca8e",
	"b20f6b27-99e6-4c7a-8509-a6b8cc8832d4",
	'implementation_system',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"987ba81d-6fe9-40f2-ad79-a7d08847d4f2",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<domain>',
	'',
	'',
	'../masl.xtuml');
INSERT INTO O_TFR
	VALUES ("0d6eab48-8a19-474c-a54c-d16da938995b",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'if ( "MASL" == genfile::architecture() )
  
select many descrips related by self->markable[R3783]->element[R3786]->description[R3796];
for each descrip in descrips
  descrip.render();
end for;
T::include( file:"masl/t.domain_begin.masl" );

select many objects related by self->object[R3708.''has abstract''];
// Provide forward declaration of objects for use in relationships.
for each object in objects
  object.render_declaration();
end for;

// Render types in dependent order minimizing forward declarations.
type::render_all( domain:self, scope:"private" );

select many exceptions related by self->exception[R3748];
for each exception in exceptions
  exception.render();
end for;

select many routine_activities related by self->routine[R3790.''provides'']->activity[R3704];
for each activity in routine_activities
  activity.render();
end for;

select many terminators related by self->terminator[R3702.''sends through''];
for each terminator in terminators
  terminator.render();
end for;

select many relationships related by self->relationship[R3712];
for each relationship in relationships
  relationship.render();
end for;

// Sequence rendering such that supertypes are rendered before subtypes.
// The maximum number of rounds required cannot be larger than the
// total number subtype-supertype relationships in the domain.
round = 0;
select many subsupers from instances of subsuper;
maxrounds = cardinality subsupers;
while ( round <= maxrounds )
  for each object in objects
    // determine subtype depth
    // Render the object during the round equal to its depth.
    depth = 0;
    select many supertypes related by object->participation[R3720]->relationship[R3713]->subsuper[R3721]->relationship[R3721]->participation[R3713.''engages'']->object[R3714];
    while ( not_empty supertypes )
      depth = depth + 1;
      ss = supertypes;
      select many supertypes related by ss->participation[R3720]->relationship[R3713]->subsuper[R3721]->relationship[R3721]->participation[R3713.''engages'']->object[R3714];
    end while;
    if ( depth == round )
      object.render();
    end if;
  end for;
  round = round + 1;
end while;

T::include( file:"masl/t.domain_end.masl" );

select one markable related by self->markable[R3783];
markable.render_marking( list:"default" );

elif ( "WASL" == genfile::architecture() )
  //
else
  //
end if;',
	1,
	'',
	"b20f6b27-99e6-4c7a-8509-a6b8cc8832d4",
	0);
INSERT INTO O_TFR
	VALUES ("923d7453-ca83-4d45-8c3f-abdabf2d922c",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'validate',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'valid = true;

// validate name
if ( "" == self.name )
  TRACE::log( flavor:"failure", id:101, message:"domain has no name." );
  valid = false;
  return valid;		// short circuit
end if;

// validate types
select many child_types related by self->type[R3719.''defines''];
for each type in child_types
  valid = type.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate exceptions
select many child_exceptions related by self->exception[R3748.''declares''];
for each exception in child_exceptions
  valid = exception.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate routines
select many child_routines related by self->routine[R3790.''provides''];
for each routine in child_routines
  valid = routine.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate terminators
select many child_terminators related by self->terminator[R3702.''sends through''];
for each terminator in child_terminators
  valid = terminator.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate relationships
select many child_relationships related by self->relationship[R3712];
for each relationship in child_relationships
  valid = relationship.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate objects
select many child_objects related by self->object[R3708.''has abstract''];
for each object in child_objects
  valid = object.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

select many child_pragma_lists related by self->markable[R3783]->pragma_list[R3782];
for each pragma_list in child_pragma_lists
  valid = pragma_list.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

return valid;',
	1,
	'',
	"e6bc5a45-5a39-4d36-8cfb-9189cb568011",
	0);
INSERT INTO O_TFR
	VALUES ("e6bc5a45-5a39-4d36-8cfb-9189cb568011",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'tostring',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'value[7] = "";
emptyvalue[7] = ""; emptyvalue[6] = ""; emptyvalue[5] = ""; emptyvalue[4] = ""; emptyvalue[3] = ""; emptyvalue[2] = ""; emptyvalue[1] = ""; emptyvalue[0] = "";

value[0] = self.name;
out::tostring( element:"domain", value:value );

select many types related by self->type[R3719];
for each type in types
  type.tostring();
end for;
select many exceptions related by self->exception[R3748];
for each exception in exceptions
  //exception.tostring();
end for;
select many terminators related by self->terminator[R3702.''sends through''];
for each terminator in terminators
  //terminator.tostring();
end for;
select many activities related by self->routine[R3790.''provides'']->activity[R3704];
for each activity in activities
  //activity.tostring();
end for;
select many relationships related by self->relationship[R3712];
for each relationship in relationships
  //relationship.tostring();
end for;
select many objects related by self->object[R3708.''has abstract''];
for each object in objects
  object.tostring();
end for;
select one markable related by self->markable[R3783];
//markable.tostring();

out::tostring( element:"domain", value:emptyvalue );
',
	1,
	'',
	"892cc2c0-a74a-40f1-99c2-f7a70d95e67f",
	0);
INSERT INTO O_TFR
	VALUES ("892cc2c0-a74a-40f1-99c2-f7a70d95e67f",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render_project',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many descrips related by self->markable[R3783]->element[R3786]->description[R3796];
for each descrip in descrips
  descrip.render();
end for;
T::include( file:"masl/t.domain_begin.masl" );

select many terminators related by self->terminator[R3702.''sends through''];
for each terminator in terminators
  terminator.render();
end for;

T::include( file:"masl/t.domain_end.masl" );

select one markable related by self->markable[R3783];
markable.render_marking( list:"project" );',
	1,
	'',
	"d2c1d212-d763-486a-80db-31abb17f92e1",
	0);
INSERT INTO O_TFR
	VALUES ("d2c1d212-d763-486a-80db-31abb17f92e1",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render_interface',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many descrips related by self->markable[R3783]->element[R3786]->description[R3796];
for each descrip in descrips
  descrip.render();
end for;
T::include( file:"masl/t.domain_begin.masl" );

// Render types in dependent order minimizing forward declarations.
type::render_all( domain:self, scope:"public" );

select many exceptions related by self->exception[R3748];
for each exception in exceptions
  if ( "public" == exception.visibility )
    exception.render();
  end if;
end for;

select many routine_activities related by self->routine[R3790.''provides'']->activity[R3704];
for each activity in routine_activities
  select one routine related by activity->routine[R3704];
  if ( "public" == routine.visibility )
    activity.render();
  end if;
end for;

select many terminators related by self->terminator[R3702.''sends through''];
for each terminator in terminators
  terminator.render();
end for;

T::include( file:"masl/t.domain_end.masl" );

select one markable related by self->markable[R3783];
markable.render_marking( list:"default" );',
	1,
	'',
	"0d6eab48-8a19-474c-a54c-d16da938995b",
	0);
INSERT INTO O_TFR
	VALUES ("8a307794-75b1-4701-bf7c-1e0440cd1c2a",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render_scenario_definitions',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'/* Scenarios exist under a special terminator, with the name "Sequence" */
scenario_list = "";
scenario_definitions = "";
select any terminator related by self->terminator[R3702] where (selected.name == "Sequence");
if(not_empty terminator)
  TRACE::log( flavor:"info", id:104, message:"Processing sequence terminator." );
  select many routines related by terminator->routine[R3791];
  for each routine in routines
  	TRACE::log( flavor:"info", id:104, message:"Processing routine for sequence terminator." );
  	select one activity related by routine->activity[R3704];
    domainkeyletters = STRING::split( s:activity.name, delimiter:":" );
    activityname = STRING::split( s:"", delimiter:":" );
    filename = domainkeyletters + "_Scenario" + STRING::itoa( i:routine.number ) + ".scn";
    scenario_list = scenario_list + filename + "\n";
    select any pragma related by activity->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "external" );
    if ( empty pragma )
      marking = routine.render_marking();
      scenario_definitions = scenario_definitions + self.name + "," + self.version + "," + domainkeyletters + "," + STRING::itoa( i:routine.number ) + "," + activityname + "," + filename + marking + "\n";
    end if;
  end for;
end if;
param.scenario_outputs[1] = scenario_list;
param.scenario_outputs[0] = scenario_definitions;',
	1,
	'',
	"923d7453-ca83-4d45-8c3f-abdabf2d922c",
	0);
INSERT INTO O_TPARM
	VALUES ("e6cb428e-e6b4-4c22-a0be-b5716983869c",
	"8a307794-75b1-4701-bf7c-1e0440cd1c2a",
	'scenario_outputs',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[2]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (2,
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"e6cb428e-e6b4-4c22-a0be-b5716983869c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"05b161a0-9cf9-4497-9bc4-13ea24593abe",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("f7d1987a-5ec4-4f88-bd78-5560c96807bd",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render_bridges',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'// bridges
bridge_files = "";
select many terminators related by self->terminator[R3702] where ( selected.key_letters != "TIM" and selected.name != "Sequence");
for each terminator in terminators
  select any pragma related by terminator->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "hand_coded" );
  if ( empty pragma )
    select many routines related by terminator->routine[R3791];
    for each routine in routines
      select one activity related by routine->activity[R3704];
      routine.render_definition( activity:activity );
      filename = self.name + "_" + terminator.key_letters + STRING::itoa( i:routine.number ) + "_" + activity.name + ".br";
      TRACE::log( flavor:"info", id:118, message:"rendering activity file:  " + filename );
      genfile = genfile::populate( name:filename );
      genfile.emit( name:filename );
      marking = routine.render_marking();
      code_block_present = ",N";
      select one code_block related by activity->code_block[R3794];
      if ( not_empty code_block )
        code_block_present = ",Y";
      end if;
      bridge_files = bridge_files + self.name + "," + self.version + "," + filename + code_block_present + marking + "\n";
    end for;
  end if;
end for;
return bridge_files;',
	1,
	'',
	"8a307794-75b1-4701-bf7c-1e0440cd1c2a",
	0);
INSERT INTO O_TFR
	VALUES ("31a85bcb-8232-4614-ad03-ce15827dc7ef",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render_bridge_list',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'TRACE::log( flavor:"info", id:105, message:"rendering domain bridge list" );
select many terminators related by self->terminator[R3702] where ( selected.key_letters != "TIM" );
for each terminator in terminators
  select many routines related by terminator->routine[R3791];
  for each routine in routines
    select one activity related by routine->activity[R3704];
    routine.render( name:activity.name );
  end for;
end for;',
	1,
	'',
	"f7d1987a-5ec4-4f88-bd78-5560c96807bd",
	0);
INSERT INTO O_TFR
	VALUES ("5382854f-9526-4cf6-b432-34b38d1300ab",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	'render_terminators_handcoded',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'TRACE::log( flavor:"info", id:102, message:"rendering domain hand code file list" );
rendered = false;
select many terminators related by self->terminator[R3702];
for each terminator in terminators
  select any pragma related by terminator->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "hand_coded" );
  if ( not_empty pragma )
    terminator.render_handcoded();
    rendered = true;
  end if;
end for;
if ( rendered )
  T::include( file:"wasl/t.newline.wasl" );
end if;',
	1,
	'',
	"31a85bcb-8232-4614-ad03-ce15827dc7ef",
	0);
INSERT INTO O_NBATTR
	VALUES ("4fc1a43d-5822-49e1-b600-7ff700768a17",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_BATTR
	VALUES ("4fc1a43d-5822-49e1-b600-7ff700768a17",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_ATTR
	VALUES ("4fc1a43d-5822-49e1-b600-7ff700768a17",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bf9f98e2-eed3-4957-8e03-9067dc4b133f",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_BATTR
	VALUES ("bf9f98e2-eed3-4957-8e03-9067dc4b133f",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_ATTR
	VALUES ("bf9f98e2-eed3-4957-8e03-9067dc4b133f",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	"929b93d6-3918-4a8d-ba72-241c4e213896",
	'version',
	'',
	'',
	'version',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("929b93d6-3918-4a8d-ba72-241c4e213896",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_BATTR
	VALUES ("929b93d6-3918-4a8d-ba72-241c4e213896",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_ATTR
	VALUES ("929b93d6-3918-4a8d-ba72-241c4e213896",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	"4fc1a43d-5822-49e1-b600-7ff700768a17",
	'key_letters',
	'',
	'',
	'key_letters',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("110d8b33-78c5-4414-8d98-728e5006c745",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_BATTR
	VALUES ("110d8b33-78c5-4414-8d98-728e5006c745",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_ATTR
	VALUES ("110d8b33-78c5-4414-8d98-728e5006c745",
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	"bf9f98e2-eed3-4957-8e03-9067dc4b133f",
	'implementation_system',
	'',
	'',
	'implementation_system',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_ID
	VALUES (1,
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO O_ID
	VALUES (2,
	"621fab3d-5e00-4d9f-b132-b5ae65e4324f");
INSERT INTO PE_PE
	VALUES ("621fab3d-5e00-4d9f-b132-b5ae65e4324f",
	1,
	"ceafde1b-ef7d-4cdb-ab88-6866d249a397",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("ceafde1b-ef7d-4cdb-ab88-6866d249a397",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	'masl',
	'',
	0,
	'../masl.xtuml');
