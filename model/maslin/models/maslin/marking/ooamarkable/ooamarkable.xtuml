-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("bd177ec5-0ad3-41d1-9c11-fb0e159afe26",
	'ooamarkable',
	3807,
	'ooamarkable',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("d7f8ac8f-c88f-4de2-b756-5ce8aa4e0ce5",
	"bd177ec5-0ad3-41d1-9c11-fb0e159afe26",
	'populate',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'element = param.element;
create object instance markable of ooamarkable;
relate markable to element across R3806;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("76939ae5-af0e-43a7-ab1d-d73f10119920",
	"d7f8ac8f-c88f-4de2-b756-5ce8aa4e0ce5",
	'element',
	"e5dfdb84-9b56-40db-b9da-9bfde06c573c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e5dfdb84-9b56-40db-b9da-9bfde06c573c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ooaelement>',
	'',
	'',
	'../marking.xtuml');
INSERT INTO O_TFR
	VALUES ("c60ac9e3-33a0-4770-8424-eacd1704aeec",
	"bd177ec5-0ad3-41d1-9c11-fb0e159afe26",
	'render_pragmas',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// render the pragma string
pragma_string = "";
select many pragma_lists related by self->ooapragma_list[R3802];
for each list in pragma_lists
  pragma_string = pragma_string + list.render();
end for;

// select the proper OOA instance to edit the description
select one element related by self->ooaelement[R3806];
select one population related by element->ooapopulation[R3801];
if ( not_empty population )
  select many pragmas related by pragma_lists->ooapragma[R3803];

  // check to see if we have any pragmas
  if ( not_empty pragmas )
    // put the pragmas in the description of the right object
    if ( "project" == element.type )
      project = population.current_component;
      if ( not_empty project )
        pathkey = ::component_get_path( c_c:project, child:"" );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Component", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:60, message:"Could not obtain markable." );
        ooaelement::trace( population: population ); 
      end if;
    elif ( "domain" == element.type )
      if ( population.processingProject )
        domain = population.current_imported_component;
        if ( not_empty domain )
          select one ep_pkg related by domain->PE_PE[R8001]->EP_PKG[R8000];
          pathkey = ::package_get_path( ep_pkg:ep_pkg, child:domain.Name );
          for each pragma in pragmas
            pragma.pragma2mark( markable_name:"Component Reference", pathkey:pathkey );
          end for;
        else
          TRACE::log( flavor:"failure", id:59, message:"Could not obtain markable." );
          ooaelement::trace( population: population );
        end if;
      else
        domain = population.current_component;
        if ( not_empty domain )
          pathkey = ::component_get_path( c_c:domain, child:"" );
          for each pragma in pragmas
            pragma.pragma2mark( markable_name:"Component", pathkey:pathkey );
          end for;
        else
          TRACE::log( flavor:"failure", id:61, message:"Could not obtain markable." );
          ooaelement::trace( population: population );
        end if;
      end if;
    elif ( "terminator" == element.type )
      interface = population.current_interface;
      select any terminator1 related by interface->C_IR[R4012]->C_R[R4009];
      if ( not_empty terminator1 )
        select one c_po related by terminator1->C_IR[R4009]->C_PO[R4016];
        select one c_c related by c_po->C_C[R4010];
        pathkey = ::component_get_path( c_c:c_c, child:c_po.Name );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Port", pathkey:pathkey );
        end for;
      else
        c_c = population.current_component;
        select any c_po from instances of C_PO where ( false );
        if ( not_empty interface )
          select any c_po related by c_c->C_PO[R4010] where ( selected.Name == interface.Name );
        end if;
        select any terminator2 related by c_po->C_IR[R4016]->C_P[R4009];
        if ( not_empty terminator2 )
          child = c_po.Name + "::" + terminator2.Name;
          pathkey = ::component_get_path( c_c:c_c, child:child );
          for each pragma in pragmas
            pragma.pragma2mark( markable_name:"Provision", pathkey:pathkey );
          end for;
        else
          TRACE::log( flavor:"failure", id:62, message:"Could not obtain markable." );
          ooaelement::trace( population: population );
        end if;
      end if;
    elif ( "object" == element.type )
      o_obj = population.current_class;
      if ( not_empty o_obj )
        pathkey = ::class_get_path( o_obj:o_obj, child:"" );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Model Class", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:63, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "routine" == element.type )
      routine1 = population.current_domain_function;
      if ( not_empty routine1 )
        select one ep_pkg related by routine1->PE_PE[R8001]->EP_PKG[R8000];
        pathkey = ::package_get_path( ep_pkg:ep_pkg, child:population.Function_getSignature( s_sync:routine1 ) );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Function", pathkey:pathkey );
        end for;
      else
        routine2 = population.current_executable_property;
        select one c_io related by routine2->C_IO[R4004];
        if ( not_empty c_io )
          interface = population.current_interface;
          select any terminator1 related by interface->C_IR[R4012]->C_R[R4009];
          if ( not_empty terminator1 )
            select one c_po related by terminator1->C_IR[R4009]->C_PO[R4016];
            select one c_c related by c_po->C_C[R4010];
            child = c_po.Name + "::" + interface.Name + "::" + population.ExecutableProperty_getSignature( c_ep:routine2 );
            pathkey = ::component_get_path( c_c:c_c, child:child );
            for each pragma in pragmas
              pragma.pragma2mark( markable_name:"Required Operation", pathkey:pathkey );
            end for;
          end if;
        else
          TRACE::log( flavor:"failure", id:64, message:"Could not obtain markable." );
          ooaelement::trace( population: population );
        end if;
      end if;
    elif ( "operation" == element.type )
      operation = population.current_class_op;
      if ( not_empty operation )
        select one o_obj related by operation->O_OBJ[R115];
        pathkey = ::class_get_path( o_obj:o_obj, child:population.Operation_getSignature( o_tfr:operation ) );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Operation", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:65, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "state" == element.type )
      state = population.current_state;
      if ( not_empty state )
        select one o_obj related by state->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
        child = "::Instance State Machine::";
        if ( empty o_obj )
          select one o_obj related by state->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
          child = "::Class State Machine::";
        end if;
        child = child + state.Name;
        pathkey = ::class_get_path( o_obj:o_obj, child:child );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"State Machine State", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:66, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "attribute" == element.type )
      attr = population.current_attribute;
      if ( not_empty attr )
        select one o_obj related by attr->O_OBJ[R102];
        pathkey = ::class_get_path( o_obj:o_obj, child:attr.Name );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Attribute", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:67, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "transitiontable" == element.type )
      obj = population.current_class;
      select one sm_sm related by obj->SM_ISM[R518]->SM_SM[R517];
      if ( not_empty sm_sm )
        pathkey = ::class_get_path( o_obj:obj, child:"Instance State Machine" );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"State Machine", pathkey:pathkey );
        end for;
      else
        select one sm_sm related by obj->SM_ASM[R519]->SM_SM[R517];
        if ( not_empty sm_sm )
          pathkey = ::class_get_path( o_obj:obj, child:"Class State Machine" );
          for each pragma in pragmas
            pragma.pragma2mark( markable_name:"State Machine", pathkey:pathkey );
          end for;
        else
          TRACE::log( flavor:"failure", id:68, message:"Could not obtain markable." );
          ooaelement::trace( population: population );
        end if;
      end if;
    elif ( "event" == element.type )
      evt = population.current_event;
      if ( not_empty evt )
        select one o_obj related by evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518];
        child = "::Instance State Machine::";
        if ( empty o_obj )
          select one o_obj related by evt->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519];
          child = "::Class State Machine::";
        end if;
        child = child + evt.Drv_Lbl + ":" + evt.Mning;
        pathkey = ::class_get_path( o_obj:o_obj, child:child );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"State Machine Event", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:69, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "type" == element.type )
      type = population.current_type;
      if ( not_empty type )
        select one ep_pkg related by type->PE_PE[R8001]->EP_PKG[R8000];
        pathkey = ::package_get_path( ep_pkg:ep_pkg, child:type.Name );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"User Data Type", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:70, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "exception" == element.type )
      exp = population.current_exp;
      if ( not_empty exp )
        select one ep_pkg related by exp->PE_PE[R8001]->EP_PKG[R8000];
        pathkey = ::package_get_path( ep_pkg:ep_pkg, child:exp.Name );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Exception", pathkey:pathkey );
        end for;
      else
        TRACE::log( flavor:"failure", id:71, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "identifier" == element.type )
      obj = population.current_class;
      if ( not_empty obj )
        if ( 1 == population.processingIdentifier )
          obj.Descrip = obj.Descrip + "<identifier2>\n  " + pragma_string + "</identifier2>\n\n";
        elif ( 2 == population.processingIdentifier )
          obj.Descrip = obj.Descrip + "<identifier3>\n  " + pragma_string + "</identifier3>\n\n";
        else
          TRACE::log( flavor:"failure", id:73, message:"Invalid identifier number." );
        end if;
      else
        TRACE::log( flavor:"failure", id:72, message:"Could not obtain markable." );
        ooaelement::trace( population: population );
      end if;
    elif ( "regularrel" == element.type or "associative" == element.type or "subsuper" == element.type )
      r_rel = population.current_rel;
      /*
      if ( not_empty r_rel )
        select one ep_pkg related by r_rel->PE_PE[R8001]->EP_PKG[R8000];
        pathkey = ::package_get_path( ep_pkg:ep_pkg, child: "R" + T::s(i:r_rel.Numb) );
        for each pragma in pragmas
          pragma.pragma2mark( markable_name:"Association", pathkey:pathkey );
        end for;
      end if;
      */
    else
      TRACE::log( flavor:"failure", id:79, message:"Unable to find current ''" + element.type + "''" );
    end if;

  end if;

end if;',
	1,
	'',
	"d7f8ac8f-c88f-4de2-b756-5ce8aa4e0ce5",
	0);
INSERT INTO O_TFR
	VALUES ("be37306f-a1c5-4665-9dd5-0fa0221f0612",
	"bd177ec5-0ad3-41d1-9c11-fb0e159afe26",
	'destruct',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many lists related by self->ooapragma_list[R3802];
for each pragma_list in lists
	unrelate self from pragma_list across R3802;
	pragma_list.destruct();
end for;

delete object instance self;',
	1,
	'',
	"c60ac9e3-33a0-4770-8424-eacd1704aeec",
	0);
INSERT INTO O_ID
	VALUES (0,
	"bd177ec5-0ad3-41d1-9c11-fb0e159afe26");
INSERT INTO O_ID
	VALUES (1,
	"bd177ec5-0ad3-41d1-9c11-fb0e159afe26");
INSERT INTO O_ID
	VALUES (2,
	"bd177ec5-0ad3-41d1-9c11-fb0e159afe26");
INSERT INTO PE_PE
	VALUES ("bd177ec5-0ad3-41d1-9c11-fb0e159afe26",
	1,
	"a436d690-d535-4111-926b-af7c5717f2da",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("a436d690-d535-4111-926b-af7c5717f2da",
	"c14b4fcc-99ce-417f-85d7-ac22e2d20288",
	"c14b4fcc-99ce-417f-85d7-ac22e2d20288",
	'marking',
	'',
	0,
	'../marking.xtuml');
