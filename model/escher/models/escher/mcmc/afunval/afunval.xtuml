-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunval',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b27880e0-c9d8-4f3f-9d90-b291203c9702",
	112,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'escher::mcmc::afunval');
INSERT INTO DIM_DIA
	VALUES ("b27880e0-c9d8-4f3f-9d90-b291203c9702",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("0b622a55-8aa6-4b01-be4b-99cd32ac7fbb",
	"00000000-0000-0000-0000-000000000000",
	'val_translate',
	'',
	'//====================================================================
//
// $RCSfile: q.val.translate.arc,v $
//
//
//====================================================================
//
// These functions set up the implementation of the values (V_VAL on
// model of OAL).
//
//==================================================================== 
//
//
// Translate "leaf" values first.
::val_literal_boolean_values();
::val_literal_integer_values();
::val_literal_real_values();
::val_literal_string_values();
::val_literal_enumerations();
::val_constant_values();
::val_transient_values();
::val_instance_reference_values();
::val_inst_ref_set_values();
::val_selection_test_values();
::val_event_values();
::val_parameter_values();
// The following may be recursed.
::val_attribute_values();
::val_member_values();
::val_array_element_references();
::val_array_length_values();
::val_unary_op_values();
::val_binary_op_values();
// V_PARs depend upon values being populated.
::val_actual_parameters();
// These use V_PARs.
::val_message_values();
::val_bridge_values();
::val_transform_values();
::val_synch_service_values();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("0b622a55-8aa6-4b01-be4b-99cd32ac7fbb",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d22cdcb4-9e7e-4188-8316-ee450fb67c61",
	"00000000-0000-0000-0000-000000000000",
	'gen_value',
	'',
	'//
//--------------------------------------------------------------------
// Percolate the values from the "leaves" up into the combined
// expressions by recursively drilling down.
//--------------------------------------------------------------------
v_val = param.v_val;
select one v_mvl related by v_val->V_MVL[R801];
if ( not_empty v_mvl )
  ::val_member_value( v_mvl:v_mvl );
else
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    ::val_attribute_value( v_avl:v_avl );
  else
    select one v_aer related by v_val->V_AER[R801];
    if ( not_empty v_aer )
      ::val_array_element_reference( v_aer:v_aer );
    else
      select one v_alv related by v_val->V_ALV[R801];
      if ( not_empty v_alv )
        ::val_array_length_value( v_alv:v_alv );
      else
        select one v_uny related by v_val->V_UNY[R801];
        if ( not_empty v_uny )
          ::val_unary_op_value( v_uny:v_uny );
        else
          select one v_bin related by v_val->V_BIN[R801];
          if ( not_empty v_bin )
            ::val_binary_op_value( v_bin:v_bin );
          else
            select one v_trv related by v_val->V_TRV[R801];
            if ( not_empty v_trv )
              ::val_transform_value( v_trv:v_trv );
            else
              select one v_msv related by v_val->V_MSV[R801];
              if ( not_empty v_msv )
                ::val_message_value( v_msv:v_msv );
              else
                select one v_brv related by v_val->V_BRV[R801];
                if ( not_empty v_brv )
                  ::val_bridge_value( v_brv:v_brv );
                else
                  select one v_fnv related by v_val->V_FNV[R801];
                  if ( not_empty v_fnv )
                    ::val_synch_service_value( v_fnv:v_fnv );
                  else
                    T::print(s:"ERROR:  Recursive V_VAL resolution issue.");
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f0ce1044-f653-425a-a577-3920f6382c5e",
	"d22cdcb4-9e7e-4188-8316-ee450fb67c61",
	'v_val',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5400d269-ee31-4742-ac70-8532512a854c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("d22cdcb4-9e7e-4188-8316-ee450fb67c61",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cbfcf6a1-3810-443c-bbee-81e4c5fb2983",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_boolean_values',
	'',
	'//
select many v_lbos from instances of V_LBO;
for each v_lbo in v_lbos
  select one te_val related by v_lbo->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lbo.Value;
  te_val.buffer = v_lbo.Value;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("cbfcf6a1-3810-443c-bbee-81e4c5fb2983",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06509e41-d5bd-4090-8a7e-29c50f6ea2f5",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_string_values',
	'',
	'//
select any te_string from instances of TE_STRING;
select many v_lsts from instances of V_LST;
for each v_lst in v_lsts
  select one te_val related by v_lst->V_VAL[R801]->TE_VAL[R2040];
  // s = T::t( s:v_lst.Value );
  s = v_lst.Value;
  ::oal( s:"s = Escher_strcpy( s, T_t( v_lst->Value ) ); // Ccode" );
  // if ( strstr( s, "({" ) )
  ::oal( s:"if ( strstr( s, ({ ) ) { // Ccode" );
  if ( "({" == s )
    te_val.buffer = s;
  else
    te_val.buffer = ( "&quot;" + v_lst.Value ) + "&quot;";
    ::oal( s:" // Ccode" );
  end if;
  te_val.OAL = ( "" + v_lst.Value ) + "";
  te_val.dimensions = 1;
  te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
  //TODO assign dimension
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("06509e41-d5bd-4090-8a7e-29c50f6ea2f5",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8475e0d0-3e77-47f8-9513-fbab1750111d",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_integer_values',
	'',
	'//
select many v_lins from instances of V_LIN;
for each v_lin in v_lins
  select one te_val related by v_lin->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lin.Value;
  te_val.buffer = v_lin.Value;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("8475e0d0-3e77-47f8-9513-fbab1750111d",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6045d2f8-4e22-4bd8-b976-2162921eb4b1",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_real_values',
	'',
	'//
select many v_lrls from instances of V_LRL;
for each v_lrl in v_lrls
  select one te_val related by v_lrl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lrl.Value;
  te_val.buffer = v_lrl.Value;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("6045d2f8-4e22-4bd8-b976-2162921eb4b1",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f758b676-475b-4300-8088-4a2bd18e2bfe",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_enumerations',
	'',
	'//
select many v_lens from instances of V_LEN;
for each v_len in v_lens
  select one te_val related by v_len->V_VAL[R801]->TE_VAL[R2040];
  select one te_enum related by v_len->S_ENUM[R824]->TE_ENUM[R2027];
  te_val.OAL = te_enum.Name;
  te_val.buffer = te_enum.GeneratedName;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("f758b676-475b-4300-8088-4a2bd18e2bfe",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4275480e-5508-485d-b0be-3d71551f37e0",
	"00000000-0000-0000-0000-000000000000",
	'val_constant_values',
	'',
	'//
select many v_scvs from instances of V_SCV;
for each v_scv in v_scvs
  select one te_val related by v_scv->V_VAL[R801]->TE_VAL[R2040];
  select one cnst_syc related by v_scv->CNST_SYC[R850];
  select one cnst_lsc related by cnst_syc->CNST_LFSC[R1502]->CNST_LSC[R1503];
  select one te_dt related by cnst_syc->S_DT[R1500]->TE_DT[R2021];
  te_val.OAL = cnst_syc.Name;
  te_val.buffer = cnst_lsc.Value;
  if ( 4 == te_dt.Core_Typ )
    select any te_string from instances of TE_STRING;
    te_val.buffer = ( "&quot;" + cnst_lsc.Value ) + "&quot;";
    ::oal( s:" // Ccode" );
    te_val.dimensions = 1;
    te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
    //TODO assign dimension
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("4275480e-5508-485d-b0be-3d71551f37e0",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("19886652-6198-4abf-982d-4fbf5c0ed627",
	"00000000-0000-0000-0000-000000000000",
	'val_transient_values',
	'',
	'//
select many v_tvls from instances of V_TVL;
for each v_tvl in v_tvls
  select one v_var related by v_tvl->V_VAR[R805];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_val related by v_tvl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
  te_val.dimensions = te_var.dimensions;
  te_val.array_spec = te_var.array_spec;
  select one te_dim related by te_var->TE_DIM[R2057];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("19886652-6198-4abf-982d-4fbf5c0ed627",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8062f8be-0f6c-4faf-8059-57256065c328",
	"00000000-0000-0000-0000-000000000000",
	'val_actual_parameters',
	'',
	'//
select many v_pars from instances of V_PAR;
for each v_par in v_pars
  select one te_par related by v_par->TE_PAR[R2063];
  select one v_val related by v_par->V_VAL[R800];
  select one te_val related by v_val->TE_VAL[R2040];
  select one te_dt related by v_val->S_DT[R820]->TE_DT[R2021];
  te_val.OAL = ( te_par.Name + ":" ) + te_val.OAL;
  if ( 10 == te_dt.Core_Typ )
    // Cast event types to the base event type for passing (to timers).
    te_val.buffer = ( "(" + te_dt.ExtName ) + ( ")" + te_val.buffer );
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("8062f8be-0f6c-4faf-8059-57256065c328",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6acd7ae2-005a-4e8d-89ef-0d2e37c6287f",
	"00000000-0000-0000-0000-000000000000",
	'val_attribute_values',
	'',
	'//
select many v_avls from instances of V_AVL;
for each v_avl in v_avls
  ::val_attribute_value( v_avl:v_avl );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("6acd7ae2-005a-4e8d-89ef-0d2e37c6287f",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("43397abc-4c8e-461d-97e1-b6f026948690",
	"00000000-0000-0000-0000-000000000000",
	'val_attribute_value',
	'',
	'//
v_avl = param.v_avl;
select one v_val related by v_avl->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_avl->V_VAL[R807];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_var related by v_avl->V_VAL[R807]->V_IRF[R801]->V_VAR[R808]->TE_VAR[R2039];
  select one o_attr related by v_avl->O_ATTR[R806];
  select one te_attr related by o_attr->TE_ATTR[R2033];
  if ( not_empty te_attr )
    root = "";
    if ( empty te_var )
      te_val.OAL = ( root_te_val.OAL + "." ) + te_attr.Name;
      root = root_te_val.buffer;
    else
      te_val.OAL = ( te_var.OAL + "." ) + te_attr.Name;
      root = te_var.buffer;
    end if;
    select one te_class related by te_attr->TE_CLASS[R2061];
    select one te_c related by te_class->TE_C[R2064];
    if ( te_c.DetectEmpty )
      root = "((${te_class.GeneratedName} *)xtUML_detect_empty_handle( ${root}, &quot;${te_class.Key_Lett}&quot;, &quot;${te_val.OAL}&quot; ))";
    end if;
    te_val.buffer = ( root + "->" ) + te_attr.GeneratedName;
    te_val.dimensions = te_attr.dimensions;
    te_val.array_spec = te_attr.array_spec;
    select one te_dim related by te_attr->TE_DIM[R2055];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    end if;
    // Maybe attribute value is actually derived.
    select one o_dbattr related by o_attr->O_BATTR[R106]->O_DBATTR[R107];
    if ( not_empty o_dbattr )
      select one act_ai related by v_val->ACT_AI[R689];
      if ( empty act_ai )
        // Only do this if we are not assigning inside the DAB OAL body.
        select one te_aba related by o_dbattr->TE_DBATTR[R2026]->TE_ABA[R2010];
        te_val.buffer = ( te_aba.GeneratedName + "( " ) + ( root + " )" );
        te_val.dimensions = te_aba.dimensions;
        te_val.array_spec = te_aba.array_spec;
        select one te_dim related by te_aba->TE_DIM[R2058];
        if ( not_empty te_dim )
          relate te_val to te_dim across R2079;
        end if;
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("03b305fe-c258-4a65-81c6-2f0b5da525c9",
	"43397abc-4c8e-461d-97e1-b6f026948690",
	'v_avl',
	"71ed37d1-359a-4941-b904-f5450eb45d4e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("71ed37d1-359a-4941-b904-f5450eb45d4e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("43397abc-4c8e-461d-97e1-b6f026948690",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("70c8eb21-ee1c-48cf-a2bb-c39061b78322",
	"00000000-0000-0000-0000-000000000000",
	'val_member_values',
	'',
	'//
select many v_mvls from instances of V_MVL;
for each v_mvl in v_mvls
  ::val_member_value( v_mvl:v_mvl );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("70c8eb21-ee1c-48cf-a2bb-c39061b78322",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3fff839c-8dc5-4b25-9fec-652d82b60b87",
	"00000000-0000-0000-0000-000000000000",
	'val_member_value',
	'',
	'//
v_mvl = param.v_mvl;
select one te_val related by v_mvl->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_mvl->V_VAL[R837];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_mbr related by v_mvl->S_MBR[R836]->TE_MBR[R2047];
  te_val.dimensions = te_mbr.dimensions;
  te_val.array_spec = te_mbr.array_spec;
  select one te_dim related by te_mbr->TE_DIM[R2059];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
  te_val.OAL = ( root_te_val.OAL + "." ) + te_mbr.Name;
  te_val.buffer = ( root_te_val.buffer + "." ) + te_mbr.GeneratedName;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("da9c226f-eb34-4c77-921b-3f9564a03518",
	"3fff839c-8dc5-4b25-9fec-652d82b60b87",
	'v_mvl',
	"e023df9a-7028-4de9-9907-becb527ba8e2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e023df9a-7028-4de9-9907-becb527ba8e2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Member Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("3fff839c-8dc5-4b25-9fec-652d82b60b87",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c38df6b5-a35d-4afd-912c-fec24f70b216",
	"00000000-0000-0000-0000-000000000000",
	'val_instance_reference_values',
	'',
	'//
unique_num = 0;
select many v_irfs from instances of V_IRF;
for each v_irf in v_irfs
  select one te_val related by v_irf->V_VAL[R801]->TE_VAL[R2040];
  select one te_var related by v_irf->V_VAR[R808]->TE_VAR[R2039];
  if ( not_empty te_var )
    te_val.OAL = te_var.OAL;
    te_val.buffer = te_var.buffer;
  else
    T::print(s:"CDS:  Understand why we do not have V_VAR here.");
    te_val.buffer = "v_irf_" + T::s(i:unique_num);
    unique_num = unique_num + 1;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("c38df6b5-a35d-4afd-912c-fec24f70b216",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("13c91798-def0-4df1-afa9-41cd61c56094",
	"00000000-0000-0000-0000-000000000000",
	'val_selection_test_values',
	'',
	'//
select many v_slrs from instances of V_SLR;
for each v_slr in v_slrs
  select one te_val related by v_slr->V_VAL[R801]->TE_VAL[R2040];
  te_val.buffer = "selected";
  te_val.OAL = "SELECTED";
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("13c91798-def0-4df1-afa9-41cd61c56094",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dd4ae009-684f-47ea-bf1d-9135eae546d2",
	"00000000-0000-0000-0000-000000000000",
	'val_inst_ref_set_values',
	'',
	'//
select many v_isrs from instances of V_ISR;
for each v_isr in v_isrs
  select one te_var related by v_isr->V_VAR[R809]->TE_VAR[R2039];
  select one te_val related by v_isr->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("dd4ae009-684f-47ea-bf1d-9135eae546d2",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8d0a1fb7-f670-4ec9-82af-2f40c9b577d2",
	"00000000-0000-0000-0000-000000000000",
	'val_event_values',
	'',
	'//
select many v_edvs from instances of V_EDV;
for each v_edv in v_edvs
  select one te_val related by v_edv->V_VAL[R801]->TE_VAL[R2040];
  // If there are more than one transition into the state, there
  // may be more than one event parameter reference.  Select
  // any of them; they have the same names.
  select any te_parm related by v_edv->V_EPR[R834]->SM_EVTDI[R846]->TE_PARM[R2031];
  if ( empty te_parm )
    select any te_parm related by v_edv->V_EPR[R834]->C_PP[R847]->TE_PARM[R2048];
  else
    // Mark the event as used.
    select one te_evt related by te_parm->SM_EVTDI[R2031]->SM_EVT[R532]->TE_EVT[R2036];
    if ( not_empty te_evt )
      te_evt.UsedCount = te_evt.UsedCount + 1;
      te_evt.Used = true;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = "rcvd_evt->" + te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("8d0a1fb7-f670-4ec9-82af-2f40c9b577d2",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d3380c7c-a641-4833-86ee-9ef7e193ab5c",
	"00000000-0000-0000-0000-000000000000",
	'val_parameter_values',
	'',
	'//
select many v_pvls from instances of V_PVL;
for each v_pvl in v_pvls
  select one te_val related by v_pvl->V_VAL[R801]->TE_VAL[R2040];
  select one te_parm related by v_pvl->O_TPARM[R833]->TE_PARM[R2029];
  if ( empty te_parm )
    select one te_parm related by v_pvl->C_PP[R843]->TE_PARM[R2048];
    if ( empty te_parm )
      select one te_parm related by v_pvl->S_SPARM[R832]->TE_PARM[R2030];
      if ( empty te_parm )
        select one te_parm related by v_pvl->S_BPARM[R831]->TE_PARM[R2028];
        if ( empty te_parm )
          T::print(s:"CDS:  Understand why we do not have V_PVL related parameter here.");
        end if;
      end if;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
  if ( 1 == te_parm.By_Ref )
    te_val.buffer = ( "(*" + te_parm.GeneratedName ) + ")";
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("d3380c7c-a641-4833-86ee-9ef7e193ab5c",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("17ce249f-985a-4d74-9aeb-443a0d7221a0",
	"00000000-0000-0000-0000-000000000000",
	'val_unary_op_values',
	'',
	'//
select many v_unys from instances of V_UNY;
for each v_uny in v_unys
  ::val_unary_op_value( v_uny:v_uny );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("17ce249f-985a-4d74-9aeb-443a0d7221a0",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6463fa6e-fe94-4a8e-b9c5-4b37a5dc47f5",
	"00000000-0000-0000-0000-000000000000",
	'val_unary_op_value',
	'',
	'//
v_uny = param.v_uny;
select one te_val related by v_uny->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_uny->V_VAL[R804];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  // Remove blanks and make lower case.
  op = T::r(s:v_uny.Operator);
  op = T::l(s:op);
  select any te_set from instances of TE_SET;
  select one v_irf related by root_v_val->V_IRF[R801];
  select one v_isr related by root_v_val->V_ISR[R801];
  if ( not_empty v_irf )
    if ( op == "not_empty" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    elif ( op == "empty" )
      te_val.buffer = ( "( 0 == " + root_te_val.buffer ) + " )";
    elif ( op == "cardinality" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  elif ( not_empty v_isr )
    if ( op == "not_empty" )
      te_val.buffer = ( ( "( ! " + te_set.emptiness ) + ( "( " + root_te_val.buffer ) ) + " ) )";
    elif ( op == "empty" )
      te_val.buffer = ( ( te_set.emptiness + "( " ) + ( root_te_val.buffer + " )" ) );
    elif ( op == "cardinality" )
      te_val.buffer = ( ( te_set.module + te_set.element_count ) + ( "( " + root_te_val.buffer ) ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  else
    if ( op == "not" )
      te_val.buffer = "!" + root_te_val.buffer;
    else
      te_val.buffer = op + root_te_val.buffer;
    end if;
  end if;
  te_val.OAL = ( op + " " ) + root_te_val.OAL;
  // future support for vector arithmetic goes here
  te_val.dimensions = root_te_val.dimensions;
  te_val.array_spec = root_te_val.array_spec;
  select one te_dim related by root_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9b3841bb-45a7-40b1-8e10-e98764add4c4",
	"6463fa6e-fe94-4a8e-b9c5-4b37a5dc47f5",
	'v_uny',
	"59a775c7-8153-4a74-9471-99ef6c7254a0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("59a775c7-8153-4a74-9471-99ef6c7254a0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("6463fa6e-fe94-4a8e-b9c5-4b37a5dc47f5",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("df35dba9-44f0-4bde-8822-51a075e621c5",
	"00000000-0000-0000-0000-000000000000",
	'val_binary_op_values',
	'',
	'//
select many v_bins from instances of V_BIN;
for each v_bin in v_bins
  ::val_binary_op_value( v_bin:v_bin );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("df35dba9-44f0-4bde-8822-51a075e621c5",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("81a21ec2-63df-471c-b0fb-cd10e81a689a",
	"00000000-0000-0000-0000-000000000000",
	'val_binary_op_value',
	'',
	'//
v_bin = param.v_bin;
select one te_val related by v_bin->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one l_v_val related by v_bin->V_VAL[R802];
  select one l_te_val related by l_v_val->TE_VAL[R2040];
  if ( "" == l_te_val.buffer )
    ::gen_value( v_val:l_v_val );
  end if;
  select one r_v_val related by v_bin->V_VAL[R803];
  select one r_te_val related by r_v_val->TE_VAL[R2040];
  if ( "" == r_te_val.buffer )
    ::gen_value( v_val:r_v_val );
  end if;
  select one l_te_dt related by l_v_val->S_DT[R820]->TE_DT[R2021];
  select one r_te_dt related by r_v_val->S_DT[R820]->TE_DT[R2021];
  if ( ( 4 == l_te_dt.Core_Typ ) or ( 4 == r_te_dt.Core_Typ ) )
    // string
    select any te_string from instances of TE_STRING;
    select any te_instance from instances of TE_INSTANCE;
    if ( "+" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( ( te_instance.module + te_string.stradd ) + ( "( " + l_te_val.buffer ) ) + ( ", " + r_te_val.buffer ) ) + " )";
    else
      te_val.buffer = ( ( ( "( " + te_instance.module ) + ( te_string.strcmp + "( " ) ) + ( ( l_te_val.buffer + ", " ) + ( r_te_val.buffer + " ) " ) ) ) + ( v_bin.Operator + " 0 )" );
    end if;
  elif ( ( ( 21 == l_te_dt.Core_Typ ) or ( 20 == l_te_dt.Core_Typ ) ) and ( ( 21 == r_te_dt.Core_Typ ) or ( 20 == r_te_dt.Core_Typ ) ) and ( ( "+" == T::r(s:v_bin.Operator) ) or ( "-" == T::r(s:v_bin.Operator) ) or ( "|" == T::r(s:v_bin.Operator) ) or ( "&" == T::r(s:v_bin.Operator) ) or ( "^" == T::r(s:v_bin.Operator) ) ) )
    select any te_prefix from instances of TE_PREFIX;
    select any te_set from instances of TE_SET;
    select one v_val related by v_bin->V_VAL[R801];
    select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
    if ( ( "+" == T::r(s:v_bin.Operator) ) or ( "|" == T::r(s:v_bin.Operator) ) )
      te_val.buffer = te_set.scope + te_set.setunion + "( ";
    elif ( "&" == T::r(s:v_bin.Operator) )
      te_val.buffer = te_set.scope + te_set.setintersection + "( ";
    elif ( "-" == T::r(s:v_bin.Operator) )
      te_val.buffer = te_set.scope + te_set.setdifference + "( ";
    elif ( "^" == T::r(s:v_bin.Operator) )
      te_val.buffer = te_set.scope + te_set.setsymmetricdifference + "( ";
    end if;
    return_set = "binop_line$t{v_val.LineNumber}_col$t{v_val.StartPosition}to$t{v_val.EndPosition}";
    te_val.buffer = te_val.buffer + return_set + ", ";
    te_val.buffer = te_val.buffer + l_te_val.buffer + ", ";
    te_val.buffer = te_val.buffer + r_te_val.buffer + ", ";
    if ( ( 20 == l_te_dt.Core_Typ ) and ( 20 == r_te_dt.Core_Typ ) )
      te_val.buffer = te_val.buffer + te_prefix.define_u + "SET_LHS_IS_INSTANCE | " + te_prefix.define_u + "SET_RHS_IS_INSTANCE )";
    elif ( ( 20 == l_te_dt.Core_Typ ) and ( 20 != r_te_dt.Core_Typ ) )
      te_val.buffer = te_val.buffer + te_prefix.define_u + "SET_LHS_IS_INSTANCE )";
    elif ( ( 20 != l_te_dt.Core_Typ ) and ( 20 == r_te_dt.Core_Typ ) )
      te_val.buffer = te_val.buffer + te_prefix.define_u + "SET_RHS_IS_INSTANCE )";
    else
      te_val.buffer = te_val.buffer + "0 )";
    end if;
    // add the return set to the declaration deallocation blocks
    d = te_set.scope + te_set.base_class + " " + return_set + "_space={0}; " + te_set.scope + te_set.base_class + " * " + return_set + " = &" + return_set + "_space;";
    ::blk_declaration_append( te_blk:te_blk, s:d );
    d = te_set.module + te_set.clear + "( " + return_set + " );";
    ::blk_deallocation_append( te_blk:te_blk, s:d );
  else
    select any te_target from instances of TE_TARGET;
    if ( "and" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " && " + r_te_val.buffer ) ) + " )";
    elif ( "or" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " || " + r_te_val.buffer ) ) + " )";
    elif ( ( ( ( "==" == T::r(s:v_bin.Operator) ) or ( "!=" == T::r(s:v_bin.Operator) ) ) and ( "C" == te_target.language ) ) and ( l_te_val.dimensions != 0 ) )
      element_count = 0;
      select one r_te_dim related by r_te_val->TE_DIM[R2079];
      if ( not_empty r_te_dim )
        element_count = r_te_dim.elementCount;
      end if;
      te_val.buffer = ( ( ( "( memcmp( " + l_te_val.buffer ) + ( ", " + r_te_val.buffer ) ) + ( ( ", sizeof(" + l_te_val.buffer ) + ( "[0]) * " + T::s(i:element_count) ) ) ) + ( ( ") " + v_bin.Operator ) + " 0 )" );
    elif ( ( ( "==" == T::r(s:v_bin.Operator) ) or ( "!=" == T::r(s:v_bin.Operator) ) ) and ( ( 9 == l_te_dt.Core_Typ ) or ( 21 == l_te_dt.Core_Typ ) ) and ( ( 9 == r_te_dt.Core_Typ ) or ( 21 == r_te_dt.Core_Typ ) ) )
      select any te_set from instances of TE_SET;
      te_val.buffer = te_set.scope + te_set.equality + "( " + l_te_val.buffer + ", " + r_te_val.buffer + " )";
      if ( "!=" == T::r(s:v_bin.Operator) )
        te_val.buffer = "( !" + te_val.buffer + " )";
      end if;
    else
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.buffer ) + " )" );
    end if;
  end if;
  // future support for vector arithmetic goes here
  te_val.dimensions = r_te_val.dimensions;
  te_val.array_spec = r_te_val.array_spec;
  select one te_dim related by r_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
  te_val.OAL = ( ( "( " + l_te_val.OAL ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.OAL ) + " )" );
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("025c45c7-373d-4229-a59a-1f64245d01af",
	"81a21ec2-63df-471c-b0fb-cd10e81a689a",
	'v_bin',
	"146d5fb3-fcd3-4deb-a49c-f516ef703827",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("146d5fb3-fcd3-4deb-a49c-f516ef703827",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Binary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("81a21ec2-63df-471c-b0fb-cd10e81a689a",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("93a86acf-47aa-4724-bdd2-2f106bf2339e",
	"00000000-0000-0000-0000-000000000000",
	'val_message_values',
	'',
	'//
select many v_msvs from instances of V_MSV;
for each v_msv in v_msvs
  ::val_message_value( v_msv:v_msv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("93a86acf-47aa-4724-bdd2-2f106bf2339e",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a1760919-43d2-4315-9480-3cb0e4987046",
	"00000000-0000-0000-0000-000000000000",
	'val_message_value',
	'',
	'//
v_msv = param.v_msv;
select one v_val related by v_msv->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one te_mact related by v_msv->SPR_PEP[R841]->SPR_PO[R4503]->TE_MACT[R2050];
  if ( empty te_mact )
    select one te_mact related by v_msv->SPR_REP[R845]->SPR_RO[R4502]->TE_MACT[R2052];
  end if;
  select many v_pars related by v_msv->V_PAR[R842];
  select one te_aba related by te_mact->TE_ABA[R2010];
  select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
  sretvar = ( ( "vmsv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
  r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, te_blk:te_blk, sretvar:sretvar, is_statement:false );
  te_val.buffer = r;
  te_val.OAL = ( ( te_mact.PortName + "::" ) + ( te_mact.MessageName + "(" ) ) + ( te_mact.OALParamBuffer + ")" );
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("06b00d30-c99b-4dfa-a9c7-63ca0366e6f6",
	"a1760919-43d2-4315-9480-3cb0e4987046",
	'v_msv',
	"5d3edb98-7267-4f8f-8a43-a03062f612ef",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5d3edb98-7267-4f8f-8a43-a03062f612ef",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Message Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("a1760919-43d2-4315-9480-3cb0e4987046",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("58eb411f-e99b-4570-af34-030e17df3dac",
	"00000000-0000-0000-0000-000000000000",
	'val_bridge_values',
	'',
	'//
select many v_brvs from instances of V_BRV;
for each v_brv in v_brvs
  ::val_bridge_value( v_brv:v_brv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("58eb411f-e99b-4570-af34-030e17df3dac",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("675dda56-044b-41be-a9dc-c68a7d5fb297",
	"00000000-0000-0000-0000-000000000000",
	'val_bridge_value',
	'',
	'//
v_brv = param.v_brv;
select one te_brg related by v_brv->S_BRG[R828]->TE_BRG[R2025];
if ( not_empty te_brg )
  select any te_sys from instances of TE_SYS;
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_brv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  if ( "" == te_val.buffer )
    select many v_pars related by v_brv->V_PAR[R810];
    select one te_aba related by te_brg->TE_ABA[R2010];
    select one te_ee related by v_brv->S_BRG[R828]->S_EE[R19]->TE_EE[R2020];
    te_ee.Included = true;
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    params_OAL = te_parm.OALParamBuffer;
    te_val.OAL = ( ( te_brg.EEkeyletters + "::" ) + ( te_brg.Name + "(" ) ) + ( params_OAL + ")" );
    if ( "c_t *" == te_aba.ReturnDataType )
      if ( not te_sys.InstanceLoading )
        select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
        sretvar = ( ( "vbrv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
        te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
        if ( "" == parameters )
          parameters = sretvar;
        else
          parameters = ( ( sretvar + ", " ) + parameters );
        end if;
      end if;
    end if;
    if ( "C++" == te_target.language )
      if ( "TIM" == te_brg.EEkeyletters )
        te_val.buffer = ( "thismodule->tim->" + te_brg.GeneratedName ) + "(";
      else
        select one te_c related by te_ee->TE_C[R2085];
        if ( not_empty te_c )
          if ( "" == parameters )
            parameters = "thismodule";
          else
            parameters = "thismodule, " + parameters;
          end if;
        end if;
      end if;
    else
      te_val.buffer = ( te_aba.scope + te_brg.GeneratedName ) + "(";
    end if;
    if ( "" != parameters )
      te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
    end if;
    te_val.buffer = te_val.buffer + ")";
    te_val.dimensions = te_aba.dimensions;
    te_val.array_spec = te_aba.array_spec;
    select one te_dim related by te_aba->TE_DIM[R2058];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("32815e8f-9138-4020-9a22-c895a50b6a19",
	"675dda56-044b-41be-a9dc-c68a7d5fb297",
	'v_brv',
	"cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("675dda56-044b-41be-a9dc-c68a7d5fb297",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("abe69982-d52a-489e-8abc-7b79c3517914",
	"00000000-0000-0000-0000-000000000000",
	'val_transform_values',
	'',
	'//
select many v_trvs from instances of V_TRV;
for each v_trv in v_trvs
  ::val_transform_value( v_trv:v_trv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("abe69982-d52a-489e-8abc-7b79c3517914",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f95562e7-838b-40d3-902d-d87d8c77df11",
	"00000000-0000-0000-0000-000000000000",
	'val_transform_value',
	'',
	'//
v_trv = param.v_trv;
select one te_tfr related by v_trv->O_TFR[R829]->TE_TFR[R2024];
if ( not_empty te_tfr )
  select any te_sys from instances of TE_SYS;
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_trv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  if ( "" == te_val.buffer )
    select many v_pars related by v_trv->V_PAR[R811];
    select one te_aba related by te_tfr->TE_ABA[R2010];
    te_val.buffer = te_tfr.GeneratedName + "(";
    if ( te_tfr.Instance_Based == 1 )
      select one te_var related by v_trv->V_VAR[R830]->TE_VAR[R2039];
      if ( not_empty te_var )
        if ( "C++" == te_target.language )
          te_val.buffer = ( te_var.buffer + "->" ) + te_val.buffer;
        end if;
        te_val.buffer = te_val.buffer + te_var.buffer;
        te_val.OAL = te_var.OAL + ".";
      else
        // no variable, must be selection (selected reference)
        if ( "C++" == te_target.language )
          te_val.buffer = "selected->" + te_val.buffer;
        end if;
        te_val.buffer = te_val.buffer + "selected";
        te_val.OAL = "SELECTED.";
      end if;
    else
      if ( "C++" == te_target.language )
        select one te_class related by v_trv->O_TFR[R829]->O_OBJ[R115]->TE_CLASS[R2019];
        te_val.buffer = ( te_class.GeneratedName + "::" ) + te_val.buffer;
      end if;
      te_val.OAL = te_tfr.Key_Lett + "::";
    end if;
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    params_OAL = te_parm.OALParamBuffer;
    te_val.OAL = ( ( te_val.OAL + te_tfr.Name ) + ( "(" + params_OAL ) ) + ")";
    if ( "c_t *" == te_aba.ReturnDataType )
      if ( not te_sys.InstanceLoading )
        select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
        sretvar = ( ( "vtrv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
        te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
        if ( "" == parameters )
          parameters = sretvar;
        else
          parameters = ( ( sretvar + ", " ) + parameters );
        end if;
      end if;
    end if;
    if ( te_tfr.Instance_Based == 1 )
      if ( ( "C++" == te_target.language ) or ( "" != parameters ) )
        te_val.buffer = te_val.buffer + ", ";
      end if;
    end if;
    if ( "C++" == te_target.language )
      te_val.buffer = te_val.buffer + "thismodule";
      if ( "" != parameters )
        te_val.buffer = te_val.buffer + ", ";
      end if;
    end if;
    te_val.buffer = ( te_val.buffer + parameters ) + ")";
    te_val.dimensions = te_aba.dimensions;
    te_val.array_spec = te_aba.array_spec;
    select one te_dim related by te_aba->TE_DIM[R2058];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("4a784138-8722-4f2c-bbfe-66c16f677bcb",
	"f95562e7-838b-40d3-902d-d87d8c77df11",
	'v_trv',
	"ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("f95562e7-838b-40d3-902d-d87d8c77df11",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0c96b84c-3993-4be5-af5d-7fb6f8b95486",
	"00000000-0000-0000-0000-000000000000",
	'val_synch_service_values',
	'',
	'//
select many v_fnvs from instances of V_FNV;
for each v_fnv in v_fnvs
  ::val_synch_service_value( v_fnv:v_fnv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("0c96b84c-3993-4be5-af5d-7fb6f8b95486",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("82524d12-2568-4488-87b5-9049c9c0eabf",
	"00000000-0000-0000-0000-000000000000",
	'val_synch_service_value',
	'',
	'//
v_fnv = param.v_fnv;
select one te_sync related by v_fnv->S_SYNC[R827]->TE_SYNC[R2023];
if ( not_empty te_sync )
  select any te_sys from instances of TE_SYS;
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_fnv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  if ( "" == te_val.buffer )
    select many v_pars related by v_fnv->V_PAR[R817];
    select one te_aba related by te_sync->TE_ABA[R2010];
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    params_OAL = te_parm.OALParamBuffer;
    te_val.OAL = ( ( "::" + te_sync.Name ) + ( "(" + params_OAL ) ) + ")";
    if ( "c_t *" == te_aba.ReturnDataType )
      if ( not te_sys.InstanceLoading )
        select one te_blk related by v_val->ACT_BLK[R826]->TE_BLK[R2016];
        sretvar = ( ( "vfnv" + T::s(i:v_val.LineNumber) ) + ( te_aba.GeneratedName + T::s(i:v_val.StartPosition) ) );
        te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
        if ( "" == parameters )
          parameters = sretvar;
        else
          parameters = ( ( sretvar + ", " ) + parameters );
        end if;
      end if;
    end if;
    name = te_sync.intraface_method;
    if ( "C++" == te_target.language )
      name = "thismodule->" + name;
    end if;
    te_val.buffer = name + "(";
    if ( "" != parameters )
      te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
    end if;
    te_val.buffer = te_val.buffer + ")";
    te_val.dimensions = te_aba.dimensions;
    te_val.array_spec = te_aba.array_spec;
    select one te_dim related by te_aba->TE_DIM[R2058];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1af6140b-b7fd-4495-b96f-aa82216b9583",
	"82524d12-2568-4488-87b5-9049c9c0eabf",
	'v_fnv',
	"6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("82524d12-2568-4488-87b5-9049c9c0eabf",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b43d1777-dd67-4129-8908-a035a2b26b40",
	"00000000-0000-0000-0000-000000000000",
	'val_array_element_references',
	'',
	'//
select many v_aers from instances of V_AER;
for each v_aer in v_aers
  ::val_array_element_reference( v_aer:v_aer );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("b43d1777-dd67-4129-8908-a035a2b26b40",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("99fe9b9d-0485-4317-b325-4ae97ffe9a62",
	"00000000-0000-0000-0000-000000000000",
	'val_array_element_reference',
	'',
	'//
v_aer = param.v_aer;
select one te_val related by v_aer->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_aer->V_VAL[R838];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one index_v_val related by v_aer->V_VAL[R839];
  select one index_te_val related by index_v_val->TE_VAL[R2040];
  if ( "" == index_te_val.buffer )
    ::gen_value( v_val:index_v_val );
  end if;
  te_val.OAL = ( root_te_val.OAL + "[" ) + ( index_te_val.buffer + "]" );
  te_val.buffer = ( root_te_val.buffer + "[" ) + ( index_te_val.buffer + "]" );
  // Peel off outer layer of dimensions.
  // CDS:  do not know how to do this with array_spec
  te_val.array_spec = root_te_val.array_spec;
  te_val.dimensions = root_te_val.dimensions - 1;
  select one next_te_dim related by root_te_val->TE_DIM[R2079]->TE_DIM[R2060.''precedes''];
  if ( not_empty next_te_dim )
    relate te_val to next_te_dim across R2079;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("09e2f8aa-24b9-43b5-a960-68d8e89fccc0",
	"99fe9b9d-0485-4317-b325-4ae97ffe9a62",
	'v_aer',
	"9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Element Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("99fe9b9d-0485-4317-b325-4ae97ffe9a62",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d0779945-daec-4f2d-b4b9-892d9f13326c",
	"00000000-0000-0000-0000-000000000000",
	'val_array_length_values',
	'',
	'//
select many v_alvs from instances of V_ALV;
for each v_alv in v_alvs
  ::val_array_length_value( v_alv:v_alv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("d0779945-daec-4f2d-b4b9-892d9f13326c",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7a6b3a2c-4287-4137-a199-7d89f541cb3f",
	"00000000-0000-0000-0000-000000000000",
	'val_array_length_value',
	'',
	'//
v_alv = param.v_alv;
select one te_val related by v_alv->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_alv->V_VAL[R840];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  te_val.OAL = root_te_val.OAL + ".length";
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    select one te_dim related by root_te_val->TE_DIM[R2079];
    if ( not_empty te_dim )
      te_val.buffer = ( ( ( T::s(i:te_dim.elementCount) + " /" ) + ( "* " + te_val.OAL ) ) + ( " *" + "/" ) );
    else
      te_val.buffer = root_te_val.buffer + ".ARRAY_LENGTH_NOT_FOUND()";
      T::print(s:"ERROR:  C model compiler does not support length operator for OAL value:  ${te_val.OAL}");
      T::exit(i:101);
    end if;
  else
    te_val.buffer = root_te_val.buffer + ".length";
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9c53f3bc-b464-447e-a400-cc397657826f",
	"7a6b3a2c-4287-4137-a199-7d89f541cb3f",
	'v_alv',
	"6f6f82d2-7f88-433b-ad08-9cc89e36a814",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6f6f82d2-7f88-433b-ad08-9cc89e36a814",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Length Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("7a6b3a2c-4287-4137-a199-7d89f541cb3f",
	1,
	"8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("8ef5dfe2-3556-4f6a-b39b-0affe26857fc",
	1,
	"f76021f0-a257-44e3-a11e-4104b91c38ec",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("f76021f0-a257-44e3-a11e-4104b91c38ec",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'mcmc',
	'',
	0,
	'../mcmc.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'escher',
	1,
	'../../escher.xtuml');
